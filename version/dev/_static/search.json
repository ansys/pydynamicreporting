[{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.get_tags.html#get_tags","title":"get_tags","text":"get_tags\n\n\n\nItem.get_tags() -> str\n\nGet the tags on the item.\n\nReturns\n\npython:str\n\nTags on the item.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.bar_mode.html#bar_mode","title":"bar_mode","text":"bar_mode\n\n\n\nItem.bar_mode\n\nBar chart  Histogram config mode\n\ngroup=separate the barsbins  stack=stack the barsbins  overlay=overlay the barbins"},{"objectID":"Home","href":"serverless/quickstart.html#quickstart","title":"Quickstart","text":"Quickstart\n\nGet started quickly with Serverless ADR using the most common setup: a local SQLite database."},{"objectID":"Home","href":"serverless/quickstart.html#instantiation-and-setup","title":"Quickstart > Instantiation and Setup","text":"Instantiation and Setup"},{"objectID":"Home","href":"serverless/quickstart.html#creating-items","title":"Quickstart > Creating Items","text":"Creating Items\n\nCreate report items such as text or tables tied to the default session and dataset."},{"objectID":"Home","href":"serverless/quickstart.html#building-templates","title":"Quickstart > Building Templates","text":"Building Templates\n\nCreate a basic template to structure the report."},{"objectID":"Home","href":"serverless/quickstart.html#rendering-the-report","title":"Quickstart > Rendering the Report","text":"Rendering the Report\n\nRender the report template to HTML, filtering items as needed."},{"objectID":"Home","href":"serverless/quickstart.html#accessing-the-adr-instance","title":"Quickstart > Accessing the ADR Instance","text":"Accessing the ADR Instance\n\nRetrieve the active ADR instance anywhere in your code:\n\nFor more detailed setup options and concepts, see the overview and instantiation guides."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.session_guid.html#session_guid","title":"session_guid","text":"session_guid\n\n\n\nproperty Service.session_guid\n\nGUID of the session associated with the service."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.connect.html#connect","title":"connect","text":"connect\n\n\n\nService.connect(url: str = 'http://localhost:8000', username: str = 'nexus', password: str = 'cei', session: str | None = '') -> None\n\nConnect to a running service.\n\nParameters\n\nurl\n\npython:str, optional\n\nURL for the service. The default is http://localhost:8000.\n\nusername\n\npython:str, optional\n\nUsername for the service. The default is \"nexus\".\n\npassword\n\npython:str, optional\n\nPassword for the service. The default is \"cei\".\n\nsession\n\npython:str, optional\n\nGUID for the session to work with. The default is \"\",\nin which case a new session with its own GUID is created.\nAll created items are then pushed on this session. Visualizations\nare all filtered so that only items for this session are shown.\n\nRaises\n\nNotValidServer\n\nThe current Service doesn not have a valid server associated to it.\n\nExamples"},{"objectID":"Home","href":"serverless/templates.html#templates","title":"Templates","text":"Templates\n\nTemplates in Serverless ADR define the layout, organization, and presentation\nof your report content. They control how Items are arranged, filtered, and rendered\nwithin a report, enabling flexible, reusable, and dynamic reporting structures.\nThe represent report layouts or data generators that organize and present report items."},{"objectID":"Home","href":"serverless/templates.html#overview","title":"Templates > Overview","text":"Overview\n\nTemplates are Python classes derived from the base Template model. They come in two main flavors:\n\nLayouts: Define static or semi-static page structures (e.g., panels, tabs, carousels).\n\nGenerators: Automate dynamic content generation by iterating, merging, filtering, or sorting Items.\n\nTemplates can be nested hierarchically to form complex reports with multiple sections and subsections."},{"objectID":"Home","href":"serverless/templates.html#creating-templates","title":"Templates > Creating Templates","text":"Creating Templates\n\nUse the ADR instance’s create_template() method to create a new template object.\n\nParent-child relationships can be established by passing a parent\ntemplate during creation or by appending to parent.children and saving both."},{"objectID":"Home","href":"serverless/templates.html#template-types","title":"Templates > Template Types","text":"Template Types\n\nCommon layout types include:\n\nBasicLayout\n\nPanelLayout\n\nBoxLayout\n\nTabLayout\n\nCarouselLayout\n\nSliderLayout\n\nFooterLayout\n\nHeaderLayout\n\nIteratorLayout\n\nTagPropertyLayout\n\nTOCLayout\n\nReportLinkLayout\n\nPPTXLayout\n\nPPTXSlideLayout\n\nDataFilterLayout\n\nUserDefinedLayout\n\nGenerator types include:\n\nTableMergeGenerator\n\nTableReduceGenerator\n\nTableMergeRCFilterGenerator\n\nTableMergeValueFilterGenerator\n\nTableSortFilterGenerator\n\nTreeMergeGenerator\n\nSQLQueryGenerator\n\nItemsComparisonGenerator\n\nStatisticalGenerator\n\nIteratorGenerator"},{"objectID":"Home","href":"serverless/templates.html#template-attributes-and-methods","title":"Templates > Template Attributes and Methods","text":"Template Attributes and Methods\n\nTemplates have several important properties and methods:\n\nguid: Unique identifier for the template.\n\nname: The template’s unique name.\n\ndate: The date when the template was created.\n\ntags: A string of tags for categorization and filtering.\n\nparams: JSON-encoded string storing rendering parameters and properties.\n\nitem_filter: Query string filter to select items included in this template.\n\nparent: Reference to the parent template or None for root templates.\n\nchildren: List of child templates for hierarchical organization.\n\nreport_type: String representing the template’s layout or generator type.\n\nCommon methods include:\n\nset_filter(filter_str): Replace the item filter string.\n\nadd_filter(filter_str): Append to the existing item filter.\n\nget_params(): Return parsed parameters as a dictionary.\n\nset_params(params_dict): Set parameters, replacing existing ones.\n\nadd_params(params_dict): Add or update parameters without overwriting others.\n\nget_property(): Shortcut to get the “properties” sub-dictionary from parameters.\n\nset_property(props_dict): Replace the “properties” dictionary.\n\nadd_property(props_dict): Add/update keys within the “properties” dictionary.\n\nrender(context=None, item_filter=\"\", request=None): Render the template to HTML string.\n\nto_dict(): Returns a JSON-serializable dictionary of the full template tree.\n\nto_json(filename): Store the template as a JSON file. Only allow this action if this template is a root template.\n\nreorder_child(target_child_template, new_position_index): Reorder the target template in the children list to the specified position."},{"objectID":"Home","href":"serverless/templates.html#template-parameters","title":"Templates > Template Parameters","text":"Template Parameters\n\nEach template stores configuration and state in its params field, a JSON string representing:\n\nHTML header (e.g., \"HTML\")\n\nLayout-specific options (e.g., column counts, widths)\n\nFilter parameters and modes controlling which Items are included\n\nSorting options (fields, order, selection)\n\nOther custom properties for configuration and behavior\n\nYou can manipulate these through provided methods:\n\nget_params() / set_params(dict)\n\nadd_params(dict) to merge parameters\n\nget_property() / set_property(dict) / add_property(dict) for the properties subset\n\nSorting and filtering helpers (e.g., get_sort_fields(), set_sort_fields(), get_filter_mode(), set_filter_mode())\n\nExample modifying parameters:"},{"objectID":"Home","href":"serverless/templates.html#template-properties","title":"Templates > Template Properties","text":"Template Properties\n\nTemplates support a flexible set of properties stored within the params JSON field.\nThese properties allow you to control fine-grained behavior of layouts and generators\nand customize rendering without subclassing."},{"objectID":"Home","href":"serverless/templates.html#common-properties","title":"Templates > Common Properties","text":"Common Properties\n\ncolumn_count (layouts only)\nNumber of columns in multi-column layouts.\n\ncolumn_widths (layouts only)\nList of floats defining relative widths of columns, e.g., [1.0, 2.0, 1.0].\n\ntranspose (layouts only)\nInteger flag (0 or 1) to indicate whether tabular content should be transposed.\n\nskip_empty (layouts only)\nInteger flag (0 or 1) to skip rendering empty items or not.\n\nsort_fields\nList of fields by which to sort included items.\n\nsort_selection\nDetermines which items to select after sorting. Allowed values:\n\"all\", \"first\", \"last\".\n\nfilter_type\nControls filter application mode. Options include:\n\"items\", \"root_replace\", \"root_append\".\n\n… and many more depending on the specific layout or generator."},{"objectID":"Home","href":"serverless/templates.html#adding-and-modifying-properties","title":"Templates > Adding and Modifying Properties","text":"Adding and Modifying Properties\n\nYou can use the following methods on a template instance to interact with properties:"},{"objectID":"Home","href":"serverless/templates.html#direct-attribute-access","title":"Templates > Direct Attribute Access","text":"Direct Attribute Access\n\nAlternatively, some common properties can also be accessed or set using standard attribute\nsyntax on the template instance. For example:\n\nYou can also use Python’s built-in setattr() function to set properties dynamically:\n\nNote that attribute access is a convenient shortcut for common properties.\nUnder the hood, these are proxied to the underlying JSON params data."},{"objectID":"Home","href":"serverless/templates.html#examples","title":"Templates > Examples","text":"Examples"},{"objectID":"Home","href":"serverless/templates.html#notes","title":"Templates > Notes","text":"Notes\n\nProperties are stored as JSON under params → properties.\n\nThey provide a flexible way to extend template capabilities without subclassing.\n\nSome specialized layouts and generators may define their own additional properties accessible through their own APIs."},{"objectID":"Home","href":"serverless/templates.html#filters","title":"Templates > Filters","text":"Filters\n\nFilters control which Items are included in a template’s rendered output.\n\nSet via set_filter(filter_str), where filter_str is a query string, e.g.,\n\"A|i_tags|cont|section=intro;\" selects items tagged “section=intro”.\n\nFilters can be extended via add_filter()."},{"objectID":"Home","href":"serverless/templates.html#sorting","title":"Templates > Sorting","text":"Sorting\n\nTemplates can specify sorting of items by fields using:\n\nset_sort_fields([...]) for sorting keys (e.g., [\"date\", \"name\"])\n\nset_sort_selection(\"all\" | \"first\" | \"last\") to choose which items from sorted groups to show."},{"objectID":"Home","href":"serverless/templates.html#working-with-template-hierarchies","title":"Templates > Working with Template Hierarchies","text":"Working with Template Hierarchies\n\nTemplates can be organized in parent-child relationships to structure complex reports.\n\nUse the parent argument to specify a template’s parent during creation.\n\nThe children list contains all direct child templates.\n\nThe children_order property stores the ordered GUIDs of children for rendering order.\n\nThe reorder_children() method will reorder the children list based on the stored order."},{"objectID":"Home","href":"serverless/templates.html#example-creating-a-nested-template-structure","title":"Templates > Example: Creating a Nested Template Structure","text":"Example: Creating a Nested Template Structure"},{"objectID":"Home","href":"serverless/templates.html#loading-templates-from-a-json-file","title":"Templates > Loading Templates from a JSON file","text":"Loading Templates from a JSON file\n\nYou can load a report with multiple templates from an existing JSON file."},{"objectID":"Home","href":"serverless/templates.html#rendering-templates","title":"Templates > Rendering Templates","text":"Rendering Templates\n\nTemplates can render themselves into complete HTML content using the render() method.\n\nThis method generates the full HTML output, including all nested templates and items,\nand applies any specified filters. The context parameter can be used to pass additional\ndata for rendering, such as user-defined variables or configuration settings.\n\nRendering context supports options like:\n\nPage dimensions and DPI for layout calculations\n\nDate and time formatting\n\nIf rendering fails, the output HTML will contain an error message for easier debugging.\n\nIf you would like more information on the error, set the debug flag to True when instantiating\nthe ADR class."},{"objectID":"Home","href":"serverless/templates.html#rendering-via-the-adr-entry-point","title":"Templates > Rendering via the ADR Entry Point","text":"Rendering via the ADR Entry Point\n\nThe ADR singleton class provides convenient methods to render templates by name or other filters,\nabstracting the fetching and rendering process:\n\nThe render_report() method:\n\nRequires at least one keyword argument to identify the template (e.g., name, guid).\n\nPasses the context and item_filter to the template’s render() method.\n\nRaises ADRException on failure with descriptive error messages."},{"objectID":"Home","href":"serverless/templates.html#rendering-to-pptx","title":"Templates > Rendering to PPTX","text":"Rendering to PPTX\n\nYou can render a PowerPoint (.pptx) file from templates of type PPTXLayout using either the template’s\nrender_pptx() method or through the ADR singleton’s render_report_as_pptx() helper.\n\nExample using the template method:\n\nExample using the ADR entrypoint:\n\nNotes on render_report_as_pptx() method:\n\nThe template identified by the filter (e.g., name) must be of type PPTXLayout.\n\nRaises an ADRException if the template is not found or not of the required type.\n\nReturns raw bytes of the generated PPTX presentation.\n\nPasses context and item_filter to the template’s render_pptx() method.\n\nExceptions during rendering are wrapped and raised as ADRException."},{"objectID":"Home","href":"serverless/templates.html#exporting-to-html","title":"Templates > Exporting to HTML","text":"Exporting to HTML\n\nYou can export a report as a fully self-contained, offline HTML deliverable using the\nexport_report_as_html() method. This is ideal for sharing reports that can be\nviewed in any web browser without needing access to the original database or a running server.\n\nThe method creates a main HTML file and subdirectories (media, static) containing\nall necessary assets like images, scripts, and stylesheets.\n\nExample using the ADR entrypoint:\n\nNotes on export_report_as_html() method:\n\nRequires the static_directory to be configured when initializing the ADR instance.\n\nIt is required to run adr.setup(collect_static=True) to ensure all necessary\nstatic files are gathered and available for the export process inside the static_directory.\n\nThe method requires at least one keyword argument (e.g., name, guid) to identify the root\ntemplate of the report to be exported."},{"objectID":"Home","href":"serverless/templates.html#lifecycle-notes","title":"Templates > Lifecycle Notes","text":"Lifecycle Notes\n\nTemplates must be saved to persist changes.\n\nParent templates must be saved before saving children.\n\nDeleting a template typically requires handling or deleting its children to avoid orphaned templates."},{"objectID":"Home","href":"serverless/templates.html#exceptions-and-validation","title":"Templates > Exceptions and Validation","text":"Exceptions and Validation\n\nCreating or fetching templates with missing or invalid fields raises validation errors.\n\nAttempting to instantiate the base Template class directly raises an error.\n\nFilters using keys mentioning the type (like t_types|) are disallowed on subclasses.\n\nInvalid parent references or child types will raise type or integrity errors during saving.\n\nOnly top-level templates (parent=None) can be copied between databases.\n\nTemplates must have their parents and children saved before saving themselves to ensure integrity.\n\nInvalid property types or malformed filters raise errors.\n\nFetching non-existent templates raises DoesNotExist errors.\n\nUsing invalid filter keys in subclasses raises ADRException."},{"objectID":"Home","href":"serverless/templates.html#summary","title":"Templates > Summary","text":"Summary\n\nTemplates are the backbone of report structure in Serverless ADR. They let you create\nrich, dynamic, and highly customizable reports by defining layouts and generators,\nsetting filters and parameters, and nesting templates to build complex hierarchical reports.\n\nRendering can be done directly via template instances or conveniently through the ADR singleton instance.\n\nUse template.render() for HTML output.\n\nUse template.render_pptx() or adr.render_report_as_pptx() for PPTX output.\n\nBoth rendering paths support passing context and filtering items if applicable.\n\nHandle exceptions raised as ADRException to debug issues."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.get_iframe.html#get_iframe","title":"get_iframe","text":"get_iframe\n\n\n\nReport.get_iframe(width: int = 1000, height: int = 800, filter: str = '', item_filter: str = '')\n\nGet the iframe object corresponding to the report.\n\nParameters\n\nwidth\n\npython:int, optional\n\nWidth of the iframe object. The default is 1000.\n\nheight\n\npython:int, optional\n\nHeight of the iframe object. The default is 800.\n\nfilter\n\npython:str, optional\n\nDEPRECATED. Use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nReturns\n\niframe\n\niframe object corresponding to the report. If no iframe can be generated,\nNone is returned.\n\nExamples"},{"objectID":"Home","href":"examples/00-basic/02-connect.html#connect-services","title":"Connect services","text":"Connect services\n\nThis example shows how to start an Ansys Dynamic Reporting\nservice via a Docker image, create a second instance of the Service\nclass, and connect it to the already running service. It then shows\nhow to create and modify items in the original database with this\nnew instance.\n\nThis example assumes that you do not have a local Ansys installation but\nare starting an Ansys Dynamic Reporting Service via a Docker image on\na new database."},{"objectID":"Home","href":"examples/00-basic/02-connect.html#start-an-ansys-dynamic-reporting-service","title":"Connect services > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory."},{"objectID":"Home","href":"examples/00-basic/02-connect.html#create-items","title":"Connect services > Create items","text":"Create items\n\nGiven that the Ansys Dynamic Reporting service is running on top\nof an empty database, create a few items in the database and then visualize\nthe default report that shows all these items, one after the other. Note that\nthis code assumes that you have files on disk for the payload of the items.\n\n"},{"objectID":"Home","href":"examples/00-basic/02-connect.html#create-another-connected-instance","title":"Connect services > Create another connected instance","text":"Create another connected instance\n\nNow that you have a running Ansys Dynamic Reporting service, create a\nsecond instance of the Service class and use it to\nconnect to the database. Visualize the default report."},{"objectID":"Home","href":"examples/00-basic/02-connect.html#create-an-item-via-the-connected-object","title":"Connect services > Create an item via the connected object","text":"Create an item via the connected object\n\nUse the new object for the connected service to create an Image item.\nVisualize the default report again to verify that this item has been\nadded to the database."},{"objectID":"Home","href":"examples/00-basic/02-connect.html#visualize-only-items-from-a-session","title":"Connect services > Visualize only items from a session","text":"Visualize only items from a session\n\nAssume that you want to visualize only the items that were\ncreated from the connected Ansys Dynamic Reporting session and not the\noriginal instance. To achieve this, you add a filter to the default\nreport visualization. Note that running this method on either of the\nAnsys Dynamic Reporting instances produces the same result."},{"objectID":"Home","href":"examples/00-basic/02-connect.html#close-the-service","title":"Connect services > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 02-connect.ipynb\n\nDownload Python source code: 02-connect.py\n\nDownload zipped: 02-connect.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux6.html#line_marker_aux6","title":"line_marker_aux6","text":"line_marker_aux6\n\n\n\nItem.line_marker_aux6\n\nAuxiliary data 6\n\nScalar value or name of a row accessible to line_marker_text as vaux6. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux1.html#line_marker_aux1","title":"line_marker_aux1","text":"line_marker_aux1\n\n\n\nItem.line_marker_aux1\n\nAuxiliary data 1\n\nScalar value or name of a row accessible to line_marker_text as vaux1. May be a list."},{"objectID":"Home","href":"userguide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section describes concepts that you need to know to use PyDynamicReporting."},{"objectID":"Home","href":"userguide/index.html#api-overview","title":"User guide > API overview","text":"API overview\n\nThe PyDynamicReporting API has three main classes:\n\nService: Provides for starting and connecting to an Ansys Dynamic\nReporting service. This class also provides for creating, querying, and\ndeleting the database and for stopping an Ansys Dynamic Report service.\n\nItem: Provides access to the items in the database and allows\nthem to be modified.\n\nReport: Provides access to and rendering of Report objects.\n\nPyDynamicReporting supports creating and pushing these items into an Ansys\nDynamic Reporting service:\n\nImages\n\nAnimations\n\n3D Scenes (AVZ file format supported)\n\nTables\n\nTrees\n\nText (HTML and LaTeX file formats supported)\n\nFiles (generic file formats supported)\n\nThis code connects to a running Ansys Dynamic Reporting service and\npushes an image item on a new session:\n\nA rendering of the image object is embedded in the current interpreter. You\ncan follow the same steps to create and visualize other types of items.\n\nTo get the URL corresponding to an item, use this attribute:\n\nSimilarly, to get the iframe corresponding to an item, use this attribute:\n\nWith the corresponding URL or iframe, you can embed the item visualization\ninto any other app.\n\nIf you want to update an image, all you need to do is redefine\nthe item_image attribute. The Ansys Dynamic Reporting database is\nautomatically updated."},{"objectID":"Home","href":"userguide/index.html#visualize-an-ansys-dynamic-reporting-item","title":"User guide > Visualize an Ansys Dynamic reporting item","text":"Visualize an Ansys Dynamic reporting item\n\nPyDynamicReporting provides two main ways to visualize an item. The first is\nto visualize it standalone, as shown in the preceding code examples. The second\nis to visualize it together with all the other items that are present in the\ncurrent Ansys Dynamic Reporting session.\n\nEach time that you use the PyDnamicReporting\nstart method to\nstart an Ansys Dynamic Reporting service or the\nconnect method\nto connect to one, you are connected to a specific session. Each\nsession has its own GUID (globally unique identifier).\n\nOn the Ansys Dynamic Reporting object, you can execute the\nvisualize_report\nmethod to visualize all items that are present in the session.\n\nThe following code embeds a widget in the app that you are running\nfrom. It shows that both items (image and text) have been created."},{"objectID":"Home","href":"userguide/index.html#connect-to-and-query-an-existing-ansys-dynamic-reporting-session","title":"User guide > Connect to and query an existing Ansys Dynamic Reporting session","text":"Connect to and query an existing Ansys Dynamic Reporting session\n\nYou can start an Ansys Dynamic Reporting session in one Python interpreter\nand connect to it in a different interpreter or on a different machine by passing the\nsession GUID as the parameter in the connect\nmethod.\n\nThis code starts an Ansys Dynamic Reporting session in the first interpreter:\n\nThe session contains the GUID needed to connect to this session in a different\ninterpreter or on a different machine.\n\nThis GUID is then copied and pasted into another interpreter as shown in this code:\n\nOnce you are connected to the session, you can query its items:\n\nThe query method takes\na filter input that allows you to select the items to return. The query\nstring follows the same structure as the queries described in\nQuery Expressions\n\nin the documentation for Ansys Dynamic Reporting.\n\nTo get a list of the existing report templates in the database, use the\nget_list_reports\nmethod:\n\nTo query the database for a specific report, use the\nget_report\nmethod:"},{"objectID":"Home","href":"userguide/index.html#backward-compatibility-with-template-generator-scripts","title":"User guide > Backward compatibility with template generator scripts","text":"Backward compatibility with template generator scripts\n\nThe template editor in Ansys Dynamic Reporting contains a feature for exporting\na Python script to create report templates on the connected server with all their\nsettings and properties and push these report templates to a new server.\nThis script uses the low-level API for Ansys Dynamic Reporting, which preceded\nPyDynamicReporting.\n\nA legacy script starts with these lines of code:\n\nFollowing these lines are a series of commands that describe the template names and properties.\n\nTo convert a legacy script to a report template for PyDynamicReporting, replace the preceding\nlines in the legacy script with these lines:\n\nEverything else in the script remains the same."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.xaxis.html#xaxis","title":"xaxis","text":"xaxis\n\n\n\nItem.xaxis\n\nX axis rows\n\nThe row numbersnames to use as the X axis values. Example: 2 Distance"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_sort.html#table_sort","title":"table_sort","text":"table_sort\n\n\n\nItem.table_sort\n\nTable sorting\n\nAllow column sorting from headers: none  all  data  Default: all"},{"objectID":"Home","href":"serverless/items.html#items","title":"Items","text":"Items\n\nIn Serverless ADR, Items are the fundamental content units that form the building blocks of your reports.\nThey encapsulate individual pieces of data or visual content, such as text, tables, images, animations, and files,\nwhich you can organize, query, and render within report templates."},{"objectID":"Home","href":"serverless/items.html#core-concepts","title":"Items > Core Concepts","text":"Core Concepts\n\nItems are fully fledged Python classes with type-specific validation and behavior.\n\nEach item must be associated with a Session and a Dataset to maintain provenance.\n\nItems support rich metadata through tags, ordering via sequence numbers, and source attribution.\n\nValid content types and file formats are enforced to ensure data integrity.\n\nCommon item types include:\n\nString: Plain text content.\n\nHTML: Valid HTML content, validated for proper structure.\n\nTable: Two-dimensional numpy arrays representing tabular data, with additional metadata like labels and plot settings.\n\nTree: Hierarchical data represented as nested dictionaries with keys key, name, value, and optional children.\n\nImage: Images in PNG, JPG, and enhanced TIFF formats, supporting embedded metadata.\n\nAnimation: Video files, typically MP4 format.\n\nScene: 3D scene files such as STL, PLY, AVZ, CSF, and related formats.\n\nFile: Generic files linked to your reports."},{"objectID":"Home","href":"serverless/items.html#creating-items","title":"Items > Creating Items","text":"Creating Items\n\nCreate new items via the ADR instance’s create_item() method.\nItems automatically link to the current default session and dataset unless specified explicitly."},{"objectID":"Home","href":"serverless/items.html#item-properties-and-metadata","title":"Items > Item Properties and Metadata","text":"Item Properties and Metadata\n\nItems support several useful properties and metadata fields:\n\nguid: Unique identifier for the item, automatically generated.\n\nname: Unique identifier for the item within the dataset.\n\ntype: The item type (e.g., string, table, etc.).\n\ndate: Timestamp indicating when the item was created.\n\ncontent: The primary payload of the item, type-dependent.\n\ntags: A space-separated string of key or key=value tags for querying and filtering.\n\nsource: String to track the data origin or generating process.\n\nsequence: Integer to order items in reports or presentations.\n\nsession and dataset: Associations to link items to specific data contexts."},{"objectID":"Home","href":"serverless/items.html#working-with-file-based-items","title":"Items > Working With File-Based Items","text":"Working With File-Based Items\n\nItems like Image, Animation, Scene, and File accept file paths as content.\nThe files are validated for existence and allowed formats before being saved into the configured media directory.\n\nExample: Creating and saving an image item\n\nAfter saving, the file is copied into the configured media directory. You can access the uploaded file’s storage path using the file_path property:\n\nThis path points to the location within the media directory configured during ADR setup.\nYou can use this path for verification, further processing, or serving the media file in your application.\n\nWhen rendering reports or templates that include media items, the HTML references media files using relative URLs,\ntypically prefixed by the configured media URL (default is /media/):\n\nEnsure your web server is configured to serve these media URLs from the media directory where files are stored.\n\nSummary:\n- Set the content of file-based items to the local file path before saving.\n- After saving, file_path gives the full path to the uploaded media file.\n- When the item is loaded again from the database, content will be the relative path to the media file.\n- Rendered reports use relative media URLs; configure your web server accordingly.\n- Use the media_url property to get the URL prefix for serving media files.\n- The media URL is typically /media/ by default."},{"objectID":"Home","href":"serverless/items.html#rendering-items","title":"Items > Rendering Items","text":"Rendering Items\n\nItems can be rendered individually into HTML fragments using the render() method.\nThis HTML can then be embedded in reports or served directly."},{"objectID":"Home","href":"serverless/items.html#querying-items","title":"Items > Querying Items","text":"Querying Items\n\nYou can query items using the ADR query() method with filters based on tags, names, types, and other metadata."},{"objectID":"Home","href":"serverless/items.html#lifecycle-notes","title":"Items > Lifecycle Notes","text":"Lifecycle Notes\n\nItems must be associated with saved Sessions and Datasets before calling save().\n\nModifying an item’s content or metadata requires calling save() again to persist changes.\n\nDeleting an item removes it from the database and deletes associated media files, if any.\n\nProper session and dataset management is critical to maintain report integrity and provenance.\n\nValidation errors are raised if content does not meet item-specific requirements.\n\nAttempting to instantiate an item type directly (e.g., Item()) raises an error;\nalways use the specific item classes like String, Table, etc."},{"objectID":"Home","href":"serverless/items.html#exceptions-and-validation","title":"Items > Exceptions and Validation","text":"Exceptions and Validation\n\nAttempting to create or save items without required fields or with invalid content raises validation errors.\n\nFile-based items validate file existence and format before saving.\n\nQuerying items with incorrect syntax or unsupported operations raises an ADRException.\n\nFetching or querying non-existent items raises a DoesNotExist exception.\n\nMultiple items matching a single fetch criteria raise a MultipleObjectsReturned exception."},{"objectID":"Home","href":"serverless/items.html#summary","title":"Items > Summary","text":"Summary\n\nItems encapsulate the actual data and content in your reports. Understanding item types, content validation, and lifecycle management is essential for effective Serverless ADR usage.\n\nNext, explore the templates guide to learn how to arrange items into complex, reusable report layouts."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux2.html#line_marker_aux2","title":"line_marker_aux2","text":"line_marker_aux2\n\n\n\nItem.line_marker_aux2\n\nAuxiliary data 2\n\nScalar value or name of a row accessible to line_marker_text as vaux2. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_scrollx.html#table_scrollx","title":"table_scrollx","text":"table_scrollx\n\n\n\nItem.table_scrollx\n\nHorizontal scrolling\n\nControl visibility of horizontal scrollbar.  Default: 1"},{"objectID":"Home","href":"examples/00-basic/00-launch-reporting-service.html#launching-the-ansys-dynamic-reporting-service","title":"Launching the Ansys Dynamic Reporting Service","text":"Launching the Ansys Dynamic Reporting Service\n\nTo launch the service, provide an Ansys installation directory as a string.\nYou can provide an existing, empty, directory if you intend to create a database.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/00-basic/00-launch-reporting-service.html#starting-the-service","title":"Launching the Ansys Dynamic Reporting Service > Starting the Service","text":"Starting the Service\n\nOnce a Service object has been created, it must be started. It can be\nsimilarly stopped."},{"objectID":"Home","href":"examples/00-basic/00-launch-reporting-service.html#connecting-to-a-remote-service","title":"Launching the Ansys Dynamic Reporting Service > Connecting to a remote Service","text":"Connecting to a remote Service\n\nYou may need to connect to a service that is already running. To do so create\na Service object, as before, but leave off the database argument and this time,\ncall the connect method and provide connection details, including any\ncredentials required. If no username and password were set when creating the\ndatabase, you can leave these fields empty and the default values will be\nused.\n\n\n\nDownload Jupyter notebook: 00-launch-reporting-service.ipynb\n\nDownload Python source code: 00-launch-reporting-service.py\n\nDownload zipped: 00-launch-reporting-service.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"lowlevelapi/ServerObject.html#server-object","title":"Server Object","text":"Server Object"},{"objectID":"Home","href":"lowlevelapi/ServerObject.html#report_remote_serverserver-object","title":"Server Object > report_remote_server.Server object","text":"report_remote_server.Server object\n\nThis object serves to wrap the Ansys Dynamic Reporting REST API.\nIt sets up a connection\nto an ADR Nexus server and allows objects to be pulled from and pushed to the\nserver.\n\nA new server object can be created with the following:\n\nserverobj = report_remote_server.Server(url=None, username=None, password=None)"},{"objectID":"Home","href":"lowlevelapi/ServerObject.html#methods","title":"Server Object > Methods","text":"Methods\n\nserverobj.set_URL(“http://localhost:8000”)\nserverobj.set_username(“nexus”)\nserverobj.set_password(“cei”)\n\nSpecify the ADR Nexus server (url and authentication information) to which\nto connect the Server object to.\n\nurl = serverobj.get_URL()\nusername = serverobj.get_username()\npassword = serverobj.get_password()\n\nRetrieve information about the current Server configuration.\n\nserver_name = serverobj.get_server_name()\n\nAttempts to connect to the database returns the name of the server. For\nremote servers, the name is a configuration parameter. For local\nservers, it is the name of the directory that contains the SQLite file.\nNote: if a connection to the server cannot be made or the server does\nnot support names, this method returns the URL for the server.\n\nserver_version_float = serverobj.validate()\n\nAttempts to connect to the database and verifies that the server\nconnection specifications are valid. It returns the version of the\nADR Nexus\nserver API that the server is using. Note: this method will throw an\nexception on encountering an error.\n\nhas_database_url = serverobj.valid_database()\n\nThis method checks to see if a database url has been set. It returns\nTrue if a url has been set. It does not verify that the connection and\nusername, password is valid.\n\nserverobj.stop_local_server()\n\nThis method will stop any local ADR Nexus server accessible via the current\nServer object URL, username and password.\n\nguid_list = serverobj.get_object_guids(objtype=type_class, query=None)\n\nThis method will query the server and returns a list of the object GUIDs\nthat meet the specific query. If the query is\nNone, all of the GUIDs of the type specified by objtype will be\nreturned. The objtype keyword specifies the type of database object to\nget the list of guids for. Valid values for the objtype keyword include:\n\nreport_objects.DatasetREST\n\nreport_objects.SessionREST\n\nreport_objects.ItemREST\n\nobj_list = serverobj.get_objects(objtype=type_class, query=None)\n\nThis method is similar to get_object_guids() except that it\nreturns a list of actual instances of the class specified by the\nobjtype keyword instead of just returning the GUIDs.\n\nNote that if you want the list of templates, you can either set\nobjtype to report_objects.TemplateREST or to\nreport_objects.TemplateREST.factory. In the first case, all the\ntemplates will be returned as objects of the TemplateREST class. In\nthe second case, all templates will be returned as objects of the\nsub-classes of TemplateREST, corresponding to the exact report_type.\n\nobj = serverobj.get_object_from_guid(guid, objtype=type_class)\n\nThis method queries the ADR Nexus server for a single object of the class\nspecified by objtype with the GUID specified by the guid argument. It\nreturns an instance of the class specified by objtype or None if the\nGUID is not present.\n\nstatus_code = serverobj.put_objects(objects)\n\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and pushes the local contents of the objects to\nthe server. If objects with the same GUID(s) already exist in the server\ndatabase, they will be overwritten. The return value is a status code\nfrom the requests Python module (e.g. requests.codes.ok). Note:\nif an error occurs the method will return the last error, but it will\ntry to push every object in the input collection.\n\nstatus_code = serverobj.del_objects(objects)\n\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and asks the server to delete them. If objects\nwith matching GUIDs exist in the server database, they will be removed\nfrom the database. This method only looks at the guid attribute of the\ninput object collection. The return value is a status code from the\nrequests Python module (e.g. requests.codes.ok). Note: if an\nerror occurs the method will return the last error, but it will try to\ndelete every object in the input collection.\n\nstatus_code = serverobj.get_file(object, fileobj)\n\nIn some cases, a report_objects.ItemREST instance will have an\nassociated file in the Ansys Dynamic Reporting datastore.\nExamples include images,\nanimations and 3D geometry (see report_objects.ItemRest above). The\nItemREST.is_file_protocol() can be used to check for this. This method\nwill download the file (if any) associated with the (ItemREST instance)\nobject and write the output into the file object specified by the\nfileobj argument. Fileobj should be an open Python file type object that\nsupports minimally write I/O semantics. Note that the operation is\nstreaming, so it is possible for a partial file to exist if errors are\nencountered. The return value is a status code from the requests\nPython module (e.g. requests.codes.ok).\n\nsession = serverobj.get_default_session()\ndataset = serverobj.get_default_dataset()\nserverobj.set_default_session(session)\nserverobj.set_default_dataset(dataset)\n\nThe server object maintains default SessionREST and DatasetREST objects\nthat are used with the create_item() method to simplify data item\ncreation. The get_default_session() and get_default_dataset() methods\nreturn the current default session and dataset objects. The\ncorresponding set_default_session() and set_default_dataset() methods\nset these objects to externally generated objects or more commonly,\nmodified objects returned by the get methods.\n\nitem = serverobj.create_item(name=”Unnamed Item”, source=”ADR Python\nAPI”, sequence=0)\n\nThis method simplifies the generation of data items. One can create a\nnew data item by simply instantiating an instance of ItemREST(), but\nmany of the item attributes would need to be configured properly before\nthe object can be saved into the database. Most notably, the\nitem.session and item.dataset attributes need to be set to the GUIDs for\nan instance of SessionREST and DatasetREST respectively. The Server\nobject always maintains a default instance of SessionREST and\nDatasetREST objects. The object references can be modified by the user\nto customize their metadata. The create_item() method will create a new\ninstance of the ItemREST class and will automatically fill in the\nsession and dataset attributes to the objects returned by\nget_default_session() and get_default_dataset(). Additionally, if\nput_objects() is called on an item whose session or dataset attributes\nmatch the default GUIDs, the put_objects() method will push the session\nand/or dataset objects as needed. If the session/dataset objects change\n(without changing the GUIDs) the system will detect this any\nautomatically push them when the next item is pushed that references one\nof them. The create_item() method allows the user to specify the name,\nsource and sequence number for the item during creation.\n\nserverobj.export_report_as_html(report_guid, directory_name,\nquery=None)\n\nThis method exports the Ansys Dynamic Reporting report with the\nGUID specified by the\nargument “report_guid”. The result will be written into the directory\nspecified by the argument “directory_name”. The method will create the\ndirectory if it does not exist previously. There will be a file named\n“index.html” in the directory and a “media” subdirectory containing the\nresources needed to display the report. note: if there is an error, this\nmethod will throw an exception.\n\nInput arguments:\n\nreport guid (string) - the guid of the report to be downloaded as\nHTML.\n\ndirectory_name (string) - the name of the directory to save the\ndownloaded contents.\n\nquery (dictionary) - a dictionary of query parameters to add to the\nreport URL.\n\nserverobj.export_report_as_pdf(report_guid, file_name, delay=5000)\n\nSave a PDF rendering of the Ansys Dynamic Reporting report with the GUID specified by the\nargument “report_guid”. The name of the PDF file is specified by the\nargument “file_name”. Note: if there is an error, this method will throw\nan exception. This is the equivalent of displaying the report with the\nquery ‘print=pdf’ included in the report URL.\n\nInput arguments:\n\nreport guid (string) - the guid of the report to be saved as PDF.\n\nfile_name (string) - the name of the target PDF file.\n\ndelay (int) - number of milliseconds to wait for the report to load\nbefore downloading it. Default is 5000ms. Optional.\n\nVarious data items and report templates will behave differently when\nprinting:\n\nTree data items will be fully expanded and the interactive buttons\nfor expanding/collapsing will be removed.\n\nAnimation data items will be rendered as if the ‘image_display’\nproperty is set to 1.\n\nTable data items will have all of their interactive controls\nsuppressed (e.g. sorting, searching, scrolling, pagination, etc)\n\nTab layouts will behave as if the ‘inline_tabs’ property is set to 1.\n\nPanel layouts will behave as if the ‘panel_template_toggle’ property\nis set to 0."},{"objectID":"Home","href":"lowlevelapi/ServerObject.html#magic-tokens","title":"Server Object > Magic tokens","text":"Magic tokens\n\nMagic tokens is a new way for users in the ADR Nexus server\nto login without using\ntheir password. Ansys Dynamic Reporting\nprovides a Python API to generate a per-user\nsecret token. This token can then be attached to any Ansys Dynamic Reporting web page URL\nto bypass login during future access. This is currently restricted to\nonly the user who starts the server. This can be useful if a URL needs\nto be reused within a HTML iframe.\n\nserverobj.generate_magic_token(max_age=None)\n\nThis method generates a magic token with the desired expiry.\n\nInput arguments:\n\nmax_age (int) - Expiry of the token in seconds. If this is None, the\nserver will use its default expiry of 1 day.\n\nserverobj.get_url_with_magic_token()\n\nThis will return a URL to access the ADR Nexus server with a magic token\nattached.\n\nUsage:\n\nMethod on a report_remote_server.Server() object to create a new\nreport_object.TemplateREST object. You can pass as input:\n\nname (string) - the name of the template\n\nparent (template objects)- the parent template. If None, the new\ntemplate will be a top level one\n\nreport_type (string) - sets the type of template. Each value of\nreport_type corresponds to a different template type, and will\ngenerate an object from the corresponding template sub-class. See the\ntable for the accepted values of report_type, the corresponding\ntemplate type and Python API sub-class.\n\nerror_string = serverobj.get_last_error()\n\nSeveral of the server methods return REST error codes: put_objects(),\ndel_objects(), get_file(), etc. When these methods error, they return\nthe specific REST error code. If the error in question was generated by\nthe ADR Nexus server, in addition to the error_code not being equal to\nrequests.codes.ok, the server may return a more detailed error\nstring. This string can be retrieved using the get_last_error() method.\nAn example of a data item with an item name exceeding:\n\nwill output the following (note: requests.codes.bad_request == 400)\noutput noting that the “name” field exceeds the maximum field length:\n\n400\n{“name”:[“Ensure this field has no more than 80 characters.”]}"},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#plot-types","title":"Plot types","text":"Plot types\n\nThis example shows how to start an Ansys Dynamic Reporting\nservice via a Docker image and create different plot items.\nThe example focuses on showing how to use the API to generate\ndifferent plot types.\n\nThis example assumes that you do not have a local Ansys installation but\nare starting an Ansys Dynamic Reporting Service via a Docker image on\na new database."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#start-an-ansys-dynamic-reporting-service","title":"Plot types > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#create-a-simple-table","title":"Plot types > Create a simple table","text":"Create a simple table\n\nLet us start by creating a simple table and visualizing it. Create a table\nwith 5 columns and 3 rows.\n\nYou can use the labels_row attribute to set the row labels. Use the visualize\nmethod on the object to see its representation. By default, it will be displayed\nas a table"},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-as-a-line-plot","title":"Plot types > Visualize as a line plot","text":"Visualize as a line plot\n\nLet us know create a new item that is the same as the previous simple table,\nbut this time we will set the plot attribute to line to visualize the values\nas two line plots, and we will use the xaxis attribute to set which row should\nbe used as the X axis. We can also control the formatting and the title of the\naxis separately with the axis_format and title attributes, as done below.\nThe result can be seen in the following image."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-as-a-bar-plot","title":"Plot types > Visualize as a bar plot","text":"Visualize as a bar plot\n\nNext, we will see how to create a bar plot, and decorate it with the same\nattributes used in the previous code snippet. See the following image for\nthe resulting visualization."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-pie-chart","title":"Plot types > Visualize a pie chart","text":"Visualize a pie chart\n\nNext supported plot type is the pie chart. Please see the following code snippet\nto generate the pie chart as in the following image."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-heatmap","title":"Plot types > Visualize a heatmap","text":"Visualize a heatmap\n\nHeatmaps are plots where at each (X,Y) position is associated the value of a\nvariable, colored according to a legend. Here the snippet on how to create\na heatmap representation - please note how nan values are also supported,\nresulting in empty cells."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-3d-surface-plot","title":"Plot types > Visualize a 3D surface plot","text":"Visualize a 3D surface plot\n\n3D surface plots are supported starting at Ansysy Dynamic Reporting 25R2.\nYou will therefore need to point to a 25R2 or newer Ansys Dynamic\nReporting installation for this plot type.\n\nA 3D surface plot allows you to visualize the data points in a terrain-like\nsurface in a 3D space powered by the WebGL engine. It is a variation of a\nheatmap as they share the same data structure. The difference is that the\nsurface plot visualizes the heatmap values as the Z axis data, allowing you\nto zoom in and out, and rotate to view the surface from different angles. Like\nheatmap, nan values are also supported, resulting in empty\nholes on the surface."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-parallel-coordinate-plot","title":"Plot types > Visualize a parallel coordinate plot","text":"Visualize a parallel coordinate plot\n\nParallel coordinate plots are especially useful when analyzing data coming\nfrom multiple runs. Place in each raw the values of variables for a given\nsimulation. Each column is a different variable. The parallel coordinate\nplot allows you to visualize all this data in a way that stresses\ncorrelations between variables and runs."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-histogram","title":"Plot types > Visualize a histogram","text":"Visualize a histogram\n\nNow, let us create a gaussian distribution via numpy and display\nit as an histogram. Let us set the histogram to be normalized, and\nplay with the bin size and gaps."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-sankey-diagram","title":"Plot types > Visualize a Sankey diagram","text":"Visualize a Sankey diagram\n\nA Sankey diagram allows you to visualize the relationship between\ndifferent elements. For this reprenstation, place the information\ninside a squared table."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-3d-scatter-plot","title":"Plot types > Visualize a 3D scatter plot","text":"Visualize a 3D scatter plot\n\n3D scatter plots are supported starting at Ansysy Dynamic Reporting 25R2.\nYou will therefore need to point to a 25R2 or newer Ansys Dynamic\nReporting installation for this plot type.\n\nA 3D scatter plot allows you to visualize the data points in 3D space\npowered by the WebGL engine. You can zoom in and out, and rotate to view the\ndata from different angles."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#visualize-a-polar-plot","title":"Plot types > Visualize a polar plot","text":"Visualize a polar plot\n\nPolar plots are supported starting at Ansysy Dynamic Reporting 25R2.\nYou will therefore need to point to a 25R2 or newer Ansys Dynamic\nReporting installation for this plot type.\n\nA polar plot is a plot type that visualizes the data point in a polar\ncoordinate system. One common variation of a polar plot is a radar chart. The\ndata position is determined by:\n\nRadius (r): The distance from the center of the polar plot, defined by\nthe yaxis property.\n\nTheta (θ): The direction of the point, measured in numeric degrees or\ncategorical data, defined by the xaxis property.\n\nScatter polar is the only available polar plot type for now.\n\nThe theta (θ) value is defined by the data type of the xaxis\nvalues:\n\nIf xaxis values have minus numeric value: The labels will be a list\nof symmetrical values from “(-180°) - (180°)”.\n\nIf xaxis values are all positive values: The labeles will be from\n“(0°) - (360°)”.\n\nIf xaxis values are categorical values: All xaxis values will be used\nto label."},{"objectID":"Home","href":"examples/00-basic/03-plottype.html#close-the-service","title":"Plot types > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 03-plottype.ipynb\n\nDownload Python source code: 03-plottype.py\n\nDownload zipped: 03-plottype.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/00-basic/04-set-plot-properties.html#how-to-set-plot-properties","title":"How to set plot properties","text":"How to set plot properties\n\nWhen working with a table, you can turn it into a plot by specifying\nthe plot type through the plot property. Once a table is converted\nyou can alter all sorts of plot properties by accessing properties on\nthe item object.\n\nThis example assumes that you have a local Ansys installation.\n\nInitially, you must create and start a session as per other examples."},{"objectID":"Home","href":"examples/00-basic/04-set-plot-properties.html#start-an-ansys-dynamic-reporting-service","title":"How to set plot properties > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service on a new\ndatabase. The path for the database directory must be to an empty directory."},{"objectID":"Home","href":"examples/00-basic/04-set-plot-properties.html#create-a-simple-table","title":"How to set plot properties > Create a simple table","text":"Create a simple table\n\nStart by creating a simple table and visualizing it. Create a table\nwith 5 columns and 2 rows.\n\nOnce you have created a table, set it to be a plot by changing\nits properties, and then you can set other properties.\n\nProperties can also be inspected this way.\n\n\n\nDownload Jupyter notebook: 04-set-plot-properties.ipynb\n\nDownload Python source code: 04-set-plot-properties.py\n\nDownload zipped: 04-set-plot-properties.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux9.html#line_marker_aux9","title":"line_marker_aux9","text":"line_marker_aux9\n\n\n\nItem.line_marker_aux9\n\nAuxiliary data 9\n\nScalar value or name of a row accessible to line_marker_text as vaux9. May be a list."},{"objectID":"Home","href":"examples/00-basic/index.html#examples","title":"Examples","text":"Examples\n\nIntroductory examples show how to use PyDynamicReporting to create or connect to\nan Ansys Dynamic Reporting service, create a database for a new service, and\ncreate and visualize items in a database.\n\nsphx_glr_examples_00-basic_00-launch-reporting-service.py\n\nsphx_glr_examples_00-basic_01-create_db.py\n\nsphx_glr_examples_00-basic_02-connect.py\n\nsphx_glr_examples_00-basic_03-plottype.py\n\nsphx_glr_examples_00-basic_04-set-plot-properties.py\n\nsphx_glr_examples_00-basic_05-explore-plot-properties.py\n\nsphx_glr_examples_00-basic_06-create-report-templates.py\n\n"},{"objectID":"Home","href":"serverless/configuration.html#configuration","title":"Configuration","text":"Configuration\n\nServerless ADR requires proper configuration to initialize its environment, connect to databases,\nmanage media and static files, and control runtime behavior. This guide explains the key configuration\nparameters, environment variables, and recommended setup practices."},{"objectID":"Home","href":"serverless/configuration.html#overview","title":"Configuration > Overview","text":"Overview\n\nConfiguration for Serverless ADR can be done through:\n\nConstructor parameters when instantiating the ADR class.\n\nEnvironment variables (legacy or advanced usage).\n\nOptional overrides during the setup() call."},{"objectID":"Home","href":"serverless/configuration.html#key-configuration-parameters","title":"Configuration > Key Configuration Parameters","text":"Key Configuration Parameters\n\nThe primary configuration options for the ADR class constructor are:\n\nansys_installation (str, optional):\nPath to the Ansys installation directory. Special value \"docker\" triggers Docker-based setup.\nDefaults to automatic detection if omitted.\n\nansys_version (int, optional):\nSpecify the Ansys version explicitly. If not provided, automatic detection attempts to determine it.\n\ndb_directory (str, optional):\nDirectory path for the SQLite database files. If omitted, must provide databases config or environment variable.\n\ndatabases (dict, optional):\nDictionary specifying multiple database configurations (e.g., for PostgreSQL or multi-DB setups).\nRequires a \"default\" database entry.\n\nmedia_directory (str, optional):\nDirectory path for media file storage (uploaded images, animations, etc.). Falls back to db_directory media subfolder if not set.\n\nstatic_directory (str, optional):\nDirectory path where static files (CSS, JS) will be collected.\n\nmedia_url (str, optional):\nRelative URL prefix for serving media files. Must start and end with a forward slash (e.g., \"/media/\").\n\nstatic_url (str, optional):\nRelative URL prefix for serving static files. Must start and end with a forward slash (e.g., \"/static/\").\n\ndebug (bool, optional):\nEnable or disable debug mode. Defaults to production mode if not set.\n\nopts (dict, optional):\nDictionary of environment variables to inject into the process environment.\n\nlogfile (str, optional):\nFile path to write logs. If omitted, logs to console.\n\ndocker_image (str, optional):\nDocker image URL to use when ansys_installation=\"docker\". Defaults to official Nexus image.\n\nin_memory (bool, optional):\nEnables in-memory database and media storage for ephemeral or test usage."},{"objectID":"Home","href":"serverless/configuration.html#environment-variables","title":"Configuration > Environment Variables","text":"Environment Variables\n\nUse of environment variables for Serverless ADR configuration is strongly discouraged.\nEnvironment variables represent a legacy configuration method and can lead to hidden,\nhard-to-debug issues, security risks (such as leaking secrets), and inconsistent behavior\nespecially in multi-instance or containerized deployments.\n\nIt is highly recommended to use explicit constructor parameters and configuration files\nfor all setup and runtime options instead."},{"objectID":"Home","href":"serverless/configuration.html#core-variables","title":"Configuration > Core Variables","text":"Core Variables\n\nCEI_NEXUS_TIMEZONE\nOlson format timezone string for the server (e.g., America/New_York).\nUsed in formatting timestamps in reports.\n\nCEI_NEXUS_LOCAL_DB_DIR\nFilesystem path to the directory containing the SQLite database file(s).\nAlternative to configuring db_directory in code.\n\nCEI_NEXUS_LOCAL_MEDIA_DIR\nPath to the media directory for uploaded files such as images and animations.\nAlternative to media_directory parameter.\n\nCEI_NEXUS_MEDIA_URL_PREFIX\nURL prefix used to access media files remotely. Must start and end with a slash, e.g., /media/.\nCorresponds to the media_url constructor parameter."},{"objectID":"Home","href":"serverless/configuration.html#database-connection-variables","title":"Configuration > Database Connection Variables","text":"Database Connection Variables\n\nCEI_NEXUS_DB_ENGINE\nDatabase engine. Defaults to SQLite.\n\nCEI_NEXUS_DB_DATABASE_NAME\nName of the database to connect to. Defaults to nexus_database.\n\nCEI_NEXUS_DB_USER\nDatabase username. Default is nexus.\n\nCEI_NEXUS_DB_PASSWORD\nPassword for the database user. Default is cei.\n\nCEI_NEXUS_DB_HOSTNAME\nDatabase server hostname or IP address. Defaults to the path to the SQLite database file.\n\nCEI_NEXUS_DB_PORT\nDatabase server port number. Default is not set for SQLite."},{"objectID":"Home","href":"serverless/configuration.html#security-variables","title":"Configuration > Security Variables","text":"Security Variables\n\nCEI_NEXUS_SECRET_KEY\nDjango secret key used internally. If not provided, a built-in default key is used (not recommended for production)."},{"objectID":"Home","href":"serverless/configuration.html#advanced--optional-variables","title":"Configuration > Advanced / Optional Variables","text":"Advanced / Optional Variables\n\nCEI_NEXUS_ENABLE_ACLS\nEnables per-category Access Control Lists (ACLs). Experimental and not recommended for general use."},{"objectID":"Home","href":"serverless/configuration.html#client-side-interactions","title":"Configuration > Client-Side Interactions","text":"Client-Side Interactions\n\nServerless ADR also allows modifying the configuration setup from the client-side interactions using JavaScript.\n\nDark mode modification: Users can change the value of <html></html> element’s attribute data-bs-theme to toggle between light/dark mode themes."},{"objectID":"Home","href":"serverless/configuration.html#usage-notes","title":"Configuration > Usage Notes","text":"Usage Notes\n\nConstructor parameters take precedence over environment variables. If both are set, constructor values will be used.\n\nAlways set secure secret keys in production environments to protect sensitive data. If you do not set a key, a default will be used.\n\nExample: Setting environment variables in Linux shell:\n\nExample: Passing variables via opts parameter:\n\nNote: Prefer constructor parameters for new projects. Environment variables remain supported primarily for legacy compatibility."},{"objectID":"Home","href":"serverless/configuration.html#best-practices","title":"Configuration > Best Practices","text":"Best Practices\n\nCall ``ADR.setup()`` once per process early in your application lifecycle.\nThis initializes environment, Django settings, and database migrations.\n\nFor multi-process setups (e.g., Gunicorn, multiprocessing), ensure each process calls ``setup()`` independently.\n\nWithin a process, all threads share the ADR configuration after setup; calling ``setup()`` multiple times per process is disallowed.\n\nConfigure ``media_url`` and ``static_url`` to match your web server routing to serve media and static content correctly.\n\nUse absolute paths for all directory configurations to avoid ambiguity.\n\nFor Docker-based Ansys installations, provide a valid Docker image and ensure Docker is installed and running."},{"objectID":"Home","href":"serverless/configuration.html#examples","title":"Configuration > Examples","text":"Examples\n\nBasic local SQLite setup with explicit directories:"},{"objectID":"Home","href":"serverless/configuration.html#troubleshooting","title":"Configuration > Troubleshooting","text":"Troubleshooting\n\nInvalidPath Error: Verify all configured directories exist and are accessible.\n\nImproperlyConfiguredError: Check database config dictionary and URL prefixes for correctness.\n\nDocker Errors: Ensure Docker daemon is running and image URLs are valid.\n\nStatic files not found: Confirm collect_static=True was set during setup and that your web server serves the static directory correctly.\n\nMedia files missing: Verify media upload paths and web server routing for the media URL."},{"objectID":"Home","href":"serverless/configuration.html#summary","title":"Configuration > Summary","text":"Summary\n\nProper configuration of Serverless ADR ensures seamless database connections, media management, and web serving of report assets.\nFollow best practices for setup and environment initialization to avoid common issues."},{"objectID":"Home","href":"serverless/embedding_reports.html#embedding-reports","title":"Embedding Reports","text":"Embedding Reports\n\nServerless ADR enables embedding fully rendered reports and report sections\ninto external web pages, dashboards, or applications. This allows you to\nintegrate dynamic ADR content seamlessly with other tools or UI frameworks."},{"objectID":"Home","href":"serverless/embedding_reports.html#overview","title":"Embedding Reports > Overview","text":"Overview\n\nEmbedding involves generating HTML output from templates and items, then\ninjecting or serving that content within another application or web page.\n\nYou can embed:\n\nEntire reports (top-level templates)\n\nSpecific report sections or sub-templates\n\nIndividual report items (e.g., tables, images, summaries)"},{"objectID":"Home","href":"serverless/embedding_reports.html#generating-embed-ready-html","title":"Embedding Reports > Generating Embed-Ready HTML","text":"Generating Embed-Ready HTML\n\nUse the render_report() method of the ADR instance to render a complete\nreport.\n\nThe resulting HTML string can then be inserted into your web page or\napplication container."},{"objectID":"Home","href":"serverless/embedding_reports.html#embedding-individual-items","title":"Embedding Reports > Embedding Individual Items","text":"Embedding Individual Items\n\nYou can also render individual report items using their render() method:"},{"objectID":"Home","href":"serverless/embedding_reports.html#embedding-partial-templates-or-sections","title":"Embedding Reports > Embedding Partial Templates or Sections","text":"Embedding Partial Templates or Sections\n\nTemplates can be rendered partially by applying specific item filters or by\nrendering child templates individually:"},{"objectID":"Home","href":"serverless/embedding_reports.html#integration-tips","title":"Embedding Reports > Integration Tips","text":"Integration Tips\n\nMake sure your embedded HTML includes references to static and media URLs\nconfigured during ADR setup so that assets like images and stylesheets\nload correctly and your web server is configured to serve them.\n\nUse the context parameter to pass additional context variables\nneeded for rendering.\n\nWhen embedding in frameworks with isolated DOM (e.g., React, Angular),\nbe mindful of script execution and CSS scope."},{"objectID":"Home","href":"serverless/embedding_reports.html#serving-embedded-content","title":"Embedding Reports > Serving Embedded Content","text":"Serving Embedded Content\n\nIf embedding in a web app, serve static and media files via a web server or\nframework static route pointing to ADR’s configured directories.\n\nExample with Flask:"},{"objectID":"Home","href":"serverless/embedding_reports.html#security-considerations","title":"Embedding Reports > Security Considerations","text":"Security Considerations\n\nValidate and sanitize any dynamic input used in filters or templates\nto avoid injection attacks.\n\nLimit exposure of data by controlling which templates or items\nare accessible for embedding."},{"objectID":"Home","href":"serverless/embedding_reports.html#summary","title":"Embedding Reports > Summary","text":"Summary\n\nEmbedding reports with Serverless ADR offers a flexible way to integrate rich,\ndynamic simulation reports into custom applications or portals without\nrunning a full ADR backend server."},{"objectID":"Home","href":"serverless/embedding_reports.html#next-steps","title":"Embedding Reports > Next Steps","text":"Next Steps\n\nSee the copying_objects guide for details on copying report content\nbetween databases or environments, which may be useful when preparing\nreports for embedding in different contexts."},{"objectID":"Home","href":"index.html#pydynamicreporting","title":"PyDynamicReporting","text":"PyDynamicReporting\n\n\n\n"},{"objectID":"Home","href":"index.html#introduction","title":"PyDynamicReporting > Introduction","text":"Introduction\n\nAnsys Dynamic Reporting, documented as Nexus, provides the report\ngenerator technologies that are used in several Ansys products. Ansys Dynamic\nReporting allows you to collect data in multiple formats from different sources.\nYou can then aggregate, analyze, and display this data in highly interactive reports.\n\nHere are some key features of Ansys Dynamic Reporting:\n\nHandles multiple data formats natively.\n\nStores data from multiple sources, including CAD packages, simulation software, and postprocessors.\n\nProvides tools for aggregating, filtering, and processing the data in the database.\n\nSupplies a web-based interface for quickly and intuitively interacting with database items.\n\nIncludes a template editor for generating report templates.\n\nDisplays live reports that automatically update when new data is available.\n\nGenerates reports with a high degree of interactivity."},{"objectID":"Home","href":"index.html#what-is-pydynamicreporting","title":"PyDynamicReporting > What is PyDynamicReporting?","text":"What is PyDynamicReporting?\n\nPyDynamicReporting is part of the PyAnsys ecosystem. It is\na Python client library that allows you to start and connect to an Ansys Dynamic Reporting\nservice and control the database and reports. It also provides you with quick access to web\ncomponents so that you can easily embed items or reports in other apps."},{"objectID":"Home","href":"index.html#serverless-adr","title":"PyDynamicReporting > Serverless ADR","text":"Serverless ADR\n\nServerless ADR is a standalone implementation of ADR integrated into pydynamicreporting\nthat does not require launching the ADR service.\nIt avoids all service overhead and can be used in Python applications directly for local or isolated use cases.\n\nIt supports:\n\nSingle-database mode (typically SQLite)\n\nMulti-database setups, including PostgreSQL\n\nDocker-based initialization\n\nMedia and static asset handling\n\nFull HTML report rendering without a server\n\nThis is useful for lightweight workflows or embedding reporting into your own apps.\n\nSee Serverless ADR documentation for full details."},{"objectID":"Home","href":"index.html#documentation-and-issues","title":"PyDynamicReporting > Documentation and issues","text":"Documentation and issues\n\nDocumentation for the latest stable release of PyDynamicReporting is hosted at\nPyDynamicReporting documentation.\n\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\n\nYou can also view or\ndownload the\nPyDynamicReporting cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyDynamicReporting.\n\nOn the PyDynamicReporting Issues\npage, you can create issues to report bugs and request new features. On the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\n\nTo reach the project support team, email pyansys.core@ansys.com."},{"objectID":"Home","href":"index.html#license","title":"PyDynamicReporting > License","text":"License\n\nPyDynamicReporting is licensed under the MIT license.\n\nPyDynamicReporting makes no commercial claim over Ansys whatsoever.\nThis library extends Ansys Dynamic Reporting by adding a Python\ninterface to Ansys Dynamic Reporting without changing the core behavior\nor license of the original software. The use of PyDynamicReporting\nrequires a legally licensed copy of an Ansys product that supports\nAnsys Dynamic Reporting."},{"objectID":"Home","href":"index.html#project-index","title":"PyDynamicReporting > Project index","text":"Project index\n\ngenindex"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.get_url.html#get_url","title":"get_url","text":"get_url\n\n\n\nReport.get_url(filter: str = '', item_filter: str = '') -> str\n\nGet the URL corresponding to the report.\n\nParameters\n\nfilter\n\npython:str, optional\n\nDEPRECATED. Use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nReturns\n\npython:str\n\nURL corresponding to the report. If no URL exists, an empty string is returned.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.labels_column.html#labels_column","title":"labels_column","text":"labels_column\n\n\n\nItem.labels_column\n\nColumn labels\n\ncolumn A column B"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.create_item.html#create_item","title":"create_item","text":"create_item\n\n\n\nService.create_item(obj_name: str | None = 'default', source: str | None = 'ADR') -> Item\n\nCreate an item that gets automatically pushed into the database.\n\nParameters\n\nobj_name\n\npython:str, optional\n\nName of the item. The default is \"default\".\n\nsource\n\npython:str, optional\n\nName of the source to generate the item from. The default is \"ADR\",\nwhich is Ansys Dynamic Reporting.\n\nReturns\n\nObject\n\nItem object.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.yaxis.html#yaxis","title":"yaxis","text":"yaxis\n\n\n\nItem.yaxis\n\nY axis rows\n\nThe row numbersnames to use as the Y axis values. Example: 0 Pressure"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_scene.html#item_scene","title":"item_scene","text":"item_scene\n\n\n\nItem.item_scene\n\n3D scene (AVZ, PLY, SCDOC, SCDOCX, GLB, and STL files)"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_table.html#item_table","title":"item_table","text":"item_table\n\n\n\nItem.item_table\n\nTable values (Must be in a numpy array)"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.nan_display.html#nan_display","title":"nan_display","text":"nan_display\n\n\n\nItem.nan_display\n\nNaN table display value\n\nThe string to be displayed for a NaN value. Default: NaN"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.delete.html#delete","title":"delete","text":"delete\n\n\n\nService.delete(items: list) -> None\n\nDelete objects from the database.\n\nParameters\n\nitems\n\npython:list\n\nList of objects to delete. The objects can be of one of these types:\n\"Item\", Report, \"Session\" or Dataset.\n\nDeleting a session or a dataset also deletes all items\nassociated with the session or dataset. Deleting a Report also\ndeletes all its children.\n\nExamples"},{"objectID":"Home","href":"examples/00-basic/05-explore-plot-properties.html#explore-plot-properties","title":"Explore plot properties","text":"Explore plot properties\n\nWhen working with a table, you can turn it into a\nplot by specifying the plot type through the plot property.\nThis example demonstrates a variety of the possible plot\nproperties available.\n\nThis example assumes that you have a local Ansys installation.\n\nInitially, create and start a session as per other examples."},{"objectID":"Home","href":"examples/00-basic/05-explore-plot-properties.html#start-an-ansys-dynamic-reporting-service","title":"Explore plot properties > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service on a new\ndatabase. The path for the database directory must be to an empty directory."},{"objectID":"Home","href":"examples/00-basic/05-explore-plot-properties.html#create-a-simple-table","title":"Explore plot properties > Create a simple table","text":"Create a simple table\n\nStart by creating a simple table and visualizing it. Create a table\nwith 5 columns and 2 rows.\n\nOnce you have created a table, set it to be a plot by changing\nits properties, and then you can set other properties."},{"objectID":"Home","href":"examples/00-basic/05-explore-plot-properties.html#some-rules-on-properties","title":"Explore plot properties > Some rules on properties","text":"Some rules on properties\n\nIf a property is not relevant to a plot and it is changed, nothing will happen\n\nPlots are not dynamically updated. Subsequent visualize calls are needed\n\nPlots can have visualize() called repeatedly without exhausting the object"},{"objectID":"Home","href":"examples/00-basic/05-explore-plot-properties.html#key-properties","title":"Explore plot properties > Key properties","text":"Key properties\n\nA few key properties are listed below as well as what they do, to get you started.\n\nxtitle, ytitle, ztitle, palette_title - set the axis, and colorbar, labels\n\nxrange, yrange, `zrange, palette_range - set the axes amd colorbar limits\n\nplot_title - set the plot title\n\nline_marker - set the marker of scatter data, defaults to circle.\n\nline_error_bars - set y-axis error bars. Other axes are not available.\n\nwidth, height - dimensions of chart in pixels\n\n\n\nDownload Jupyter notebook: 05-explore-plot-properties.ipynb\n\nDownload Python source code: 05-explore-plot-properties.py\n\nDownload zipped: 05-explore-plot-properties.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.palette_title.html#palette_title","title":"palette_title","text":"palette_title\n\n\n\nItem.palette_title\n\nColorbar title string\n\nString draw to the right of the colorbar as a title. Default: none"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.histogram_threshold.html#histogram_threshold","title":"histogram_threshold","text":"histogram_threshold\n\n\n\nItem.histogram_threshold\n\nHistogram rendering threshold\n\nThe threshold for data table columns to render as histogram. Default: 50"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.yaxis_tick_delta.html#yaxis_tick_delta","title":"yaxis_tick_delta","text":"yaxis_tick_delta\n\n\n\nItem.yaxis_tick_delta\n\nY axis tick delta\n\nThe delta between yangular axis ticks"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux3.html#line_marker_aux3","title":"line_marker_aux3","text":"line_marker_aux3\n\n\n\nItem.line_marker_aux3\n\nAuxiliary data 3\n\nScalar value or name of a row accessible to line_marker_text as vaux3. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_pagemenu.html#table_pagemenu","title":"table_pagemenu","text":"table_pagemenu\n\n\n\nItem.table_pagemenu\n\nTable paging menu\n\nOptions for the number of rows per page menu.  Default: 10  25  50  100  1"},{"objectID":"Home","href":"lowlevelapi/index.html#low-level-python-api","title":"Low-level Python API","text":"Low-level Python API\n\n\n\n\n\n\n\nThe low level Python API for Ansys Dynamic Reporting\nallows the user to have full control of all the features\nof ADR and the Nexus server. It is a very powerful API, but\nat the same time it can be quite complex and requires the end user\nto fully understand how ADR works in all its components. For a\nfull description of ADR as a package, see Nexus"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 13 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_00-basic_00-launch-reporting-service.py (examples_source/00-basic/00-launch-reporting-service.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_01-create_db.py (examples_source/00-basic/01-create_db.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_02-connect.py (examples_source/00-basic/02-connect.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_03-plottype.py (examples_source/00-basic/03-plottype.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_04-set-plot-properties.py (examples_source/00-basic/04-set-plot-properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_05-explore-plot-properties.py (examples_source/00-basic/05-explore-plot-properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_06-create-report-templates.py (examples_source/00-basic/06-create-report-templates.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_25-intermediate_00-tagging.py (examples_source/25-intermediate/00-tagging.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_25-intermediate_01-queries.py (examples_source/25-intermediate/01-queries.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_25-intermediate_02-json.py (examples_source/25-intermediate/02-json.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_50-advanced_00-complete_report.py (examples_source/50-advanced/00-complete_report.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py (examples_source/50-advanced/01-two_simulation_same_db.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_50-advanced_02-customized_report_embed.py (examples_source/50-advanced/02-customized_report_embed.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_error_bars.html#line_error_bars","title":"line_error_bars","text":"line_error_bars\n\n\n\nItem.line_error_bars\n\nError bars\n\nScalar value or name of a row with size of error bars in Y axis units. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.xaxis_tick_delta.html#xaxis_tick_delta","title":"xaxis_tick_delta","text":"xaxis_tick_delta\n\n\n\nItem.xaxis_tick_delta\n\nX axis tick delta\n\nThe delta between xradial axis ticks"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.xrange.html#xrange","title":"xrange","text":"xrange\n\n\n\nItem.xrange\n\nX axis range\n\nThe range for the x axis. Example: 0.  10."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.format.html#format","title":"format","text":"format\n\n\n\nItem.format\n\nNumber format\n\nscientific sigfigsX floatdotX str date_XY"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.show_border.html#show_border","title":"show_border","text":"show_border\n\n\n\nItem.show_border\n\nShow plot border\n\nSet to 1 to show the plot border. Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.palette_range.html#palette_range","title":"palette_range","text":"palette_range\n\n\n\nItem.palette_range\n\nRange of the colorbar\n\nMinimum and maximum line_color values  mapped to palette extremes. Example: 0 100"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.zaxis.html#zaxis","title":"zaxis","text":"zaxis\n\n\n\nItem.zaxis\n\nZ axis rows\n\nThe row numbersnames to use as the Z axis values. Example: 3 Pressure"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_text.html#item_text","title":"item_text","text":"item_text\n\n\n\nItem.item_text\n\nText (HTML and LaTeX formatting)"},{"objectID":"Home","href":"examples/25-intermediate/index.html#intermediate-examples","title":"Intermediate examples","text":"Intermediate examples\n\nIntermediate examples show how to use PyDynamicReporting\nto query an Ansys Dynamic Reporting database, modify its items,\nand get their corresponding web components.\n\nsphx_glr_examples_25-intermediate_00-tagging.py\n\nsphx_glr_examples_25-intermediate_01-queries.py\n\nsphx_glr_examples_25-intermediate_02-json.py\n\n"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_scale.html#line_marker_scale","title":"line_marker_scale","text":"line_marker_scale\n\n\n\nItem.line_marker_scale\n\nMarker scaling\n\nApply a linear transform to marker sizes M B = Minput_sizeB. Example: 1. 0."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.ytitle.html#ytitle","title":"ytitle","text":"ytitle\n\n\n\nItem.ytitle\n\nY axis title\n\nA title for the y axis"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.show_legend_border.html#show_legend_border","title":"show_legend_border","text":"show_legend_border\n\n\n\nItem.show_legend_border\n\nShow legend border\n\nSet to 1 to display a border around the legend. Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.add_tag.html#add_tag","title":"add_tag","text":"add_tag\n\n\n\nItem.add_tag(tag: str = '', value: str = '') -> bool\n\nAdd a tag to the item.\n\nParameters\n\ntag\n\npython:str, optional\n\nTag name. The default is \"\".\n\nvalue str\n\npython:str, optional\n\nTag value.  The default is \"\".\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.histogram_normalized.html#histogram_normalized","title":"histogram_normalized","text":"histogram_normalized\n\n\n\nItem.histogram_normalized\n\nNormalize histogram\n\nSet to 1 to normalize the histograms. Default: 0"},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#multiple-simulations-in-same-database","title":"Multiple simulations in same database","text":"Multiple simulations in same database\n\nUse a single database and report template for multiple simluation results.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#start-an-ansys-dynamic-reporting-service","title":"Multiple simulations in same database > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#set-methods-for-items-and-report-template-creation","title":"Multiple simulations in same database > Set methods for items and report template creation","text":"Set methods for items and report template creation\n\nDefine two methods: one to create items associated with a design point\nsimulation, and a method to create the report template for a simulation\nreport. The first method to create items is mocking what a real\nsimulation would produce: a set of items pushed directly into the\ndatabase. Please note that each item is tagged with the corresponding\ndesign point."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#create-items-and-report-template","title":"Multiple simulations in same database > Create items and report template","text":"Create items and report template\n\nAssume we have ran the design point dp0. Create the items. Check if the\ndatabase already contains the report template with the method\nget_list_reports.\nIf it doesn’t exist, then create it as well."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#create-items-from-second-simulation","title":"Multiple simulations in same database > Create items from second simulation","text":"Create items from second simulation\n\nNow assume we separately ran the design point dp1. Connect to the\ncurrently running ADR service and push the new items in the same database.\nCheck if the report template already exists and create it only if it does not."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#visualize-the-report","title":"Multiple simulations in same database > Visualize the report","text":"Visualize the report\n\nNow the database contains data from both design point simulations. If you\nwere to simply visualize the report, both simulation results would appear.\nTo avoid that, use a filter to downselect the items to visualize each time.\nSetting the filter to look only at items with tag dp=dp0 will show the\nreport for the first design point. Similarly, filter for tag dp=dp1 will\ndisplay the report for the second design point."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#visualize-the-report-for-dp1","title":"Multiple simulations in same database > Visualize the report for dp1","text":"Visualize the report for dp1\n\nVisualize the report for the second design point. See how you only need to\nchange the filter."},{"objectID":"Home","href":"examples/50-advanced/01-two_simulation_same_db.html#close-the-service","title":"Multiple simulations in same database > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 01-two_simulation_same_db.ipynb\n\nDownload Python source code: 01-two_simulation_same_db.py\n\nDownload zipped: 01-two_simulation_same_db.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.width.html#width","title":"width","text":"width\n\n\n\nItem.width\n\nChart width\n\nChart width in pixels"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_image.html#item_image","title":"item_image","text":"item_image\n\n\n\nItem.item_image\n\nImage object (Image and PNG binary files)"},{"objectID":"Home","href":"serverless/index.html#serverless-adr","title":"Serverless ADR","text":"Serverless ADR\n\nServerless ADR is a lightweight, local Python API for building reports using\nAnsys Dynamic Reporting (ADR), without requiring a running ADR service or\nnetwork connection.\n\nIt operates entirely within your Python process, directly writing to and\nreading from a local ADR-compatible database (e.g., SQLite or PostgreSQL).\nThis allows you to generate and render full ADR reports, create items and\ntemplates, and manage media and static assets — all without launching the ADR\nbackend server.\n\nIt is built on the same core schema as the traditional service-based ADR, but\nworks entirely within your local Python environment.\n\nThis system is designed for cases where developers or simulation engineers\nwant to:\n\nCreate, manage, and render reports locally using Python\n\nAvoid setting up a centralized ADR service or HTTP connection\n\nMaintain full fidelity with the ADR schema (items, templates, etc.)\n\nOutput HTML content and media assets for web and desktop apps.\n\nServerless ADR is ideal for:\n\nLocal, file-based workflows (e.g., building offline reports)\n\nEmbedding reports in web or desktop applications\n\nUse in batch scripts, Python notebooks, or simulations"},{"objectID":"Home","href":"serverless/index.html#key-features","title":"Serverless ADR > Key features","text":"Key features\n\nDrop-in compatibility with Ansys installations and the Service API:\nUses the same Python environment and static/media assets from your installed\nADR system.\n\nFlexible instantiation:\nSupports SQLite and PostgreSQL databases, Docker-based environments, in-memory and\nlegacy environment-variable configurations.\n\nIn-memory execution:\nRuns entirely in your local Python process, with no separate backend or\ndaemon needed.\n\nFirst-class objects:\nSessions, Datasets, Items and Templates are actual Python classes, not remote proxies — giving\nyou full introspection, subclassing, and lifecycle control.\n\nComprehensive rendering:\nGenerates full HTML reports — just like the service-based API — with full\nsupport for media, static assets, and custom layouts."},{"objectID":"Home","href":"serverless/index.html#explore-the-docs","title":"Serverless ADR > Explore the docs","text":"Explore the docs\n\n"},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#embed-report-and-overwrite-styles","title":"Embed report and overwrite styles","text":"Embed report and overwrite styles\n\nApplying the new custom web component <adr-report></adr-report> as an alternative of\nusing <iframe></iframe> to fetch and embed a report in the external web application.\n\nThis example assumes that you have a local Ansys installation with a version v251 or\nbeyond. For this feature, as of 25R1, Panel and Tabs are the only layout\ntemplates available for style overwrite, more templates will be included in the\nfuture release."},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#start-an-ansys-dynamic-reporting-service","title":"Embed report and overwrite styles > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service using an existing database that has\nat least 1 report template being defined.\n\nThe code here to start an ADR service and the following Python code to initiate\na Flask server should all be put together in the app.py file. The\nfile structure of this example is demonstrated at the end of the tutorial."},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#set-up-proxy-server","title":"Embed report and overwrite styles > Set up proxy server","text":"Set up proxy server\n\nApplying the custom web component to tunnel the report over to the external web\napp requires additional server settings to bypass potential cross-origin\nresource sharing (CORS) error. See below diagram illustrating the CORS error\nprocess:\n\nTo resolve the CORS error, instead of sending requests from the client side,\nusing the server that powers the external web app to proxy the requests.\nAdding 3 types of REST calls reroute settings to set up the proxy server:\n\nReroute GET Request to the main ADR report page (for HTML content)\n\nReroute GET Request to access the ADR report’s static files\n\nReroute GET Request to access the ADR report’s media files\n\nThe below diagram illustrates the proxy server concept to bypass CORS error:\n\nThis example is using Flask as the backend framework, but the same concept\nis applicable to other backend structures such as Node.js.\n\nUsing Flask as the backend framework to set up proxy will serve the static\nassets like CSS, JS files in its “static” directory, the GET request to ADR’s\nstatic assets may cause request conflicts (same for requesting “media” files).\n\nTherefore, the below code example includes rewriting request for “static” files\nand “media” files to avoid such conflicts, please refer to the highlighted\ncode block."},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#html-structure-and-report-style-overwrite","title":"Embed report and overwrite styles > HTML structure and report style overwrite","text":"HTML structure and report style overwrite\n\nThe following code snippet is a basic HTML structure in the index.html\nfile to serve the web component, its script, and the style sheet for style\noverwrite (if any). For reference, here is the file structure of this example:\n\nThe CSS stylesheet to overwrite report styles should be added as a <link> tag\ninside the <head></head> section of the HTML file. The href attribute\nof the <link> tag displays the CSS file path, which should then be passed as\nthe value of the style_path argument in the\nget_report_component(style_path=\"...\")\nin order to overwrite the styles."},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#initiate-web-component-to-embed-the-report","title":"Embed report and overwrite styles > Initiate web component to embed the report","text":"Initiate web component to embed the report\n\nAt this point, all the essential server settings have been included, now it’s time\nto add the custom web component and its script in the external web app by PyADR\nmethod get_report_component\nand get_report_script.\nAs mentioned above, if a CSS file has been included for style overwrite, the file path\nshould be passed in the style_path argument of the get_report_component method.\n\nThe below screenshot demonstrates the simple style overwrite result for report’s\npanel layouts."},{"objectID":"Home","href":"examples/50-advanced/02-customized_report_embed.html#close-the-service","title":"Embed report and overwrite styles > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk. To stop the Flask server in this example,\na Keyboardinterrupt like (Ctrl + C) will shut down the server.\n\n\n\nDownload Jupyter notebook: 02-customized_report_embed.ipynb\n\nDownload Python source code: 02-customized_report_embed.py\n\nDownload zipped: 02-customized_report_embed.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"API reference","href":"class_documentation.html#api-reference","title":"API reference","text":"API reference\n\nAnsys Dynamic Reporting contains a low-level API that allows you to access\nall the available features and properties in full detail. While this low-level\nAPI is very powerful, it can also be quite complex to use and it requires a\nsteep learning curve. For a comprehensive description of this API, see\nthe section Low Level Python API.\n\nThe goal of PyDynamicReporting is to provide an easier, more Pythonic way to\nstart or connect to an Ansys Dynamic Reporting service so that you do not need\nto understand the intricacies of Ansys Dynamic Reporting to manipulate its\ndatabase and reports. For this reason, the PyDynamicReporting API provides only a subset\nof features, which are wrapped in such a way as to make the workflow easier.\n\nIf you are interested in extended control of all options and features of\nAnsys Dynamic Reporting, you can use its low-level API in conjunction\nwith the PyDnamicReporting API.\n\nTo use PyDynamicReporting to start or connect to an Ansys Dynamic Reporting service,\nyou create an instance of the Service class. You then use this instance to\nquery the database, to add and delete items, and to visualize reports.\n\nItems inside the Ansys Dynamic Reporting service are represented as instances\nof the Item class. You use methods in both the Item class and Service\nclass to create, query, and modify items.\n\nLastly, you create and use Report instances to access reports in Ansys\nDynamic Reporting.\n\n\n\n"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.get_list_reports.html#get_list_reports","title":"get_list_reports","text":"get_list_reports\n\n\n\nService.get_list_reports(r_type: str | None = 'name') -> list\n\nGet a list of top-level reports in the database.\n\nThis method can get either a list of the names of the top-level reports\nor a list of Report items corresponding to these reports.\n\nParameters\n\nr_type\n\npython:str, optional\n\nType of object to return. The default is \"name\", which returns\na list of the names of the reports. If you set the value\nfor this parameter to \"report\", this method returns a list of\nthe Report items corresponding to these reports.\n\nReturns\n\npython:list\n\nList of the top-level reports in the database. The list can be of the names\nof these reports or the Report items corresponding to these reports.\n\nRaises\n\nConnectionToServiceError\n\nThere is no ADR service associated with the current object.\n\nExamples"},{"objectID":"Home","href":"serverless/examples.html#examples","title":"Examples","text":"Examples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.column_minimum.html#column_minimum","title":"column_minimum","text":"column_minimum\n\n\n\nItem.column_minimum\n\nColumn range minimums\n\nScalar value or array of values used as column category minimums."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_size.html#line_marker_size","title":"line_marker_size","text":"line_marker_size\n\n\n\nItem.line_marker_size\n\nMarker size\n\nThe marker size in points"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_bordered.html#table_bordered","title":"table_bordered","text":"table_bordered\n\n\n\nItem.table_bordered\n\nTable bordering\n\nControl visibility of table borders.  Default: 1"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.palette_show.html#palette_show","title":"palette_show","text":"palette_show\n\n\n\nItem.palette_show\n\nColorbar display\n\nShowhide the colorbar with the values 10. Example: 1"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.visualize.html#visualize","title":"visualize","text":"visualize\n\n\n\nReport.visualize(new_tab: bool = False, filter: str = '', item_filter: str = '') -> None\n\nRender the report.\n\nParameters\n\nnew_tab\n\nbool, optional\n\nWhether to render the report in a new tab if the current environment\nis a Jupyter notebook. The default is False, in which case the\nreport is rendered in the current location. If the environment is\nnot a Jupyter notebook, the report is always rendered in a new tab.\n\nfilter\n\npython:str, optional\n\nDEPRECATED. Use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nReturns\n\nReport\n\nRendered report.\n\nExamples\n\nRender a report in a new tab."},{"objectID":"Home","href":"serverless/media_and_static.html#media-and-static-files","title":"Media and Static Files","text":"Media and Static Files\n\nServerless ADR manages two key asset categories essential for rich report presentation:\n\nMedia files: User-uploaded or generated files such as images, animations, 3D models, and other content associated with Items.\n\nStatic files: Framework assets including CSS, JavaScript, fonts, and icons required to render reports and web interfaces correctly.\n\nThis guide covers the storage, access, lifecycle, and best practices for managing these files in Serverless ADR."},{"objectID":"Home","href":"serverless/media_and_static.html#overview","title":"Media and Static Files > Overview","text":"Overview"},{"objectID":"Home","href":"serverless/media_and_static.html#media-files","title":"Media and Static Files > Media Files","text":"Media Files\n\nMedia files complement your report Items and can include:\n\nImages (PNG, JPG, TIFF)\n\nAnimation videos (MP4)\n\n3D models and scenes (STL, OBJ, AVZ)\n\nGeneric user files\n\nThey are stored separately on disk in a media directory configured during ADR setup. Items reference media files by unique GUID-based filenames to avoid collisions and enable retrieval."},{"objectID":"Home","href":"serverless/media_and_static.html#static-files","title":"Media and Static Files > Static Files","text":"Static Files\n\nStatic files provide the frontend styling and interactivity needed for report visualization. They include:\n\nCSS files for layout and themes\n\nJavaScript libraries (e.g., Plotly support)\n\nFonts and icons\n\nStatic files reside in a static directory and are served alongside media files, typically by a web server or via the framework’s static file handling."},{"objectID":"Home","href":"serverless/media_and_static.html#configuration","title":"Media and Static Files > Configuration","text":"Configuration\n\nYou configure media and static paths and URLs when instantiating and setting up the ADR object:\n\nmedia_directory: Path on disk for media files storage.\n\nstatic_directory: Path on disk for static assets.\n\nmedia_url: URL prefix to access media files (default: /media/).\n\nstatic_url: URL prefix to access static files (default: /static/).\n\nExample configuration:"},{"objectID":"Home","href":"serverless/media_and_static.html#file-storage-and-access","title":"Media and Static Files > File Storage and Access","text":"File Storage and Access\n\nMedia files are saved with unique names based on the Item GUID and type, e.g., <guid>_image.png.\n\nThe media directory should be accessible by any server or process serving reports or web content.\n\nStatic files are collected during setup if collect_static=True is passed to ADR.setup().\n\nStatic files can be served by any compatible web server (eg. NGINX) or via built-in mechanisms in web frameworks.\n\nItems without files do not consume media storage."},{"objectID":"Home","href":"serverless/media_and_static.html#managing-media-files-in-items","title":"Media and Static Files > Managing Media Files in Items","text":"Managing Media Files in Items\n\nSeveral Item subclasses support file payloads using the FilePayloadMixin:\n\nImage\n\nAnimation\n\nScene\n\nFile\n\nThese classes provide convenient properties and methods:\n\nfile_path: Returns the absolute file path on disk for the Item’s media.\n\nhas_file: Boolean indicating if the media file exists.\n\nfile_ext: File extension of the media file.\n\nsave(): Saves both the database record and copies the media file to the media directory.\n\ndelete(): Deletes the database record and removes the associated media file.\n\nExample: Creating and saving an Image Item with a file"},{"objectID":"Home","href":"serverless/media_and_static.html#working-with-media-files-directly","title":"Media and Static Files > Working with Media Files Directly","text":"Working with Media Files Directly\n\nYou can access media file paths from Items:\n\nCheck if the item has a file associated with it:\n\nDeleting Items cleans up media files automatically:"},{"objectID":"Home","href":"serverless/media_and_static.html#static-files-collection-and-serving","title":"Media and Static Files > Static Files Collection and Serving","text":"Static Files Collection and Serving\n\nStatic files are typically collected from ADR’s installed packages during setup by calling:\n\nadr.setup(collect_static=True)\n\nThis process copies necessary CSS, JS, fonts, and icons into the configured static directory.\n\nStatic files must be served by your web server or framework to enable proper report rendering.\n\nThe static URL prefix (e.g., /static/) must correspond to your web server configuration."},{"objectID":"Home","href":"serverless/media_and_static.html#in-memory-mode-and-temporary-files","title":"Media and Static Files > In-Memory Mode and Temporary Files","text":"In-Memory Mode and Temporary Files\n\nWhen using ADR in in-memory mode (in_memory=True), media and static files are stored in temporary directories.\n\nThese directories are automatically cleaned up when ADR closes, so files do not persist beyond the session.\n\nThis mode is useful for testing or transient report generation."},{"objectID":"Home","href":"serverless/media_and_static.html#best-practices","title":"Media and Static Files > Best Practices","text":"Best Practices\n\nAlways explicitly configure media and static directories during ADR instantiation to avoid ambiguity.\n\nEnsure the media directory has sufficient disk space and correct read/write permissions.\n\nWhen serving reports on a web server, map the media_url and static_url to the correct directories.\n\nUse meaningful and consistent tags on Items to organize media assets logically.\n\nAvoid manually deleting or moving media files outside ADR to prevent broken links."},{"objectID":"Home","href":"serverless/media_and_static.html#troubleshooting","title":"Media and Static Files > Troubleshooting","text":"Troubleshooting\n\nMedia files missing: Confirm media directory path is correct and files exist on disk.\n\nPermission denied errors: Verify file system permissions allow read/write by the ADR process and web server.\n\nStatic assets not loading: Ensure static files were collected during setup and your web server serves the static directory correctly.\n\nFile corruption: Re-upload or regenerate files; validate file types before saving."},{"objectID":"Home","href":"serverless/media_and_static.html#summary","title":"Media and Static Files > Summary","text":"Summary\n\nEffective media and static file management is critical for generating rich, interactive reports with Serverless ADR.\nProper setup, naming conventions, and lifecycle handling ensure seamless integration of visual and data assets in your reports."},{"objectID":"Home","href":"serverless/media_and_static.html#next-steps","title":"Media and Static Files > Next Steps","text":"Next Steps\n\nExplore the embedding_reports guide to learn how to embed Serverless ADR reports\nwithin your own web applications or documentation portals."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.load_templates.html#load_templates","title":"load_templates","text":"load_templates\n\n\n\nService.load_templates(json_file_path: str) -> None\n\nLoad templates given a JSON-formatted file.\nThere will be some interactive inputs if required.\n\nParameters\n\njson_file_path\n\npython:str\n\nPath of the JSON file to be loaded.\n\nReturns\n\nNone.\n\n\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot_xaxis_type.html#plot_xaxis_type","title":"plot_xaxis_type","text":"plot_xaxis_type\n\n\n\nItem.plot_xaxis_type\n\nX axis style\n\nlinear log"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.zrange.html#zrange","title":"zrange","text":"zrange\n\n\n\nItem.zrange\n\nZ axis range\n\nThe range for the z axis. Example: 0.  10."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux4.html#line_marker_aux4","title":"line_marker_aux4","text":"line_marker_aux4\n\n\n\nItem.line_marker_aux4\n\nAuxiliary data 4\n\nScalar value or name of a row accessible to line_marker_text as vaux4. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_default_col_labels.html#table_default_col_labels","title":"table_default_col_labels","text":"table_default_col_labels\n\n\n\nItem.table_default_col_labels\n\nDefault column labels\n\nEnabledisable default column labels.  Default: 1"},{"objectID":"Home","href":"examples/25-intermediate/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 3 files from examples/25-intermediate:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_25-intermediate_00-tagging.py (00-tagging.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_25-intermediate_01-queries.py (01-queries.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_25-intermediate_02-json.py (02-json.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux7.html#line_marker_aux7","title":"line_marker_aux7","text":"line_marker_aux7\n\n\n\nItem.line_marker_aux7\n\nAuxiliary data 7\n\nScalar value or name of a row accessible to line_marker_text as vaux7. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.zaxis_tick_delta.html#zaxis_tick_delta","title":"zaxis_tick_delta","text":"zaxis_tick_delta\n\n\n\nItem.zaxis_tick_delta\n\nZ axis tick delta\n\nThe delta between z axis ticks"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot_margins.html#plot_margins","title":"plot_margins","text":"plot_margins\n\n\n\nItem.plot_margins\n\nPlot margins\n\nAdjust plot margin sizes in pixels: left top right bottom Example: default  default  5 \ndefault"},{"objectID":"Home","href":"serverless/copying_objects.html#copying-objects","title":"Copying Objects","text":"Copying Objects\n\nServerless ADR supports copying collections of report objects—including Items, Templates, Sessions, and Datasets—from one database to another. This functionality facilitates data migration, backup, synchronization, or environment replication.\n\nCopying ensures that GUIDs (unique identifiers) are preserved and that related Sessions and Datasets referenced by Items are copied as well to maintain data integrity."},{"objectID":"Home","href":"serverless/copying_objects.html#prerequisites","title":"Copying Objects > Prerequisites","text":"Prerequisites\n\nMultiple database configurations must be set up in the ADR instance.\n\nThe source and target databases must be properly configured and accessible.\n\nFor objects referencing media files (e.g., images, animations), a valid media directory must be specified for the target database.\n\nOnly top-level Templates (those without parents) can be copied; their children are copied recursively."},{"objectID":"Home","href":"serverless/copying_objects.html#api-usage","title":"Copying Objects > API Usage","text":"API Usage\n\nUse the copy_objects() method on an ADR instance:"},{"objectID":"Home","href":"serverless/copying_objects.html#parameters","title":"Copying Objects > Parameters","text":"Parameters\n\nobject_type (type): The class of objects to copy. Must be a subclass of Item, Template, Session, or Dataset.\n\ntarget_database (str): The configured target database key.\n\nquery (str, optional): ADR query string to select which objects to copy. Defaults to copying all.\n\ntarget_media_dir (str or Path, optional): Directory to copy media files to when copying Items.\n\ntest (bool, optional): If True, no copying occurs; only the count of matching objects is returned."},{"objectID":"Home","href":"serverless/copying_objects.html#copying-logic-details","title":"Copying Objects > Copying Logic Details","text":"Copying Logic Details\n\nValidation\n\nChecks that object_type is valid.\n\nValidates that both source (“default”) and target databases exist in ADR’s configuration.\n\nQuerying Objects\n\nUses the ADR query interface to fetch objects matching the query string.\n\nHandling Items\n\nChecks if any Items reference media files.\n\nDetermines the target media directory:\n- Uses provided target_media_dir if specified.\n- If using SQLite for the target DB, attempts to resolve the media directory adjacent to the DB.\n- Throws an exception if no suitable media directory can be determined.\n\nFor each Item, attempts to fetch or create the corresponding Session and Dataset in the target DB.\n\nUpdates Items to reference the copied Sessions and Datasets.\n\nHandling Templates\n\nOnly copies top-level Templates.\n\nRecursively copies child Templates preserving hierarchy and order.\n\nHandling Sessions and Datasets\n\nCopies queried Sessions or Datasets as-is.\n\nTest Mode\n\nIf test=True, logs and returns the number of objects that would be copied, without performing any write operations.\n\nPerforming Copy\n\nSaves all copied objects to the target database.\n\nCopies media files referenced by Items to the target media directory.\n\nRebuilds 3D geometry files if applicable.\n\nExample: Copy Sessions\n\nExample: Copy Items with Media\n\nExample: Copy Top-Level Template and Its Children"},{"objectID":"Home","href":"serverless/copying_objects.html#error-handling","title":"Copying Objects > Error Handling","text":"Error Handling\n\nRaises TypeError if object_type is not a valid ADR model subclass.\n\nRaises ADRException if databases are misconfigured.\n\nRaises ADRException if attempting to copy non top-level Templates.\n\nRaises ADRException if target_media_dir is missing when required.\n\nExceptions from saving or media copying are caught and re-raised as ADRException."},{"objectID":"Home","href":"serverless/copying_objects.html#implementation-notes","title":"Copying Objects > Implementation Notes","text":"Implementation Notes\n\nThe copying uses a deep copy of Template objects to preserve the hierarchy.\n\nFor Items, Session and Dataset references are fetched or created in the target database to maintain links.\n\nMedia files are copied using standard filesystem operations; ensure appropriate permissions.\n\nThe method supports extensions for future support of source database selection (currently hardcoded to “default”)."},{"objectID":"Home","href":"serverless/copying_objects.html#best-practices","title":"Copying Objects > Best Practices","text":"Best Practices\n\nEnsure the target database is properly configured and accessible before copying.\n\nCopy related sessions and datasets automatically by copying items.\n\nAlways use test=True initially to preview the number of objects to be copied.\n\nEnsure media directories have sufficient space and permissions.\n\nUse descriptive ADR query strings to limit copy scope.\n\nAvoid copying Templates with parents; copy only top-level templates to prevent hierarchy issues.\n\nCall adr.setup() before copying to ensure proper configuration."},{"objectID":"Home","href":"serverless/copying_objects.html#summary","title":"Copying Objects > Summary","text":"Summary\n\nThe copy_objects() method provides robust, automated transfer of ADR report content and metadata between databases, preserving references and media assets to support backup, migration, and distributed workflows."},{"objectID":"Home","href":"serverless/copying_objects.html#next-steps","title":"Copying Objects > Next Steps","text":"Next Steps\n\nLearn how to manage unwanted data after copying with deleting_objects."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#startup","title":"Startup","text":"Startup\n\nThe following code snippet illustrates how to import the necessary API\nmodules (technically, import requests is not necessary, but some of\nthe API calls are simpler with that module available):"},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#simple-example","title":"Startup > Simple Example","text":"Simple Example\n\nThis snippet creates a new database, starts an ADR Nexus server, verifies the\nserver and shuts it down. It uses the port=None option to allow the\nsystem to find and use a non-conflicting port to run the server on. If\nneeded, the port is returned as part of the URL returned by:\nserverobj.get_URL()."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#corereport_remote_server-module","title":"Startup > core.report_remote_server module","text":"core.report_remote_server module\n\nThis module includes the interfaces needed to manage ADR Nexus servers."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#module-functions","title":"Startup > Module functions","text":"Module functions\n\nMany of these functions support Qt integration. The parent option\nspecifies the Qt widget that should be the parent if they are to display\nany GUI elements. If parent is specified as None, no GUI elements will\nbe presented to the user and the operation will just return an error\nstatus."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#report_remote_serverlaunch_local_database_server","title":"Startup > report_remote_server.launch_local_database_server","text":"report_remote_server.launch_local_database_server\n\nThis function will try to launch a local ADR Nexus server using the database\nfound in the specified directory on the specified port. If parent is not\nset None, the function will interact with the user via Qt modal dialogs\n(parent will be the parent of the dialogs) to select database directory,\nports, username and password. One can bypass the prompt to select the\nserver directory using the no_directory_prompt keyword argument.\n\nBy default, a launched server will continue to run after the current\nPython session stops. There is a server method stop_local_server() that\ncan be used to stop the launched server. Otherwise, the\nterminate_on_python_exit keyword can be set to True to cause the server\nto be automatically shut down if the current Python interpreter instance\nexits cleanly.\n\nIf the delete_db_on_python_exit argument is also set to True, then once\nthe server is automatically shut down the database directory it was\nconnected to will be deleted.\n\nIf the Qt parent is not set to None and the server has not been set to\nterminate on exit, then the use_system_tray option can be used to cause\nthe server to place a menu in the system tray. This menu will allow for\nthe server to be stopped, the logs to be reviewed and other options.\n\nWhen launching a server, this function will try to connect to the\nlaunched server for some time before assuming the launch has failed. The\nlength of this timeout is specified by the server_timeout keyword.\n\nBy default, the function will return True on success or False on\nfailure. If raise_exception is True, the function will raise an\nexception instead of returning False.\n\nThe username and password for the database should be specified using\nthose keywords.\n\nIf the connect keyword is specified, it should be an instance of the\nreport_remote_server.Server class. This object will be populated with\nthe launched server details when the function returns. It is a handy way\nto capture a dynamically selected port.\n\nThe port keyword can be set to the specific port number the ADR Nexus server\nshould use. The port keyword may also be set to None, in which case the\nsystem will search for an open port on which to start the ADR Nexus server,\nstarting at 8000. If this option is selected, it is critical that the\n‘connect’ keyword be set, otherwise there will be no mechanism for one\nto know the actual port that was used.\n\nThe verbose keyword controls the level of log output generated by the\nADR Nexus server and determines if the user is allowed to modify any\ndynamically selected port number.\n\nIn addition to the above mentioned arguments, this method supports all\nof the options available to the Ansys Dynamic Reporting Launcher CLI (through **kwargs)."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#report_remote_servercreate_new_local_database","title":"Startup > report_remote_server.create_new_local_database","text":"report_remote_server.create_new_local_database\n\nThis function will create a new, empty database with the default\nusername and password in the directory specified by the directory\nkeyword. If parent is None, this function will try to create the\ndatabase and return True on success without presenting any GUI elements.\nIt is very important to set the directory keyword if passing None as the\nparent. Otherwise, parent should be a Qt widget object that will serve\nas the parent of modal dialog used to select the directory to contain\nthe new database. The target directory should be empty as this method\nwill insert a media directory, a db.sqlite3 file and a manage.py file.\nThe return_info argument is optional. If a dictionary is passed,\ninformation about the created database will be stored in it.\n\nIf raise_exception is True, method will throw an error instead of\nreturning the error flag."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#report_remote_serverconnect_to_server_dialog","title":"Startup > report_remote_server.connect_to_server_dialog","text":"report_remote_server.connect_to_server_dialog\n\nThis method presents a dialog to the user with a window title specified\nby the title keyword that allows the user to enter all of the\ninformation needed to connect to an ADR Nexus server. It then attempts to\nconnect to the server and returns True if the connection succeeded. The\nserver argument should be an instance of the report_remote_server.Server\nclass which will be initialized with the entered values. This method can\nonly be called from a PyQt application. You can specify None for the\nparent, but it will have the same effect as displaying a modal dialog\nwith no parent specified. Do not use this method if your application\nshould not display any GUI."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#report_remote_serverserver","title":"Startup > report_remote_server.Server","text":"report_remote_server.Server\n\nThis class provides an interface to the ADR Nexus server. Most of the core\nAPI can be accessed via an instance of this class. The Server object has\nmethods for creating instances of data item and template objects."},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#corereport_objects-module","title":"Startup > core.report_objects module","text":"core.report_objects module\n\nThis module provides the core data items that can be pushed into\nan Ansys Dynamic Reporting\ndatabase. This includes the session, dataset and item objects.\nGenerally, these classes should be created using the Server object\nmethods create_item, create_layout, default_dataset and default_session\nor via one of the Server query methods.\n\n"},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#class-hierarchy","title":"Startup > Class hierarchy","text":"Class hierarchy\n\nBaseRESTObject - Abstract Ansys Dynamic Reporting REST object interface base class\n\nDatasetREST - Dataset\ninformation\n\nSessionREST - Session\ninformation\n\nItemREST - Core data items\n\nTemplateREST - Abstract base class\nfor all template (layout and generator) classes\n\nLayoutREST - Abstract base class for\nall layout classes\n\nbasicREST - Basic column layout class\n\npanelREST - Column layout class with\nsupport for pullouts and headers\n\nboxREST - Explicit child layout class\n\ntabsREST - Layout that organizes\nlayout children into tabs\n\ncarouselREST - Layout that\norganizes children into a ‘carousel’ presentation\n\nsliderREST - Specialized image\nlayout for interactive image review/comparison\n\nfooterREST - Page footer layout\n\nheaderREST - Page header layout\n\niteratorREST - Tag-based layout\nreplicator\n\ntagpropsREST - Map item/layout\ntags into properties\n\ntocREST - Table of contents/figure list\nlayout\n\nreportlinkREST - Cross layout\nlinking\n\nGeneratorREST - Abstract base\nclass for all generator classes\n\ntablemergeREST - Table merge\ngenerator for merging multiple tables into a single table\n\ntablereduceREST - Table\nreduction generator that may collapse rows/columns into aggregated\nvalues\n\ntablerowcolumnfilterREST -\nTable row/column filter generator for removing/organizing table rows\nand columns\n\ntablevaluefilterREST - Table\nvalue filter generator for processing table values\n\ntablesortfilterREST - Table\nsort/filter generator for re-organizing tables\n\nsqlqueriesREST - SQL query\ngenerator for pulling data into the report from external SQL databases\n\ntreemergeREST - tree merge\ngenerator for merging multiple trees into a single tree"},{"objectID":"Home","href":"lowlevelapi/GettingStarted.html#examples","title":"Startup > Examples","text":"Examples\n\nA simple example of how this API might be used:\n\nThis would start a new session that connects to an ADR Nexus server already\nrunning on port 8000 of the local system. The server has a default\ndataset and a default session object. We change the name and version of\nthe session application before creating a new data item. The data item\nis populated with some HTML source and then pushed to the server. The\nput_objects() call will push the item, the session and the dataset\nobjects all to the ADR Nexus server.\n\nA more complex example that generates an ASCII table of three columns\nrepresenting a username, a version number and a date (as a floating\npoint value):"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.get_report_component.html#get_report_component","title":"get_report_component","text":"get_report_component\n\n\n\nReport.get_report_component(prefix: str = '', filter: str = '', style_path: str = '', width: int = 1000, height: int = 800, item_filter: str = '') -> str\n\nA HTML code of the web component for report fetching. By default, the web\ncomponent uses iframe to embed the report. If users have provided additional\nconfiguration settings on their application server or on another proxy server,\nthe web component will use fetch API to embed the report directly in the\napplication.\n\nThis feature has been deprecated as of 2025 R., Refer to the adr_offline_report_src.js\nfile in the django/utils/remote/adr_offline_report_src/ directory, from the latest ADR\ninstallation. The new web component <adr-offline-report></adr-offline-report> supports\nreport embed and style overwrites generated from both server and serverless ADR.\n\nParameters\n\nprefix\n\npython:str, optional\n\nA user defined key in the server to reroute and fetch the report from ADR server. If not provided,\nthe web component will use the default iframe to embed the report in the application.\n\nfilter\n\npython:str, optional\n\nDEPRECATED: use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\n\nstyle_path: str, optional\n\nThe hosting app’s stylesheet path. The default is \"\". The syntax is used to overwrite report\nstyling using an external CSS file.\n\nwidth\n\npython:int, optional\n\nWidth of the iframe if the web component uses <iframe> to embed report. The default is 1000.\n\nheight\n\npython:int, optional\n\nHeight of the iframe if the web component uses <iframe> to embed report. The default is 800.\n\nReturns\n\npython:str\n\nThe web component HTML code (as string) that will get embedded in the HTML page\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.get_report_script.html#get_report_script","title":"get_report_script","text":"get_report_script\n\n\n\nReport.get_report_script() -> str\n\nA block of JavaScript script to define the web component for report fetching.\nNote that the function return a block of string that stands for JavaScript codes\nand need to be wrapped in a <script>…</script> HTML tag.\n\nThis feature has been deprecated as of 2025 R2. Refer to the adr_offline_report_src.js\nfile in the django/utils/remote/adr_offline_report_src/ directory, from the latest ADR\ninstallation. The new web component <adr-offline-report></adr-offline-report> supports\nreport embed and style overwrites generated from both server and serverless ADR.\n\nReturns\n\npython:str\n\nJavaScript code to define the report fetching web component (as a block of string)\nthat will get embedded in the HTML page\n\nExamples"},{"objectID":"Home","href":"gettingstarted/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPyDynamicReporting supports Ansys Dynamic Reporting 2023 R2 and later. To run\nPyDynamicReporting, you must have either a local copy of an Ansys installation\nwith a product that uses Ansys Dynamic Reporting or use a Docker image.\n\nTo get a copy of Ansys, visit the Ansys website.\n\nUp to the Ansys 2023 R2 release, Ansys Dynamic Reporting is installed as\npart of the Ansys EnSight package, under the Fluids section of the\ninstaller. Starting from the Ansys 2024 R1 release, Ansys Dynamic Reporting\nis installed separately, and can be found in the Fluids section of the\nAnsys installer. Please also note that in all versions, Ansys Dynamic Reporting\nis automatically installed if one of the following Ansys products is\ninstalled: EnSight, Forte, Fluent, Polyflow, or Icepack."},{"objectID":"Home","href":"gettingstarted/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nThe ansys-dynamicreporting-core package currently supports Python 3.9\nthrough Python 3.12 on Windows and Linux.\n\nTo install the latest package from GitHub, run this command:\n\nIf you plan on doing local development of PyDynamicReporting, install the\nlatest pydynamicreporting package with this code:\n\nNow you can start developing the pydynamicreporting package."},{"objectID":"Home","href":"gettingstarted/index.html#create-an-ansys-dynamic-reporting-instance","title":"Getting started > Create an Ansys Dynamic Reporting instance","text":"Create an Ansys Dynamic Reporting instance\n\nOnce PyDynamicReporting is installed, your first step is to create an Ansys\nDynamic Reporting object. There are two ways to do this, based on whether\nor not there is a local Ansys installation.\n\nIf there is a local installation, simply point to the version\ndirectory inside the Ansys installation:\n\nIf there is no local installation, you must direct PyDynamicReporting to\ndownload (if not already available) and run a Docker image:\n\nThe data_directory parameter must pass a temporary directory that has to exist and be\nempty. This directory stores temporary information from the Docker image."},{"objectID":"Home","href":"gettingstarted/index.html#start-and-connect-to-an-ansys-dynamic-reporting-service","title":"Getting started > Start and connect to an Ansys Dynamic Reporting service","text":"Start and connect to an Ansys Dynamic Reporting service\n\nOnce an Ansys Dynamic Reporting instance is created, you can start\nan Ansys Dynamic Reporting service or connect to a running\none.\n\nTo connect to a running service, run this code:\n\nThe preceding code assumes that there is a running Ansys Dynamic Reporting\nservice on your machine on port 8000 with the default username and password.\nIf the Ansys Dynamic Reporting service does not use the default values for\nthe URL, port, and login credentials, you must provide the appropriate values\nin the connect method:\n\nWhen you are connecting to a running Ansys Dynamic Reporting service, the\nweb components that you obtain from PyDynamicReporting might or might not\nbe embedded. This is controlled by how the Ansys Dynamic Reporting service\nwas started. To ensure that web components can be embedded, you must\nstart the Ansys Dynamic Reporting service with iframes enabled via this flag:\n\nIf you are using PyDnamicReporting to start the Ansys Dynamic Reporting\nservice, you do not need to take any action because iframes are enabled\nby default. For more information on the launcher in Ansys Dynamic Reporting,\nsee the Ansys Dynamic Reporting documentation.\n\n\n\nNow, assume that you do not have a running Ansys Dynamic Reporting service\naccessible to you and that you must start one. You can use this simple\nstart method:\n\nThe adr_service object is now connected to a newly started Ansys Dynamic\nReporting service on a new database. Once again, you can control the parameters\nof the Ansys Dynamic Reporting service (port number, username, and\npassword) by passing them as arguments:"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.html#service","title":"Service","text":"Service\n\n\n\nclass ansys.dynamicreporting.core.Service(ansys_version: int = None, docker_image: str = 'ghcr.io/ansys-internal/nexus', data_directory: str = None, db_directory: str = None, port: int = 8000, logfile: str = None, ansys_installation: str | None = None)\n\nProvides for creating a connection to an Ansys Dynamic Reporting service.\n\nParameters\n\nansys_version\n\npython:int, optional\n\nThree-digit format for a locally installed Ansys version.\nFor example, 232 for Ansys 2023 R2. The default is None.\n\ndocker_image\n\npython:str, optional\n\nDocker image to use if you do not have a local Ansys installation.\nThe default is \"ghcr.io/ansys-internal/nexus\".\n\ndata_directory\n\npython:str, optional\n\nPath to the directory for storing temporary information from the Docker image.\nThe default is creating a new directory inside the OS\ntemporary directory. This parameter must pass a directory that exists and\nis empty.\n\ndb_directory\n\npython:str, optional\n\nPath to the database directory for the Ansys Dynamic Reporting service.\nThe default is None. This parameter must pass a directory that exists and\nis empty.\n\nport\n\npython:int, optional\n\nPort to run the Ansys Dynamic Reporting service on. The default is 8000.\n\nlogfile\n\npython:str, optional\n\nFile to write logs to. The default is None. Acceptable values are\nfilenames or stdout for standard output.\n\nansys_installation\n\npython:str, optional\n\nPath to the directory where Ansys is installed locally. If Ansys is not\ninstalled locally but is to be run in a Docker image, set the\nvalue for this paraemter to \"docker\".\n\nRaises\n\nDatabaseDirNotProvidedError\n\nThe \"db_directory\" argument has not been provided when using a Docker image.\n\nCannotCreateDatabaseError\n\nCan not create the \"db_directory\" when using a Docker image.\n\nInvalidAnsysPath\n\nThe \"ansys_installation\" does not correspond to a valid Ansys installation.\ndirectory\n\nAnsysVersionAbsentError\n\nCan not find the Ansys version number from the installation directory.\n\nExamples\n\nInitialize the class and connect to an Ansys Dynamic Reporting service running on\nthe localhost on port 8010 with username set to \"admin\" and password\nset to \"mypsw\" using a local Ansys installation:\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.show_legend.html#show_legend","title":"show_legend","text":"show_legend\n\n\n\nItem.show_legend\n\nShow legend\n\nSet to 0 to hide the legend. Default: 1"},{"objectID":"Home","href":"examples/00-basic/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 7 files from examples/00-basic:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_00-basic_00-launch-reporting-service.py (00-launch-reporting-service.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_01-create_db.py (01-create_db.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_02-connect.py (02-connect.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_03-plottype.py (03-plottype.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_04-set-plot-properties.py (04-set-plot-properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_05-explore-plot-properties.py (05-explore-plot-properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_00-basic_06-create-report-templates.py (06-create-report-templates.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.stacked.html#stacked","title":"stacked","text":"stacked\n\n\n\nItem.stacked\n\nBar chart stacking Deprecated\n\n1=stack the bar charts This is a deprecated property  please use bar_mode instead."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_text.html#line_marker_text","title":"line_marker_text","text":"line_marker_text\n\n\n\nItem.line_marker_text\n\nMarker text\n\nValue={{vx}} Position={{vy}}"},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#tagging","title":"Tagging","text":"Tagging\n\nTagging is an important feature of Ansys Dynamic Reporting. Adding tags to items\nallows the database to organize them and the templates to create reports in\na precise and effective manner. This example shows how to add, modify, query,\nand delete tags on items.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#start-an-ansys-dynamic-reporting-service","title":"Tagging > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory."},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#create-an-item-and-tag-it","title":"Tagging > Create an item and tag it","text":"Create an item and tag it\n\nNow that an Ansys Dynamic Reporting service is running on top of a new\ndatabase, create an item and set some tags on it. Use the\nget_tags method to\nsee the values of the tags."},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#modify-the-tags","title":"Tagging > Modify the tags","text":"Modify the tags\n\nOnce the tags have been set, you can add or delete to them. Use the\nget_tags method\nto verify that the new value of the tags is the expected var=pressure dp=3."},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#query-items-based-on-tag-values","title":"Tagging > Query items based on tag values","text":"Query items based on tag values\n\nAdd a couple of other items and tag them. Then, query the database\nfor items that have a specific tag set on them. Given the preceding\ncode, this results in only two items. See the contents of the dp3_items\nlist."},{"objectID":"Home","href":"examples/25-intermediate/00-tagging.html#close-the-service","title":"Tagging > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 00-tagging.ipynb\n\nDownload Python source code: 00-tagging.py\n\nDownload zipped: 00-tagging.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.export_pdf.html#export_pdf","title":"export_pdf","text":"export_pdf\n\n\n\nReport.export_pdf(file_name: str = '', query_params: dict | None = None, item_filter: str | None = None, page: list | None = None, delay: int | None = None) -> bool\n\nExport report as PDF. Currently works only with a local ADR installation, and\nnot a docker image.\n\nParameters\n\nfile_name\n\npython:str\n\nPath and filename for the PDF file to export.\n\nquery_params\n\npython:dict, optional\n\nDictionary for parameters to apply to report template. Default: None\n\nitem_filter: str, optional\n\nString corresponding to query to run on the database items before rendering the report.\nDefault: None\n\npage\n\npython:list, optional\n\nList of integers that represents the size of the exported pdf. Default: None, which\ncorresponds to A4 size\n\ndelay\n\npython:int, optional\n\nSeconds to delay the start of the pdf export operation. Default: None, which\ncorresponds to no delay\n\nReturns\n\nbool\n\nSuccess status of the PDF export: True if it worked, False otherwise\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.query.html#query","title":"query","text":"query\n\n\n\nService.query(query_type: str = 'Item', filter: str | None = '', item_filter: str | None = '') -> list\n\nQuery the database.\n\n\n\nParameters\n\nquery_type\n\npython:str, optional\n\nType of objects to query. The default is \"Item\". Options are \"Item\",\n\"Session\", and \"Dataset\".\n\nfilter\n\npython:str, optional\n\nDEPRECATED. Use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query in the documentation for Ansys Dynamic Reporting.\n\nReturns\n\npython:list\n\nList of queried objects.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_style.html#line_style","title":"line_style","text":"line_style\n\n\n\nItem.line_style\n\nLine styling\n\nnone solid dot dash longdash dashdot longdashdot"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.labels_row.html#labels_row","title":"labels_row","text":"labels_row\n\n\n\nItem.labels_row\n\nRow labels\n\nrow 1 row 2"},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#create-a-report-from-scratch","title":"Create a report from scratch","text":"Create a report from scratch\n\nTo use PyDynamicReporting to build a report from scratch, you start\na new Ansys Dynamic Reporting instance on a new database, populate it,\namd generate a report template. As a result, you get a report.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#start-an-ansys-dynamic-reporting-service","title":"Create a report from scratch > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#create-a-report-template","title":"Create a report from scratch > Create a report template","text":"Create a report template\n\nCreate a report template using the low-level API for Ansys Dynamic Reporting."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#verify-the-report","title":"Create a report from scratch > Verify the report","text":"Verify the report\n\nUse the get_list_reports\nmethod on the Ansys Dynamic Reporting object to verify that there is one\ntop-level report in the database now. This call returns a list of the names\nof the top-level reports."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#create-items","title":"Create a report from scratch > Create items","text":"Create items\n\nNow that the report template is set, populate the database with items having\nproper tags and names."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#visualize-the-report","title":"Create a report from scratch > Visualize the report","text":"Visualize the report\n\nVisualize the report."},{"objectID":"Home","href":"examples/50-advanced/00-complete_report.html#close-the-service","title":"Create a report from scratch > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 00-complete_report.ipynb\n\nDownload Python source code: 00-complete_report.py\n\nDownload zipped: 00-complete_report.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.get_iframe.html#get_iframe","title":"get_iframe","text":"get_iframe\n\n\n\nItem.get_iframe(width=0, height=0)\n\nGet the iframe object corresponding to the item.\n\nParameters\n\nwidth\n\npython:int, optional\n\nWidth of the iframe object. The default is min(Item width * 1,1, 1000).\nFor example, if the item width is 0, the default is 1000.\n\nheight\n\npython:int, optional\n\nHeight of the iframe object. The default is min(Item height, fixed height),\nwhere the fixed height is 800 for an item scene and 400 otherwise.\n\nReturns\n\niframe\n\niframe object corresponding to the item. If no iframe can be generated,\nNone is returned.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker.html#line_marker","title":"line_marker","text":"line_marker\n\n\n\nItem.line_marker\n\nMarkers\n\ncircle square cross x triangle star diamond hash plus times open dot"},{"objectID":"Home","href":"serverless/overview.html#overview","title":"Overview","text":"Overview\n\nServerless ADR is a lightweight, local Python API for building and rendering reports\nusing Ansys Dynamic Reporting (ADR) without requiring a running ADR backend or network connection."},{"objectID":"Home","href":"serverless/overview.html#key-benefits","title":"Overview > Key Benefits","text":"Key Benefits\n\nRuns entirely within your Python process — no external server needed.\n\nSupports both SQLite and PostgreSQL databases.\n\nUses the same core schema as the traditional ADR service.\n\nEnables offline report generation with full fidelity (items, templates, etc.).\n\nSuitable for local workflows, batch processing, and embedding in Python applications.\n\nFully backwards compatible with the service-based ADR API."},{"objectID":"Home","href":"serverless/overview.html#core-concepts","title":"Overview > Core Concepts","text":"Core Concepts\n\nADR Instance: Singleton object managing database connections and report lifecycle.\n\nSessions and Datasets: Organize your report data and metadata.\n\nItems: Report components such as HTML, tables, images, animations, and more.\n\nTemplates: Define report structure and layout using various built-in and custom classes.\n\nStatic and Media Files: Handle CSS, JavaScript, images, and other assets required for rendering."},{"objectID":"Home","href":"serverless/overview.html#built-on-django-orm","title":"Overview > Built on Django ORM","text":"Built on Django ORM\n\nServerless ADR uses Django’s ORM for database interaction and schema management.\nUnlike traditional ADR, it does not require a running web server but leverages\nDjango’s powerful database and templating features locally."},{"objectID":"Home","href":"serverless/overview.html#use-cases","title":"Overview > Use Cases","text":"Use Cases\n\nGenerating offline simulation reports.\n\nIntegration into batch workflows and automated pipelines.\n\nTemplate design and testing before deployment.\n\nEmbedding ADR reporting capabilities inside Python applications.\n\nFor setup details and advanced configuration, see the instantiation guide."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_opacity.html#line_marker_opacity","title":"line_marker_opacity","text":"line_marker_opacity\n\n\n\nItem.line_marker_opacity\n\nMarker opacity\n\nThe opacity of the line marker. Default: 1.0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.palette.html#palette","title":"palette","text":"palette\n\n\n\nItem.palette\n\nColor palette\n\nThe name of the color palette to use with line_color row data. =invert. Example: Hot"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_width.html#line_width","title":"line_width","text":"line_width\n\n\n\nItem.line_width\n\nLine width\n\nThe line width in pixels"},{"objectID":"Home","href":"examples/25-intermediate/02-json.html#import-or-export-report-template-using-json","title":"Import or export report template using JSON","text":"Import or export report template using JSON\n\nAnsys Dynamic Reporting provides a seamless solution for serializing and\ndeserializing report templates. It allows you to export templates as local\nJSON files and rebuild them through JSON imports. This section describes\nthe process of converting a report template and loading it back in.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/25-intermediate/02-json.html#start-a-new-ansys-dynamic-reporting-service","title":"Import or export report template using JSON > Start a new Ansys Dynamic Reporting service","text":"Start a new Ansys Dynamic Reporting service\n\nStart a new ADR service. Make sure the database directory is empty. Use the get_list_report\nmethod to check that there are no reports in the database."},{"objectID":"Home","href":"examples/25-intermediate/02-json.html#create-a-new-report-template-from-the-json-file","title":"Import or export report template using JSON > Create a new report template from the JSON file","text":"Create a new report template from the JSON file\n\nDownload a JSON sample file for the report templates. Load it into the ADR service.\nCheck that the ADR service now contains a report. Visualize it."},{"objectID":"Home","href":"examples/25-intermediate/02-json.html#modify-and-export-the-report-template","title":"Import or export report template using JSON > Modify and export the report template","text":"Modify and export the report template\n\nAdd a new chapter to the report template using the low level API. Export the new JSON\nfile corresponding to the changed report, and visualize it. Note the extra chapter in\nthe Table Of Contents, corresponding to the change you just made.\n\nIf the name of the loaded report conflicts with an existing name in the service\n(for example, when reloading the same report as in the previous step), Ansys Dynamic\nReporting automatically renames the loaded report. In this case, the report will be\nrenamed to “my_report_name (1)”."},{"objectID":"Home","href":"examples/25-intermediate/02-json.html#close-the-service","title":"Import or export report template using JSON > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the report\ntemplate that was created remains on disk.\n\n\n\nDownload Jupyter notebook: 02-json.ipynb\n\nDownload Python source code: 02-json.py\n\nDownload zipped: 02-json.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_color.html#line_color","title":"line_color","text":"line_color\n\n\n\nItem.line_color\n\nLinebarhistogrampiemarker colors\n\n#rrggbb #rgb @rownamenumber hexadecimal digits: #8b783f"},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#dataset-and-session-objects","title":"Dataset and Session Objects","text":"Dataset and Session Objects\n\n"},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#report_objectsdatasetrest-object","title":"Dataset and Session Objects > report_objects.DatasetREST object","text":"report_objects.DatasetREST object\n\nThis object is a Python representation of an Ansys\nDynamic Reporting dataset object. When\nthis object is created, a GUID will automatically be generated for the\nobject."},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#data-members","title":"Dataset and Session Objects > Data members","text":"Data members\n\nThe following attributes are available on a DatasetREST object:\n\nguid - string GUID. The default is str(uuid.uuid1())\n\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\n\nfilename - The filename portion of the dataset local path, a string\n\ndirname - The directory name portion of the dataset local path, a\nstring\n\nformat - The format of the dataset, a string\n\nnumparts - The number of parts in the dataset, an integer\n\nnumelements - The total number of elements in the dataset, an integer\n(a measure of the size of the dataset)"},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#methods","title":"Dataset and Session Objects > Methods","text":"Methods\n\ndataset.set_tags(tagstring)\n\nSet the tags for the dataset to the passed string. Multiple tags are\nspace-separated.\n\ndataset.get_tags()\n\nReturns the tags string for this object. Multiple tags are\nspace-separated.\n\ndataset.add_tag(tag, value=None)\n\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\n\ndataset.rem_tag(tag)\n\nRemove the tag (and any potential associated value) from the current tag\nstring.\n\n"},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#report_objectssessionrest-object","title":"Dataset and Session Objects > report_objects.SessionREST object","text":"report_objects.SessionREST object\n\nThis object is a Python representation of an\nAnsys Dynamic Reporting session object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date."},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#data-members","title":"Dataset and Session Objects > Data members","text":"Data members\n\nThe following attributes are available on a SessionREST object:\n\nguid - string GUID. The default is str(uuid.uuid1())\n\ntags - The user defined tags string for this object. Multiple tags\nare space-separated.\n\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\n\nhostname - The name of the host system the session was run on, a\nstring\n\nversion - The version of the application that was used to generate\nthis session, a string\n\nplatform - The platform/OS on which the application generated this\nsession, a string\n\napplication - The name of the application generating this session, a\nstring"},{"objectID":"Home","href":"lowlevelapi/DatasetandSessionObjects.html#methods","title":"Dataset and Session Objects > Methods","text":"Methods\n\nsession.set_tags(tagstring)\n\nSet the tags for the session to the passed string. Multiple tags are\nspace-separated.\n\nsession.get_tags()\n\nReturns the tags string for this object. Multiple tags are\nspace-separated.\n\nsession.add_tag(tag, value=None)\n\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\n\nsession.rem_tag(tag)\n\nRemove the tag (and any potential associated value) from the current tag\nstring."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.visualize_report.html#visualize_report","title":"visualize_report","text":"visualize_report\n\n\n\nService.visualize_report(report_name: str | None = '', new_tab: bool | None = False, filter: str | None = '', item_filter: str | None = '') -> None\n\nRender the report.\n\nParameters\n\nreport_name\n\npython:str, optional\n\nName of the report. the default is \"\", in which\ncase all items assigned to the session are shown.\n\nnew_tab\n\nbool, optional\n\nWhether to render the report in a new tab if the current environment\nis a Jupyter notebook. The default is False, in which case the\nreport is rendered in the current location. If the environment is\nnot a Jupyter notebook, the report is always rendered in a new tab.\n\nfilter\n\npython:str, optional\n\nDEPRECATED. Use item_filter instead.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query in the documentation for Ansys Dynamic Reporting.\n\nitem_filter\n\npython:str, optional\n\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query in the documentation for Ansys Dynamic Reporting.\n\nReturns\n\nReport\n\nRendered report.\n\nRaises\n\nConnectionToServiceError\n\nThere is no ADR service associated with the current object.\n\nMissingReportError\n\nThe service does not have a report with the input name.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.column_maximum.html#column_maximum","title":"column_maximum","text":"column_maximum\n\n\n\nItem.column_maximum\n\nColumn range maximums\n\nScalar value or array of values used as column category maximums."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot.html#plot","title":"plot","text":"plot\n\n\n\nItem.plot\n\nTable display style\n\ntable bar line pie heatmap parallel sankey 3d surface polar"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.format_column.html#format_column","title":"format_column","text":"format_column\n\n\n\nItem.format_column\n\nColumn labels format\n\nformat for column labels scientific sigfigsX floatdotX str date_XY"},{"objectID":"Home","href":"examples/50-advanced/index.html#advanced-examples","title":"Advanced examples","text":"Advanced examples\n\nAdvanced examples show how to use the low-level API in Ansys\nDynamic Reporting to create, query, visualize, and embed reports based on\ncustomers case studies.\n\nsphx_glr_examples_50-advanced_00-complete_report.py\n\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py\n\nsphx_glr_examples_50-advanced_02-customized_report_embed.py\n\n"},{"objectID":"Home","href":"examples/00-basic/06-create-report-templates.html#creating-report-templates","title":"Creating report templates","text":"Creating report templates\n\nTemplates are used to specify how the final report will be organised. They\ncan be nested to describe the layout of subsections in greater detail.\n\nThis example assumes that you have a local Ansys installation.\n\nInitially, create and start a session as per other examples."},{"objectID":"Home","href":"examples/00-basic/06-create-report-templates.html#start-an-ansys-dynamic-reporting-service","title":"Creating report templates > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service on a new\ndatabase. The path for the database directory must be to an empty directory.\nGet the serverobj property from the service. This property will be used to create the\ntemplate."},{"objectID":"Home","href":"examples/00-basic/06-create-report-templates.html#create-a-template","title":"Creating report templates > Create a template","text":"Create a template\n\nThe template is a plan of how ADR items will be presented in the final report.\nThe contents of sections is specified by filters that query the tags of items\nin the database."},{"objectID":"Home","href":"examples/00-basic/06-create-report-templates.html#nesting-templates","title":"Creating report templates > Nesting templates","text":"Nesting templates\n\nTemplates can be nested to describe layouts within a section, with the topmost template\nbeing the report itself.\n\nFilters are composed of strings in a common format. The format is explained in more detail\non this page [Query Expressions](https://ansyshelp.ansys.com/public/account/secured?returnurl=/Views/Secured/corp/v251/en/adr_ug/adr_ug_query_expressions.html?q=query%20expression).\n\n\n\nDownload Jupyter notebook: 06-create-report-templates.ipynb\n\nDownload Python source code: 06-create-report-templates.py\n\nDownload zipped: 06-create-report-templates.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_justification.html#item_justification","title":"item_justification","text":"item_justification\n\n\n\nItem.item_justification\n\nTable item justification\n\nleft  center or right. By default  there will be no justification."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.get_report.html#get_report","title":"get_report","text":"get_report\n\n\n\nService.get_report(report_name: str) -> Report\n\nGet a Report item that corresponds to a report in the database with a given\nname.\n\nParameters\n\nreport_name\n\npython:str\n\nName of the report in the database. The name must be for a top-level report, not a name\nof a subsection within a report.\n\nReturns\n\nObject\n\nReport object. If no such object can be found, None is returned.\n\nRaises\n\nConnectionToServiceError\n\nThere is no ADR service associated with the current object.\n\nMissingReportError\n\nThe service does not have a report with the input name.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.ztitle.html#ztitle","title":"ztitle","text":"ztitle\n\n\n\nItem.ztitle\n\nZ axis title\n\nA title for the z axis"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_cond_format.html#table_cond_format","title":"table_cond_format","text":"table_cond_format\n\n\n\nItem.table_cond_format\n\nTable conditional formatting\n\nSpecify conditional formatting rules for table cell formatting."},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#template-objects","title":"Template Objects","text":"Template Objects"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#report_objectstemplaterest-object","title":"Template Objects > report_objects.TemplateREST object","text":"report_objects.TemplateREST object\n\nThis object is a Python representation of an Ansys\nDynamic Reporting template object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date. The\nreport_objects.TemplateREST class represent features common to all\ntemplate types. Two sub-classes, report_objects.LayoutREST and\nreport_objects.GeneratorREST represent the generic Layout and Generator\ntemplates. From each of these classes, a set of sub-classes representing\nthe specific template types are inherited. For information specific to\neach template type, refer to the subclass tree.\n\nTemplateREST objects should always be generated using the\nserver object create_template() method."},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#data-members","title":"Template Objects > Data members","text":"Data members\n\nThe following attributes are available on a TemplateREST object:\n\nguid - string GUID. The default is str(uuid.uuid1())\n\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated. You can also access the tabs via the method\nget_tags().\n\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\n\nname - The name of the template\n\nreport_type - The type of the report template (e.g. ‘Layout:basic’).\nThe report_type is also set by the sub-class of the object. See\nthis table for the\ncorrespondence between report_type and template sub-class\n\nitem_filter - The filter string for this report template. You can\nalso access the filter via the method\nget_filter().\n\nparams - A Python dictionary of the parameters for this specific\nreport_type. You can also access the parameters via the method\nget_params().\n\nchildren - A list of the child templates of this template\n\nmaster - True if the parent data member is None\n\nparent - The parent template (if any) of this template"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#methods","title":"Template Objects > Methods","text":"Methods\n\n\n\ntemplate.get_params()\n\nGet the parameters of the template.\n\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\n\ntemplate.set_params({‘param1’: 1})\n\nSet the parameters of the template. This function takes as input a\ndictionary.\n\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\n\ntemplate.add_params({‘param1’: 1})\n\nAdd the parameters to the existing template parameters. This function\ntakes as input a dictionary.\n\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\n\ntemplate.get_property()\n\nGet the properties of the template as a dictionary. A general\ndescription of what properties are for a template can be found in\nLayout Templates in the documentation of Ansys Dynamic Reporting.\n\ntemplate.set_property(property={})\n\nSet the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found in\nLayout Templates in the documentation of Ansys Dynamic Reporting.\n\ntemplate.add_property(property={})\n\nAdd the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found in\nLayout Templates in the documentation of Ansys Dynamic Reporting.\n\ntemplate.get_sort_fields()\n\nGet the sorting filter of the template.\n\ntemplate.set_sort_fields([‘+i_date’, ‘-i_name’])\n\nSet the sorting filter of the template. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported in Query Expressions in the documentation for Ansys Dynamic\nReporting. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\n\ntemplate.add_sort_fields([‘+i_date’, ‘-i_name’])\n\nAdd elements to the sorting filter of the template. This function takes\na list as input. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported Query Expressions in the documentation for Ansys Dynamic\nReporting. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\n\ntemplate.get_sort_selection()\n\nGet the sort selection parameter.\n\ntemplate.set_sort_selection(value=”all”)\n\nSet the sort selection parameter for the template.This function takes a\nstring as input, among the following options:\n\n‘all’\n\n‘first’\n\n‘last’\n\ntemplate.set_tags(tagstring)\n\nSet the tags for the template to the passed string. Multiple tags are\nspace-separated.\n\n\n\ntemplate.get_tags()\n\nReturns the tags string for this object. Multiple tags are\nspace-separated.\n\ntemplate.add_tag(tag, value=None)\n\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\n\ntemplate.rem_tag(tag)\n\nRemove the tag (and any potential associated value) from the current tag\nstring.\n\n\n\ntemplate.get_filter()\n\nGet the item filter of the template. The item filter is encoded as a\nstring using the format explained in Query Expressions\nin the documentation for Ansys Dynamic Reporting.\n\ntemplate.set_filter(filter_str=’’)\n\nSets the item filter of the template. Takes as input a string. The item\nfilter is encoded as a string using the format explained in\nQuery Expressions in the documentation for Ansys Dynamic Reporting.\n\ntemplate.add_filter(filter_str=’’)\n\nAdd filters to the item filter of the template. Takes as input a string.\nThe item filter is encoded as a string using the format explained in\nQuery Expressions in the documentation for Ansys Dynamic Reporting.\n\ntemplate.get_filter_mode()\n\nReturns the filter mode of the template. The possible outputs are:\n\n‘items’: corresponds to Incoming Items\n\n‘root_replace’: corresponds to Database (replace)\n\n‘root_append’: corresponds to Database (append)\n\ntemplate.set_filter_mode(value=’items’)\n\nSets the filter mode of the template. Takes as input a string. See\nget_filter_mode for the accepted values.\n\ntemplate.reorder_child(target_child_template, new_position)\n\nReorders a child template within the list of children to a specified position.\n\nThis method moves a child template (identified by its GUID or the template object itself)\nto a new position within the children list of the current template. It ensures that\nthe specified position is valid and that the target child template exists in the children list."},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#example-of-usage","title":"Template Objects > Example of Usage","text":"Example of Usage\n\nLet’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#subclasses","title":"Template Objects > SubClasses","text":"SubClasses\n\nEach template type is represented by a subclass of the TemplateREST\nclass. There are two main subclasses: LayoutREST for the Layout template\ntypes and GeneratorREST for the Generator template types. Each of these\nsubclasses has its own set of subclasses, to represent each specific\ntemplate type.\n\n\n\n\n\n\n\n\n\nLayouts\n\nTemplate type\n\nTemplate API sub-class\n\nbasic\n\nColumns\n\nreport_objects.basicREST()\n\npanel\n\nPanel\n\nreport_objects.panelREST()\n\nbox\n\nBoxes\n\nreport_objects.boxREST()\n\ntabs\n\nTabs\n\nreport_objects.tabsREST()\n\ncarousel\n\nCarousel\n\nreport_objects.carouselREST()\n\nslider\n\nSlider\n\nreport_objects.sliderREST()\n\nfooter\n\nPage Footer\n\nreport_objects.footerREST()\n\nheader\n\nPage Header\n\nreport_objects.headerREST()\n\niterator\n\nIterator\n\nreport_objects.iteratorREST()\n\ntagprops\n\nTag to Properties\n\nreport_objects.tagpropsREST()\n\ntoc\n\nTable of Contents\n\nreport_objects.tocREST()\n\nreportlink\n\nLink Report\n\nreport_objects.reportlinkREST()\n\nuserdefined\n\nUserdefined\n\nreport_objects.userdefinedREST()\n\n\n\n\n\n\n\nGenerators\n\nTemplate type\n\nTemplate API sub-class\n\ntablemerge\n\nTable Merge\n\nreport_objects.tablemergeREST()\n\ntablereduce\n\nTable Reduction\n\nreport_objects.tablereduceREST()\n\ntablerowcolumnfilter\n\nTable Row/Column Filter\n\nreport_objects.tablerowcolumnfilterREST()\n\ntablevaluefilter\n\nTable Value Filter\n\nreport_objects.tablevaluefilterREST()\n\ntablesortfilter\n\nTable Row/Column Sort\n\nreport_objects.tablesortfilterREST()\n\nsqlqueries\n\nSQL Query\n\nreport_objects.sqlqueriesREST()\n\ntreemerge\n\nTree Merge\n\nreport_objects.mergetreeREST()\n\nstatistical\n\nStatistical Analysis\n\nreport_objects.statisticalREST()\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#layoutrest-class","title":"Template Objects > LayoutREST class","text":"LayoutREST class\n\nInherits from TemplateREST\n\nClass that groups all the common attributes among Layout templates\n(for reference, see Layout Templates in the documentation\nfor Ansys Dynamic Reporting). Its specific methods are:\n\ntemplate.get_column_count()\n\nGet the number of columns.\n\ntemplate.set_column_count(value)\n\nSet the number of columns. Takes as input an integer larger than 0.\n\ntemplate.get_column_widths()\n\nGet the list of the widths of the columns.\n\ntemplate.set_column_widths([1.0, 2.0, 1.0])\n\nSet the list of the widths of the columns. Takes as input an array where\neach number represent the relative width of that column compared to the\nother columns.\n\ntemplate.get_transpose()\n\nReturns the Transpose columns/rows status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\n\ntemplate.set_transpose(value=0)\n\nSets the Transpose columns/rows status of the template. value = 0 for\noff, value = 1 for on. It supports only Layout: template types.\n\ntemplate.get_skip()\n\nReturns the Skip if no input items status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\n\ntemplate.set_skip(value=0)\n\nSets the Skip if no input items status of the template. value = 0\n(default) for off, value = 1 for on. It supports only Layout: template\ntypes.\n\ntemplate.get_html()\n\nReturns the HTML of the template. It supports only Layout: template\ntypes\n\ntemplate.set_html(value=None)\n\nSets the HTML of the template. Takes as input a string. It supports only\nLayout: template types.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Slider Example” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#generatorrest-class","title":"Template Objects > GeneratorREST class","text":"GeneratorREST class\n\nInherits from TemplateREST\n\nClass that groups all the common attributes among\nGenerator templates. Its specific methods are:\n\ntemplate.get_generated_items()\n\nGet the Generated items flag. Returned values:\n\n‘replace’: corresponds to Replace\n\n‘add’: corresponds to Append\n\ntemplate.set_generated_items(value)\n\nGet the Generated items flag. Takes as input a string. See\nget_generated_items() for the acceptable strings.\n\ntemplate.get_append_tags()\n\nGet the value for Append template tags to new items. Returned values are\nTrue for toggled ON, False for toggled OFF\n\ntemplate.set_append_tags(value=True)\n\nGet the value for Append template tags to new items. The input needs to\nbe a boolean: True / False\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#basicrest-object","title":"Template Objects > basicREST object","text":"basicREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Columns Layout template\ntype. No specific methods.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#panelrest-object","title":"Template Objects > panelREST object","text":"panelREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Panel Layout template type.\nIts specific methods are:\n\ntemplate.get_panel_style()\n\nGet the style of the Panel. Possible returned values:\n\n‘panel’: corresponds to Titled Panel\n\n‘callout-default’: corresponds to Callout\n\n‘callout-danger’: corresponds to Callout Error\n\n‘callout-warning’: corresponds to Callout Warning\n\n‘callout-success’: corresponds to Callout Success\n\n‘callout-info’: corresponds to Callout Info\n\ntemplate.set_panel_style(value=’panel’)\n\nSet the style of the Panel. Takes as input strings. For the acceptable\nvalues, see get_panel_style()\n\ntemplate.get_items_as_link()\n\nGet the Show items as link toggle. 0 corresponds to Off, 1 corresponds\nto ON.\n\ntemplate.set_items_as_link(value=0)\n\nSet the Show items as link toggle. Takes as input an integer. 0\ncorresponds to Off, 1 corresponds to ON.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#boxrest-object","title":"Template Objects > boxREST object","text":"boxREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Boxes Layout template type.\nIts specific methods are:\n\ntemplate.get_children_layout()\n\nGet the children layout. This method returns a dictionary where each\nentry is a different child layout.\n\nFor each entry, the key corresponds to the guid of the child template.\nThe corresponding value is an array that gives:\n\nwhere Clip has the following values:\n\n‘self’: corresponds to Clip: To self\n\n‘scroll’: corresponds to Clip: Scroll\n\n‘none’: corresponds to Clip: None\n\ntemplate.set_child_position(guid=None, value=[0,0,10,10])\n\nSet the children layout: position and size. The method takes as input\nthe guid of the child template you want to modify, and an array of 4\nintegers that corresponds to [X, Y, Width, Height] that you want to\nset.\nRemember that if you are setting a new child template (not modifying\nan existing one), you will manually need to set that this child\ntemplate has the current box template as the parent template. See the\nexample below for how to do it.\n\ntemplate.set_child_clip(guid=None, clip=’self’)\n\nSet the children layout: clip parameter. The method takes as input the\nguid of the child template you want to modify, and the clip type as a\nstring. Only the types enumerated in get_children_layout() are\nacceptable values.\nRemember that if you are setting the clip type for a new child\ntemplate (not modifying an existing one), you will manually need to\nset that this child template has the current box template as the\nparent template. See the example below for how to do it.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child template of the\ntemplate “Box report test” that already exists in in the database\nrunning locally on port 8000. These would be the lines of code to create\nthe new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tabsrest-object","title":"Template Objects > tabsREST object","text":"tabsREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Tabs Layout template type. No\nspecific methods for this class.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#carouselrest-object","title":"Template Objects > carouselREST object","text":"carouselREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Carousel Layout template\ntype. Its specific methods are:\n\ntemplate.get_animated()\n\nGet the Animated value. If the toggle is OFF (default), the method will\nreturn 0. This means that the Carousel doesn’t automatically change\ndisplayed image, and the user needs to click to see the next item.\n\nA non-zero integer value means the Carousel will automatically change\ndisplayed image. The value represents how long each image is displayed\nfor in ms.\n\ntemplate.set_animated(value=0)\n\nSet the Animated value. For an explanation of what this parameter\nrepresents, see the get_animated() method above.\n\ntemplate.get_slide_dots()\n\nGet the Include side dots value. If zero (default), the method returns\n1.  If the number of side dots is larger than the number of items\ndisplayed on the Carousel, a number of dots corresponding to the number\nof items will be displayed. If the number of side dots is smaller than\nthe number of items displayed on the Carousel, it is ignored an no dots\nare displayed.\n\ntemplate.set_slide_dots(value=20)\n\nSet the Include side dots value. For an explanation of what this\nparameter represents, see the get_side_dots() method above.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#sliderrest-object","title":"Template Objects > sliderREST object","text":"sliderREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Slider template\ntype. Its specific methods are:\n\ntemplate.get_map_to_slider()\n\nGet the Selected tags and sort to map to sliders. This function returns\na list where each element corresponds to one tag and its sorting order.\nThe accepted sorted orders are:\n\n‘text_up’: corresponds to Text sort up\n\n‘text_down’: corresponds to Text sort down\n\n‘numeric_up’: corresponds to Numeric sort up\n\n‘numeric_down’: corresponds to Numeric sort down\n\n‘none’: corresponds to No sorting\n\n‘natural_up’: corresponds to Natural sort up\n\n‘natural_down’: corresponds to Natural sort down\n\n‘none’: corresponds to No sorting\n\nAn example of output of this function is: [‘tag1|text_up’,\n‘tag2|numeric_down’, ‘tag3|none’] where the slider is sorted by “tag1”\nusing the “Text sort up” sorting method, then by “tag2” using the\n“Numeric sort down” method and finally by “tag3” using no sorting\nmethod.\n\ntemplate.set_map_to_slider(value=[])\n\nSet the Selected tags and sort to map to sliders. This function takes as\ninput a list where each element corresponds to one tag and its sorting\norder. See function get_map_to_slider() for the accepted sorting order\nvalues. The input for this function will have form:\n\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\n\ntemplate.add_map_to_slider(value=[])\n\nAdd new tags and sorting methods to the the Selected tags and sort to\nmap to sliders. This function takes as input a list where each element\ncorresponds to one tag and its sorting order. See function\nget_map_to_slider() for the accepted sorting order values. The input for\nthis function will have form:\n\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Basic Slider” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child of the template\n“Tabs” in the database running locally on port 8000. These would be the\nlines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#footerrest-object","title":"Template Objects > footerREST object","text":"footerREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Page Footer Layout\ntemplate type. No specific methods.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#headerrest-object","title":"Template Objects > headerREST object","text":"headerREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Page Header Layout\ntemplate type. No specific methods.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#iteratorrest-object","title":"Template Objects > iteratorREST object","text":"iteratorREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Iterator template\ntype. Its specific methods are:\n\ntemplate.get_iteration_tags()\n\nGet the values for Iteration tag and Secondary sorting tag. The values\nare returned as element 0 and 1 of a list.\n\ntemplate.set_iteration_tags(value = [‘’, ‘’])\n\nSet the values for Iteration tag and Secondary sorting tag. The input\nvalues are given as element 0 and 1 of a list, and they need to be\nstrings\n\ntemplate.get_sort_tag()\n\nGet the values for Sort items by tag and Reverse the sort as booleans.\nThe values are returned as element 0 and 1 of a list.\n\ntemplate.set_sort_tag(value=[True, False])\n\nSet the values for Iteration tag and Secondary sorting tag. The values\nare given as a list of booleans. Note that if you set the first element\nto False, the second will automatically be set to False as well,\nregardless of what the input is.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tagpropsrest-object","title":"Template Objects > tagpropsREST object","text":"tagpropsREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Tag to Properties\nLayout template type. No specific methods.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tocrest-object","title":"Template Objects > tocREST object","text":"tocREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Table of Contents\nLayout template type. Its specific methods are:\n\ntemplate.get_toc()\n\nGet the values for Table of Contents, Figure List and Table List. Only\none option can be ON at any given time. The function will return a\nstring that corresponds to the option that is toggled on:\n\n‘toc’: corresponds to Table of Contents option\n\n‘figure’: corresponds to the Figure List option\n\n‘table’: corresponds to the Table List option\n\nIf none of these option is ON (default when the template is created),\nthen the method will return None.\n\ntemplate.set_toc(option=’toc’)\n\nSet the values for Table of Contents, Figure List and Table List. Only\none can be ON at any given time. Only the following values for option\nare accepted:\n\n‘toc’: toggles on the Table of Contents option\n\n‘figure’: toggles on the Figure List option\n\n‘table’: toggles on the Table List option\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#reportlinkrest-object","title":"Template Objects > reportlinkREST object","text":"reportlinkREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Link Report Layout\ntemplate type. Its specific methods are:\n\ntemplate.get_report_link()\n\nGet the guid of the linked report. If no linked report, it will return\nNone\n\ntemplate.set_report_link(link=None)\n\nSet the guid of the linked report. It takes as input a valid guid. If\nyou want to set to link to no report, set the input to None\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#userdefinedrest-object","title":"Template Objects > userdefinedREST object","text":"userdefinedREST object\n\nInherits from TemplateREST, LayoutREST\n\nClass that corresponds to the Userdefined Layout\ntemplate type. This template inserts a named div into the HTML output.\nThis div can be filled with any HTML the user would like.  By default,\nthe HTML content will be filled in with the TemplateREST.set_html()\ncontent (if any).  This content may be placed before or after any\nchild item/layout content.\n\nSpecific properties include:\n\ntemplate.interactive_only: int\n\nIf this property is set to a non-zero value (the default), then the\ndiv will not be included when ADR is outputting PDF, PowerPoint or\nOffline HTML.  If set to zero, it will be included in PDF and Offline\nHTML output.\n\ntemplate.before_children: int\n\nIf this property is set to zero (the default), then any child content\nis placed in the report before the div.  If set to a non-zero value, the\nchildren will be placed in the report after the div.\n\ntemplate.userdef_name: str\n\nThis property is used to specify the value of the div adr_userdefined_template\nattribute.  The default value is unspecified.\n\nFor example, if this property is set to \"Hello\" and the HTML is set\nto <h1>Example</h1> the generated div will look like this:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablemergerest-object","title":"Template Objects > tablemergeREST object","text":"tablemergeREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Merge Generator\ntemplate type. Its specific methods are:\n\ntemplate.get_merging_param()\n\nGet the value of Merging. Possible outputs are:\n\n‘row’: corresponds to Rows\n\n‘column’: corresponds to Columns\n\ntemplate.set_merging_param(value=’row’)\n\nSet the value of Merging. Input needs to be a string: either “row” or\n“column”.\n\ntemplate.get_table_name()\n\nGet the value of Resulting table name.\n\ntemplate.set_table_name(value = ‘’)\n\nSet the value of Resulting table name. Input should be a string.\n\ntemplate.get_sources()\n\nGet the values of the Select source rows/columns. The output is a list\nwhere each element is a different source. Each element has the following\nform: ‘row_name|merge_operation’ where merge_operation can have one of\nthe following values:\n\n‘duplicate’: corresponds to Allow Duplicates\n\n‘merge’: corresponds to Combine Values\n\n‘rename_tag’: corresponds to Rename Using Only Tag\n\n‘rename_nametag’: corresponds to Rename With Name and Tag\n\ntemplate.set_sources(value=[])\n\nSet the values of the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\n\ntemplate.add_sources(value=[])\n\nAdd some values to the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\n\ntemplate.get_rename_tag()\n\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\n\ntemplate.set_rename_tag(value=’’)\n\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\n\ntemplate.get_rename_tag()\n\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\n\ntemplate.set_rename_tag(value=’’)\n\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\n\ntemplate.get_use_labels()\n\nGet the value of the toggle for Use row/column labels as row/column IDs.\nOutput is 0 for toggled OFF, 1 for toggled ON.\n\ntemplate.set_use_labels(value=1)\n\nSet the value of the toggle for Use row/column labels as row/column IDs.\nInput should be an integer: 0 for toggled OFF, 1 for toggled ON.\n\ntemplate.get_use_ids()\n\nGet the value for the Row/Column to use as column/row IDs field.\n\ntemplate.set_use_ids(value=’’)\n\nSet the value for the Row/Column to use as column/row IDs field. Input\nshould be a string. This method will not work if get_use_labels()\nreturns 1.\n\ntemplate.get_id_selection()\n\nGet the value for the Row/Column ID selection. The possible outputs are:\n\n‘all’: corresponds to All IDs\n\n‘intersect’: corresponds to Only Common IDs\n\n‘select’: corresponds to Select Specific IDs\n\ntemplate.set_id_selection(value=’all’)\n\nSet the value for the Row/Column ID selection. Input should be a string\namong the ones listed in the get_id_selection() method.\n\ntemplate.get_ids()\n\nGet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, it will return an empty\nlist. Otherwise, it will return a list where each element is an ID.\n\ntemplate.set_ids(value=[])\n\nSet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\n\ntemplate.add_ids(value=[])\n\nAdd IDs to the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\n\ntemplate.get_unknown_value()\n\nGet the value for Unknown value. It returns a string. Default is ‘nan’.\n\ntemplate.set_unknown_value(value=’nan’)\n\nSet the value for the Unknown value. Input needs to be a string.\n\ntemplate.get_table_transpose()\n\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\n\ntemplate.set_table_transpose(value=0)\n\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\n\ntemplate.get_numeric_output()\n\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\n\ntemplate.set_numeric_output(value=0)\n\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Merged Table” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child of the template\n“Columns” in the database running locally on port 8000. These would be\nthe lines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablereducerest-object","title":"Template Objects > tablereduceREST object","text":"tablereduceREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Reduction\nGenerator template type. Its specific methods\nare:\n\ntemplate.get_reduce_param()\n\nGet the value of Reduce. Possible outputs are:\n\n‘row’: corresponds to Rows\n\n‘column’: corresponds to Columns\n\ntemplate.set_reduce_param(value=’row’)\n\nSet the value of Reduce. Input needs to be a string: either “row” or\n“column”.\n\ntemplate.get_table_name()\n\nGet the value of Resulting table name.\n\ntemplate.set_table_name(value = ‘output_table’)\n\nSet the value of Resulting table name. Input should be a string.\n\ntemplate.get_operations()\n\nGet the values for the Reduce operations as a list. Each element\ncorresponds to a different operation. Each element is a dictionary,\nwhere the following keys are presented:\n\n‘source_rows’: corresponds to the name(s) of the rows/columns used in\nthe operation\n\n‘output_rows’: corresponds to the Output row/column name\n\n‘output_rows_from_values’: False (OFF) / True (ON) for the Use unique\nvalues from a column/row as column/row names\n\n‘output_column_select’: corresponds to the “Select columns/rows”\nfield\n\n‘output_columns’: corresponds to the Column/Row name field\n\n‘output_columns_from_values’: False (OFF) / True (ON) for the Use\nunique values from a column/row as a new columns/rows toggle\n\n‘operation’: corresponds to the Operation field. Possible values:\n\n‘min’: Minimum\n\n‘max’: Maximum\n\n‘count’: Count\n\n‘sum’: Sum\n\n‘diff’: Difference\n\n‘mean’: Mean\n\n‘stdev’: Standard deviation\n\n‘skew’: Skew\n\n‘kurtosis’: Kurtosis\n\ntemplate.delete_operation(name = [])\n\nMethod to remove an entire Reduce operation. Takes as input a list with\nthe name(s) of the source rows/columns used in the operation. So for\nexample to delete the third Reduce operation from the following panel:\n\nuse:\n\nTo delete the first operation, use:\n\nAdd a new Reduce operation.\n\n‘name’: corresponds to the name(s) of the rows/columns used in the\noperation. Input needs to be a list of strings\n\n‘unique’: corresponds to the Use unique values from a column as row\nnames toggle. False is OFF, True is ON\n\noutput_name: corresponds to the Output row/column name.\n\nexisting: corresponds to the Use existing columns/rows toggle. False\nif OFF, True is ON.\n\nselect_names. If existing is set to True, it is used for the Selected\ncolumns/rows field. If existing is set to False, this field is used\nfor the Column/Row name.\n\noperation: corresponds to the operation field. See get_operation()\nfor the acceptable values.\n\nFor example to create the operation in the following widget:\n\nyou would run:\n\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\n\ntemplate.set_table_transpose(value=0)\n\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\n\ntemplate.get_numeric_output()\n\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\n\ntemplate.set_numeric_output(value=0)\n\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “ASCII reduce” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child of the template\n“Merge reduce example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablemaprest-object","title":"Template Objects > tablemapREST object","text":"tablemapREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Map\nGenerator template type. Its specific methods\nare:\n\ntemplate.get_map_param()\n\nGet the value of Map. Possible outputs are:\n\n‘row’: corresponds to Rows\n\n‘column’: corresponds to Columns\n\ntemplate.set_map_param(value=’row’)\n\nSet the value of Map. Input needs to be a string: either “row” or\n“column”.\n\ntemplate.get_table_name()\n\nGet the value of Resulting table name.\n\ntemplate.set_table_name(value = ‘output_table’)\n\nSet the value of Resulting table name. Input should be a string.\n\ntemplate.get_operations()\n\nGet the values for the Map operations as a list. Each element\ncorresponds to a different operation. Each element is a dictionary,\nwhere the following keys are presented:\n\n‘source_rows’: corresponds to the name(s) of the rows/columns used in\nthe operation\n\n‘output_rows’: corresponds to the Output row/column name\n\n‘output_columns_select’: corresponds to the “Select columns/rows”\nfield\n\n‘function’: corresponds to the Function field. Allowed functions are:\n\n‘+’: Addition\n\n‘-’: Subtraction\n\n‘*’: Multiplication\n\n‘/’: Division\n\n‘^’: Power\n\n‘abs()’: Absolute Value\n\n‘exp()’: Exponent\n\n‘log()’: Logarithm\n\ntemplate.delete_operation(name = [])\n\nMethod to remove an entire Map operation. Takes as input a list with\nthe name(s) of the source rows/columns used in the operation. So for\nexample to delete the third Map operation from the following panel:\n\nuse:\n\nTo delete the first operation, use:\n\ntemplate.add_operation(name=None, output_name=”output row”, select_names=”*”, function=”value”)\n\nAdd a new Map operation.\n\n‘name’: corresponds to the name(s) of the rows/columns used in the\noperation. Input needs to be a list of strings\n\n‘output_name’: corresponds to the Output row/column name.\n\n‘select_names’: corresponds to the name(s) of the selected rows/columns in the output.\n\n‘function’: corresponds to the operation field. See get_operations()\nfor the allowed functions.\n\nFor example to create the operation in the following widget:\n\nyou would run:\n\ntemplate.get_table_transpose()\n\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\n\ntemplate.set_table_transpose(value=0)\n\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\n\ntemplate.get_numeric_output()\n\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\n\ntemplate.set_numeric_output(value=0)\n\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture:\n\nLet’s also assume you want this template to be a child of the template\n“Merge” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablerowcolumnfilterrest-object","title":"Template Objects > tablerowcolumnfilterREST object","text":"tablerowcolumnfilterREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Row/Column Filter\nGenerator template type. Its specific\nmethods are:\n\ntemplate.get_table_name()\n\nGet the value of New table name.\n\ntemplate.set_table_name(value = ‘output_table’)\n\nSet the value of New table name. Input should be a string.\n\ntemplate.get_filter_rows()\n\nGet the value of Rows… The values are returned as a list of strings,\nwhere each element corresponds to a row value.\n\ntemplate.set_filter_rows(value=[’*’])\n\nSet the value of Rows… The input value needs to be a list of strings,\nwhere each element corresponds to a different row value.\n\ntemplate.add_filter_rows(value=[’*’])\n\nAdd new values to the value of Rows… The input value needs to be a\nlist of strings, where each element corresponds to a different row\nvalue.\n\ntemplate.get_filter_columns()\n\nGet the value of Columns… The values are returned as a list of\nstrings, where each element corresponds to a column value.\n\ntemplate.set_filter_columns(value=[’*’])\n\nSet the value of Columns… The input value needs to be a list of\nstrings, where each element corresponds to a different column value.\n\ntemplate.add_filter_columns(value=[’*’])\n\nAdd new values to the value of Columns… The input value needs to be a\nlist of strings, where each element corresponds to a different column\nvalue.\n\ntemplate.get_invert()\n\nGet the value of Select the rows/columns to remove. Returns 0 or False\nif it is toggled OFF, 1 or True if it is toggled ON\n\ntemplate.set_invert(value=False)\n\nSet the value of Select the rows/columns to remove. Set it to 0 or False\nto toggle OFF, set to 1 or True to toggle ON\n\ntemplate.get_sort()\n\nGet the value of Sort rows/columns by selection order. Returns 0 or\nFalse if it is toggled OFF, 1 or True if it is toggled ON\n\ntemplate.set_sort(value=False)\n\nSet the value of Sort rows/columns by selection order. Set it to 0 or\nFalse to toggle OFF, set to 1 or True to toggle ON. This method works\nonly if the Select the rows/columns to remove is toggled OFF.\n\ntemplate.get_table_transpose()\n\nGet the value of Transpose the output table. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\n\ntemplate.set_table_transpose(value=False)\n\nSet the value of Transpose the output table. Set it to 0 or False to\ntoggle OFF, set to 1 or True to toggle ON\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Filter” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child of the template\n“RC Filter Generator” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablevaluefilterrest-object","title":"Template Objects > tablevaluefilterREST object","text":"tablevaluefilterREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Value Filter\nGenerator template type. Its specific methods\nare:\n\ntemplate.get_table_name()\n\nGet the value of New table name.\n\ntemplate.set_table_name(value = ‘value filtered table’)\n\nSet the value of New table name. Input should be a string.\n\ntemplate.get_filter_by()\n\nGet the value of Filter by values in as a list. The first element is\n‘column’ (default) or ‘row’. The second element of the list of the\nnumber of row/column set in the following field.\n\ntemplate.set_filter_by(value = [‘column’, ‘0’])\n\nSet the value of Filter by values in as a list. The first element needs\nto be ‘column’ or ‘row’. The second element of the list of the number of\nrow/column set in the following field, and needs to be a string.\n\ntemplate.get_filter_value()\n\nGet the value of Filter. Each different type of filter will return a\ndifferent type of output:\n\n‘Range of values’: it returns a list of three elements. The first\nelement is ‘range’. The second and third are strings that represent\nthe min. and max. of the range.\n\n‘Specific values’: it returns a list of two elements. The first\nelement is “specific”. The second element is a list of strings. Each\nelement in this second list is one entry in the Select specific\nvalues… field\n\n‘Upper % of values’: it returns a list of two elements. The first\nelement is “top_percent”. The second element is a float that\ncorresponds to the Upper percent of values field.\n\n‘Upper # of values’: it returns a list of two elements. The first\nelement is “top_count”. The second element is an integer that\ncorresponds to the Upper number of values field.\n\n‘Lower % of values’: it returns a list of two elements. The first\nelement is “bot_percent”. The second element is a float that\ncorresponds to the Lower percent of values field.\n\n‘Lower # of values’: it returns a list of two elements. The first\nelement is “bot_count”. The second element is an integer that\ncorresponds to the Lower number of values field.\n\ntemplate.set_filter_value(value=[‘range’, ‘’, ‘’])\n\nSet the value of Filter. Each different type needs a different type of\ninput. See the description of get_filter_value() possible outputs to know the\ndetails of the accepted formats.\n\ntemplate.get_invert_filter()\n\nGet the value of Invert filter sense. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\n\ntemplate.set_invert_filter(value=False)\n\nSet the value of Invert filter sense. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\n\ntemplate.get_values_as_dates()\n\nGet the value of Treat values as dates. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\n\ntemplate.set_values_as_dates(value=False)\n\nSet the value of Treat values as dates. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child template of the\ntemplate “Value Filter Example” that already exists in in the database\nrunning locally on port 800. These would be the lines of code to create\nthe new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#tablesortfilterrest-object","title":"Template Objects > tablesortfilterREST object","text":"tablesortfilterREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Table Row/Column Sort\nGenerator template type. Its specific methods\nare:\n\ntemplate.get_table_name()\n\nGet the value of New table name.\n\ntemplate.set_table_name(value = ‘value filtered table’)\n\nSet the value of New table name. Input should be a string.\n\ntemplate.get_sort_rows()\n\nGet the Select columns to sort rows by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the row name to sort by.\n\ntemplate.set_sort_rows([])\n\nSet the Select columns to sort rows by. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the row to sort by. Example: setting the sort\nfields to be by increasing row “temperature” and decreasing by row\n“pressure” becomes: [‘+temperature’, ‘-pressure’]\n\ntemplate.add_sort_rows([])\n\nAdd the Select columns to sort rows by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\n\ntemplate.get_sort_columns()\n\nGet the Select rows to sort columns by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the column name to sort by.\n\ntemplate.set_sort_columns([])\n\nSet the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\n\ntemplate.add_sort_columns([])\n\nAdd the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\n\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Sorted” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\n\nLet’s also assume you want this template to be a child of the template\n“RC Sort Filter Example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#sqlqueriesrest-object","title":"Template Objects > sqlqueriesREST object","text":"sqlqueriesREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the SQL Query Generator\ntemplate type. Its specific methods are:\n\ntemplate.get_db_type()\n\nGet the Database type. Possible outputs are: SQLite / PostgreSQL\n\ntemplate.set_db_type(value=’SQLite’)\n\nSet the Database type. Input needs to be a string. Only two acceptable\nvalues: ‘SQLite’ or ‘PostgreSQL’\n\ntemplate.get_sqlite_name()\n\nGet the SQLite filename.\n\ntemplate.set_sqlite_name(value=’’)\n\nSet the SQLite filename. Input needs to be a string. The method will not\nwork if the Database type is set to PostgreSQL\n\ntemplate.get_postgre()\n\nGet the PostgreSQL parameters. This method returns a dictionary with\nfive entries, corresponding to:\n\nDatabase name:\n\nHostname:\n\nPort:\n\nUsername:\n\nPassword:\n\ntemplate.set_postgre(value = {‘database’: ‘’,\n‘hostname’:’localhost’, ‘port’: ‘5432’, ‘username’:’nexus’,\n‘password’:’cei’})\n\nSet the the PostgreSQL parameters. Input needs to be a dictionary with\nthe keys: ‘database’, ‘hostname’, ‘port’, ‘username’, ‘password’. Note\nthat all keys are strings. See get_postgre() method for the description\nof each element. The method will not work if the Database type is set to\nSQLite\n\ntemplate.get_query()\n\nGet theSQL query text: field.\n\ntemplate.set_query(value=’’)\n\nSet theSQL query text: field. Input needs to be a string. Note that no\ncheck on the validity of the SQL query itself is performed. It is up to\nthe user to make sure the query is properly formatted.\n\ntemplate.validate()\n\nValidate the database. This method should be run after all the\nparameters for the database connection have been set. The method\nreturns:\n\nBoolean parameter: True is the database can be validated, False\notherwise.\n\nError message: If the connection is validated, this will be an empty\nstring. Otherwise, and error message with more details about the\nfailure will be returned.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#mergetreerest-object","title":"Template Objects > mergetreeREST object","text":"mergetreeREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Tree Merge Generator\ntemplate type. Its specific methods are:\n\ntemplate.get_merge_rule()\n\nGet the row merging rule.\n\ntemplate.set_merge_rule(value=’all’)\n\nSet the row merging rule. Legal values: ‘all’, ‘common’, ‘first’\n\ntemplate.get_match_rule()\n\nGet the rule for matching rows.\n\ntemplate.set_match_rule(value=’both’)\n\nSet the rule for matching rows. Legal values: ‘key’, ‘name’, ‘both’\n\ntemplate.get_tree_name()\n\nGet the name that the generated tree will be given.\n\ntemplate.set_tree_name(value=’treemerge’)\n\nSet the name that the generated tree will be given. Input needs to be a\nstring.\n\ntemplate.get_fill_value()\n\nGet the value to be used to fill unknown cells.\n\ntemplate.set_fill_value(value=’’)\n\nSet the value to be used to fill unknown cells. Input needs to be a\nstring.\n\ntemplate.get_header_tag()\n\nGet the name of the tag (if any) to be used to generate an output tree\nheader.\n\ntemplate.set_header_tag(value=’’)\n\nSet the name of the tag to be used to generate an output tree header.\nInput needs to be a string. An empty string (the default) specifies that\nno tree header be generated.\n\n"},{"objectID":"Home","href":"lowlevelapi/TemplateObjects.html#statisticalrest-object","title":"Template Objects > statisticalREST object","text":"statisticalREST object\n\nInherits from TemplateREST, GeneratorREST\n\nClass that corresponds to the Statistical Analysis Generator\ntemplate type. Its specific methods are:\n\ntemplate.get_analysis_type()\n\nGet the type of statistical analysis\n\nTemplate.set_analysis_type(value=””)\n\nSet the type of statistical analysis.\nOnly “Linear Regression” is supported.\n\nTemplate.get_table_name()\n\nGet the name of the output table.\n\nTemplate.set_table_name(value=””)\n\nSet the name of the output table. Input must be a string.\n\nTemplate.get_tree_name()\n\nGet the name of the output tree with statistical parameters values.\n\nTemplate.set_tree_name(value=””)\n\nSet the name of the output tree with statistical parameters values.\nInput must be a string.\n\nTemplate.set_predictor_variables(value)\n\nSet the predictor variables. The input needs to be a list,\nwith each element a list of length 3.\nThe elements of the sub-lists must be:\n\nType. Only “row” is currently supported.\n\nVariable predictor name.\n\nOutput row name.\n\nTemplate.get_predictor_variables()\n\nGet the list of predictor variables.\nReturns a list where each element is a sub-list of\n3 elements (type, predictor name, output name)\n\nTemplate.set_response_variables(value=””)\n\nSet the response variables. Input must be a list of sub-lists,\neach with two elements:\n\nResponse variable name\n\nOutput row name\n\nTemplate.get_response_variables()\n\nGet the response variable list. Each element is a sub-list\nwith two elements each.\n\nTemplate.set_analysis_params(value=””)\n\nSet the parameters for the statistical analysis.\nCurrently not supported.\n\nTemplate.get_analysis_params()\n\nGet the parameters for the statistical algorithm."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.stop.html#stop","title":"stop","text":"stop\n\n\n\nService.stop() -> None\n\nStop the service connected to the session.\n\nExamples"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nthis guide before attempting to contribute to PyDnamicReporting."},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyDnamicReporting Issues\npage to submit questions, report bugs, and request new features.\n\nTo reach the project support team, email pyansys.core@ansys.com."},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nPyDynamicReporting is compliant with the Coding style described in the\nPyAnsys Developer’s Guide. It uses the tool\npre-commit to align the code style. You can\ninstall and activate this tool with these commands:\n\nYou can then directly execute pre-commit with\nthis command:"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot_zaxis_type.html#plot_zaxis_type","title":"plot_zaxis_type","text":"plot_zaxis_type\n\n\n\nItem.plot_zaxis_type\n\nZ axis style\n\nlinear log"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.xtitle.html#xtitle","title":"xtitle","text":"xtitle\n\n\n\nItem.xtitle\n\nX axis title\n\nA title for the x axis"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.yaxis_format.html#yaxis_format","title":"yaxis_format","text":"yaxis_format\n\n\n\nItem.yaxis_format\n\nY axis text format\n\nFormat for the y axis tick labels. Example: floatdot2"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.export_json.html#export_json","title":"export_json","text":"export_json\n\n\n\nReport.export_json(json_file_path: str) -> None\n\nExport this report to a JSON-formatted file.\n\nParameters\n\njson_file_path\n\npython:str\n\nPath of the JSON file to be exported to.\n\nReturns\n\nNone.\n\n\n\nExamples"},{"objectID":"Home","href":"examples/25-intermediate/01-queries.html#item-queries","title":"Item queries","text":"Item queries\n\nThe Ansys Dynamic Reporting database can contain any number of items, from a few\nto tens of thousands. To handle all this data, the queryansys.dynamicreporting.core.Service.query>()\nmethod allows you to quickly slice the database to select a subset of items.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/25-intermediate/01-queries.html#start-an-ansys-dynamic-reporting-service","title":"Item queries > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory."},{"objectID":"Home","href":"examples/25-intermediate/01-queries.html#create-items","title":"Item queries > Create items","text":"Create items\n\nNow that an Ansys Dynamic Reporting service is running on top of a\nnew database, you can populate it. We will download and push to the database\n14 images.We will then set some different names, sources, and\ntags based on the image names"},{"objectID":"Home","href":"examples/25-intermediate/01-queries.html#query-the-database","title":"Item queries > Query the database","text":"Query the database\n\nNow that the database is populated with a few items with different\nnames, sources, and tags, query the database, beginning with an empty\nquery that returns the entire set (all 14 items). Next, query on the\nsource name, which results in three different lists, with 6, 4, and 4 items\nrespectively. Query on the var and clip taga. See that the lists\nhave the expected length. You can try different queries using other attributes.\n#"},{"objectID":"Home","href":"examples/25-intermediate/01-queries.html#close-the-service","title":"Item queries > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 01-queries.ipynb\n\nDownload Python source code: 01-queries.py\n\nDownload zipped: 01-queries.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_search.html#table_search","title":"table_search","text":"table_search\n\n\n\nItem.table_search\n\nSearch values\n\nVisibility of table value search field.  Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.row_tags.html#row_tags","title":"row_tags","text":"row_tags\n\n\n\nItem.row_tags\n\nList of tags for each table row"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.html#item","title":"Item","text":"Item\n\n\n\nclass ansys.dynamicreporting.core.Item(service: ADR = None, obj_name: str | None = 'default', source: str | None = 'ADR')\n\nProvides for creating an object that represents an Ansys Dynamic Reporting item.\n\nCreate an instance of this class for each item in the database that you want to\ninteract with. When the object is created, no type is set. The type, determined the\nfirst time that you set the item_* attribute, cannot be changed.\n\nThis code creates an instance with the object my_txt as a text item:\n\n>>> my_txt = adr_service.create_item()\n>>> my_txt.item_text = '<h1>The test</h1>This is a text item'\n\nThe type of the item created in the preceding code cannot be changed. However,\nthe attributes describing the object can be reset at any time. These changes are\nautomatically propagated into the database. The attributes described in the\nfollowing “Parameters” section can be used to control the rendering of these objects.\n\nThese attributes mirror the generic data item attributes described in\nData Items in the documentation for Ansys Dynamic Reporting.\n\n\n\nParameters\n\nservice\n\nansys.dynamicreporting.core.Service, optional\n\nAnsys Dynamic Reporting object that provides the connection to the database\nthat the item is to interact with. The default is None.\n\nobj_name\n\npython:str, optional\n\nName of the item object in the database. The default is default.\n\nsource\n\npython:str, optional\n\nName of the source for the item in the database. The default is \"ADR\".\n\nExamples\n\nInitialize the Service class inside an Ansys Dynamic Reporting service and\ncreate an object as a text item:\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.yrange.html#yrange","title":"yrange","text":"yrange\n\n\n\nItem.yrange\n\nY axis range\n\nThe range for the y axis. Example: 0.  10."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.url.html#url","title":"url","text":"url\n\n\n\nproperty Item.url\n\nURL corresponding to the item"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.set_tags.html#set_tags","title":"set_tags","text":"set_tags\n\n\n\nItem.set_tags(tagstring: str = '') -> bool\n\nSet tags on the item.\n\nParameters\n\ntagstring\n\npython:str, optional\n\nTags to set on the item. Separate multiple tags with a space. The\ntag syntax is tagname=value.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples"},{"objectID":"Home","href":"examples/50-advanced/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 3 files from examples/50-advanced:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_50-advanced_00-complete_report.py (00-complete_report.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py (01-two_simulation_same_db.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_50-advanced_02-customized_report_embed.py (02-customized_report_embed.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.item_animation.html#item_animation","title":"item_animation","text":"item_animation\n\n\n\nItem.item_animation\n\nAnimation file (MP4/H.264 format files)"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_title.html#table_title","title":"table_title","text":"table_title\n\n\n\nItem.table_title\n\nTable title\n\nThe title of the table"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.xaxis_format.html#xaxis_format","title":"xaxis_format","text":"xaxis_format\n\n\n\nItem.xaxis_format\n\nX axis text format\n\nFormat for the x axis tick labels. Example: floatdot2"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.bar_gap.html#bar_gap","title":"bar_gap","text":"bar_gap\n\n\n\nItem.bar_gap\n\nBar charts bar gap\n\nThe bar gap of the bar chart float type. Range: 0  1"},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#sessions-and-datasets","title":"Sessions and Datasets","text":"Sessions and Datasets"},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#conceptual-overview","title":"Sessions and Datasets > Conceptual Overview","text":"Conceptual Overview\n\nIn this API, a Session represents a logical grouping or “push” of data from an external source\n(such as a solver or post-processor) into the ADR system. It captures metadata about when, where,\nand how the data was ingested.\n\nA Dataset contains the metadata about actual simulation or analysis data associated with a Session.\n\nBy associating report items with Sessions and Datasets, the API maintains clear context and\nprovenance, enabling organized, meaningful reports that trace back to the original data source.\n\nThis API provides methods to create, manage, and fetch Sessions and Datasets to support\nflexible and efficient report generation workflows."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#key-entities","title":"Sessions and Datasets > Key Entities","text":"Key Entities\n\nSession: Stores metadata about the session or logical grouping of data imported into ADR during a single data push or analysis run, such as date, hostname, platform, and application version.\n\nDataset: Stores metadata about the dataset or collection of simulation or analysis data, such as files, formats, and element counts."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#session-and-dataset-properties-and-metadata","title":"Sessions and Datasets > Session and Dataset Properties and Metadata","text":"Session and Dataset Properties and Metadata\n\nSessions and Datasets include important properties and metadata fields that help organize and contextualize your data:\n\nSession properties:\n\nguid: Unique identifier for the session.\n\ndate: Timestamp of when the session was created or recorded.\n\nhostname: The machine or environment where the data push originated.\n\nplatform: Operating system or platform information.\n\napplication: Name of the application or tool that created the session.\n\nversion: Version of the application or tool.\n\ntags: Space-separated string of key or key=value tags for filtering and classification.\n\nDataset properties:\n\nguid: Unique identifier for the dataset.\n\nfilename: Name of the data file associated with the dataset.\n\ndirname: Directory path or location related to the dataset.\n\nformat: Data format descriptor (e.g., CDB, CSV).\n\nnumparts: Number of parts or segments in the dataset.\n\nnumelements: Number of elements (e.g., mesh elements) in the dataset.\n\ntags: Space-separated string of key or key=value tags for filtering and classification.\n\nBoth Sessions and Datasets play a key role in associating your report items with the proper data context and provenance."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#creating-sessions-and-datasets","title":"Sessions and Datasets > Creating Sessions and Datasets","text":"Creating Sessions and Datasets\n\nYou can create new sessions and datasets using the create class method, which\nsaves the object to the database immediately."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#setting-defaults-in-adr","title":"Sessions and Datasets > Setting Defaults in ADR","text":"Setting Defaults in ADR\n\nThe ADR singleton instance keeps track of default session and dataset objects.\nThis helps when creating report items without specifying them explicitly."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#accessing-current-session-and-dataset","title":"Sessions and Datasets > Accessing Current Session and Dataset","text":"Accessing Current Session and Dataset\n\nYou can also access the current session and dataset through the ADR instance:"},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#fetching-existing-sessions-and-datasets","title":"Sessions and Datasets > Fetching Existing Sessions and Datasets","text":"Fetching Existing Sessions and Datasets\n\nYou can fetch existing sessions or datasets by GUID or filter queries."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#using-sessions-and-datasets-when-creating-items","title":"Sessions and Datasets > Using Sessions and Datasets When Creating Items","text":"Using Sessions and Datasets When Creating Items\n\nWhen you create report items, the current default session and dataset are used\nunless you specify different ones explicitly."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#lifecycle-notes","title":"Sessions and Datasets > Lifecycle Notes","text":"Lifecycle Notes\n\nSessions and datasets must be saved before creating dependent items.\n\nChanging the default session or dataset affects all subsequent item creations\nthat rely on defaults.\n\nYou can delete sessions or datasets if they are no longer needed, but ensure\nassociated items are handled appropriately."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#exceptions-and-validation","title":"Sessions and Datasets > Exceptions and Validation","text":"Exceptions and Validation\n\nCreating or modifying sessions and datasets will raise errors if required fields\nare missing or invalid.\n\nQuerying items with incorrect syntax or unsupported operations raises an ADRException.\n\nFetching non-existent sessions or datasets by GUID raises a DoesNotExist error.\n\nMultiple objects returned for a single fetch raises a MultipleObjectsReturned error."},{"objectID":"Home","href":"serverless/sessions_and_datasets.html#summary","title":"Sessions and Datasets > Summary","text":"Summary\n\nSessions and Datasets provide the structural context for your report items and\nallow you to organize simulation data meaningfully.\n\nNext, learn about the different kinds of report items you can create in the\nitems guide."},{"objectID":"Home","href":"serverless/instantiation.html#instantiation","title":"Instantiation","text":"Instantiation\n\nServerless ADR supports several ways to instantiate the main ADR object depending on your use case."},{"objectID":"Home","href":"serverless/instantiation.html#single-sqlite-database-recommended","title":"Instantiation > Single SQLite Database (Recommended)","text":"Single SQLite Database (Recommended)\n\nThis method creates or uses a local SQLite database directory.\n\nIf the specified directory does not exist, it and a media subdirectory will be created automatically."},{"objectID":"Home","href":"serverless/instantiation.html#multiple-databases","title":"Instantiation > Multiple Databases","text":"Multiple Databases\n\nUse this method when working with multiple databases, e.g., PostgreSQL or database copies."},{"objectID":"Home","href":"serverless/instantiation.html#in-memory-mode","title":"Instantiation > In-Memory Mode","text":"In-Memory Mode\n\nUseful for testing and ephemeral workflows where persistence is not needed.\n\nNote:\n\nNo files are persisted to disk.\n\nBackup and restore operations are not supported.\n\nMedia and static files use temporary memory locations.\n\nData is lost when the process exits."},{"objectID":"Home","href":"serverless/instantiation.html#docker-based-instantiation","title":"Instantiation > Docker-Based Instantiation","text":"Docker-Based Instantiation\n\nUse a Docker image to run ADR in containerized environments."},{"objectID":"Home","href":"serverless/instantiation.html#legacy-environment-variable-configuration","title":"Instantiation > Legacy Environment Variable Configuration","text":"Legacy Environment Variable Configuration\n\nSupported for backward compatibility but not recommended for new projects."},{"objectID":"Home","href":"serverless/instantiation.html#important-notes","title":"Instantiation > Important Notes","text":"Important Notes\n\nAlways call adr.setup() once per process before using other ADR APIs.\n\nIn multi-threaded applications, a single call to setup() per process suffices.\n\nFor multi-process scenarios, each process must call setup() independently.\n\nFor more usage examples, see the examples section."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.format_row.html#format_row","title":"format_row","text":"format_row\n\n\n\nItem.format_row\n\nRow labels format\n\nformat for row labels scientific sigfigsX floatdotX str date_XY"},{"objectID":"Home","href":"serverless/deleting_objects.html#deleting-objects","title":"Deleting Objects","text":"Deleting Objects\n\nServerless ADR provides robust APIs for deleting report-related objects, including Items, Templates, Sessions, and Datasets. These operations allow you to remove outdated or unnecessary data from your reporting system efficiently."},{"objectID":"Home","href":"serverless/deleting_objects.html#deletion-methods","title":"Deleting Objects > Deletion Methods","text":"Deletion Methods\n\nDeleting Individual Objects\n\nEvery model instance exposes a .delete() method that permanently removes that object from the database.\n\nExample:\n\nDelete Multiple Objects via Query\n\nQuery sets (ObjectSet) returned by filter(), find(), or ADR’s query() method support a bulk .delete() method that deletes all objects in the set."},{"objectID":"Home","href":"serverless/deleting_objects.html#example-usage-patterns","title":"Deleting Objects > Example Usage Patterns","text":"Example Usage Patterns\n\nDeleting a Single Session:\n\nDeleting Multiple Datasets by Tag:\n\nDeleting Sessions by Tag\n\nDeleting Datasets with Specific Filename Patterns\n\nDeleting Templates by Name"},{"objectID":"Home","href":"serverless/deleting_objects.html#important-notes-and-caveats","title":"Deleting Objects > Important Notes and Caveats","text":"Important Notes and Caveats\n\nAutomatic Cascading:\nDeleting a Template automatically deletes its child templates but not the associated Items.\nSimilarly, deleting a Session or Dataset will delete dependent Items.\n\nPermanent Action:\nDeletions are irreversible through the API. Always ensure that critical data is backed up before deletion.\n\nPermissions:\nEnsure you have proper database access permissions to perform deletion operations.\n\nQuery Precision:\nUse precise query filters to prevent accidental mass deletions."},{"objectID":"Home","href":"serverless/deleting_objects.html#error-handling","title":"Deleting Objects > Error Handling","text":"Error Handling\n\nDoesNotExist Exception:\nRaised when .delete() is called on an object that no longer exists in the database.\n\nDatabase Integrity Errors:\nIf database constraints prevent deletion (e.g., foreign key constraints), exceptions will be raised. Handle these to avoid partial deletions.\n\nInvalid Query Filters:\nMalformed or unsupported query filters will raise an ADRException during query or delete calls."},{"objectID":"Home","href":"serverless/deleting_objects.html#best-practices","title":"Deleting Objects > Best Practices","text":"Best Practices\n\nPreview Objects Before Deletion:\nAlways iterate over query results or inspect objects before deleting to confirm correctness.\n\nBackup Important Data:\nBefore bulk deletes, create database backups or export data.\n\nUse Soft Deletes If Needed:\nIf deletion safety is a concern, consider implementing a “soft delete” flag in your application logic.\n\nClean-Up Orphaned Data:\nAfter deletion, ensure no orphaned references remain that could cause errors."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.height.html#height","title":"height","text":"height\n\n\n\nItem.height\n\nChart height\n\nChart height in pixels"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot_title.html#plot_title","title":"plot_title","text":"plot_title\n\n\n\nItem.plot_title\n\nPlot title\n\nThe title of the plot"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.marker_text_rowname.html#marker_text_rowname","title":"marker_text_rowname","text":"marker_text_rowname\n\n\n\nItem.marker_text_rowname\n\nMarker text row name\n\nShould the row name be appended to the marker text: 0|1|undefined"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.export_html.html#export_html","title":"export_html","text":"export_html\n\n\n\nReport.export_html(directory_name: str = '', query_params: dict | None = None, item_filter: str | None = None, filename: str | None = 'index.html', no_inline_files: bool | None = False) -> bool\n\nExport report as static HTML.\n\nParameters\n\ndirectory_name\n\npython:str\n\nPath for the HTML export directory\n\nquery_params\n\npython:dict, optional\n\nDictionary for parameters to apply to report template. Default: None\n\nitem_filter: str, optional\n\nString corresponding to query to run on the database items before rendering the report.\nDefault: None\n\nfilename\n\npython:str, optional\n\nFilename for the exported static HTML file. Default: index.html\n\nno_inline_files\n\nbool, optional\n\nIf True, the information is exported as stand alone files instead of in line content\nin the static HTML. Default: False\n\nReturns\n\nbool\n\nSuccess status of the HTML export: True if it worked, False otherwise\n\nExamples"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#data-item-object","title":"Data Item Object","text":"Data Item Object\n\n"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#report_objectsitemrest-object","title":"Data Item Object > report_objects.ItemREST object","text":"report_objects.ItemREST object\n\nThis object is a Python representation of an Ansys Dynamic\nReporting data item object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#data-members","title":"Data Item Object > Data members","text":"Data members\n\nThe following attributes are available on an ItemREST object:\n\nguid - string GUID. The default is str(uuid.uuid1())\n\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\n\nsequence - An integer sequence number that can be used for\nsorting/indexing in a report\n\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\n\nname - The name of the data object, a string\n\nsource - The source of the data object, a string\n\nsession - string GUID of a SessionREST object that already exists in\nthe database\n\ndataset - string GUID of a DatasetREST object that already exists in\nthe database"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#methods","title":"Data Item Object > Methods","text":"Methods\n\nitem.set_tags(tagstring)\n\nSet the tags for the item to the passed string. Multiple tags are\nspace-separated.\n\nitem.get_tags()\n\nReturns the tags string for this object. Multiple tags are\nspace-separated.\n\nitem.add_tag(tag, value=None)\n\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\n\nitem.rem_tag(tag)\n\nRemove the tag (and any potential associated value) from the current tag\nstring.\n\nhas_file = item.is_file_protocol()\n\nThis method returns True if the data item refers to an actual file on\nthe server. Currently the ItemRest.type values of ItemREST.type_img,\nItemREST.type_scn, ItemREST.type_anim and ItemREST.type_file all refer\nto files.\n\nOnce all of the metadata attributes listed above are set, an actual data\npayload needs to be set for the data item. There are convenience methods\nto set the item type and fill in the payload data.\n\ncontent = item.get_payload_content()\n\nFor Items that have been fetched using the Server object, this method\nallows you to get the payload without having to manually decode the\npayload data.\n\nAn example of the use of this method is shown below:"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#animation-item","title":"Data Item Object > Animation Item","text":"Animation Item\n\nitem.set_payload_animation(mp4_filename)\n\nThis method sets the item payload to an animation. The “mp4_filename”\nargument should be the name of a .mp4 encoded video file. Note: the file\nmust exist on disk before this call is made and must stay on disk until\nthe item is pushed to the ADR Nexus server."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#file-item","title":"Data Item Object > File Item","text":"File Item\n\nitem.set_payload_file(filename)\n\nThis method sets the item payload to the content of an arbitrary file on\ndisk. The argument should be the name of a file to be uploaded. Note:\nthe file must exist on disk before this call is made and must stay on\ndisk until the item is pushed to the ADR Nexus server."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#html-item","title":"Data Item Object > HTML Item","text":"HTML Item\n\nitem.set_payload_html(html_text)\n\nThis will set the item payload to HTML formatted text."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#image-item","title":"Data Item Object > Image Item","text":"Image Item\n\nitem.set_payload_image(image)\n\nThis method sets the item payload to an image. The argument can be one\nof three things: the binary representation of a .png file on disk as a\nstring, a QImage object or an enve.image object. Examples are shown\nbelow:\n\nA string which is the binary data representation of the image. Note:\nthis is the only format supported in a Python interpreter that lacks\nthe PyQt and enve modules.\n\nA Qt QImage object instance\n\nAn enve image object instance"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#none-item","title":"Data Item Object > None Item","text":"None Item\n\nitem.set_payload_none()\n\nBy default an item has no payload. This method will reset the item to\nthat state. It is legal to push an item without a data payload into the\nserver."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#scene-item","title":"Data Item Object > Scene Item","text":"Scene Item\n\nitem.set_payload_scene(filename)\n\nThis method sets the item payload to the 3D geometry found in the passed\nfilename.  Supported geometry formats include: EnSight CSF, STL, PLY,\nSCDOC, SCDOCX, OBJ and AVZ format files."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#string-item","title":"Data Item Object > String Item","text":"String Item\n\nitem.set_payload_string(string)\n\nThis will set the item payload to an ASCII string."},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#table-item","title":"Data Item Object > Table Item","text":"Table Item\n\nitem.set_payload_table(dictionary)\n\nThis will set the item payload to be a table, the table being specified\nin a dictionary. Minimally, the dictionary must contain a single numpy\narray with the ‘array’ key. There are a few restrictions on this array.\nFirst, it must be 2D. Second, the dtype of the array should be\nnumpy.float32, numpy.double or a string (dtype=”|S20”).\n\nOther table properties (e.g. row/column labels, text formatting, etc)\ncan also be set in this dictionary. A simple example:\n\nIf the external Python API is being used from within EnSight, it is also\npossible to pass an ENS_PLOTTER object to the set_payload_table()\nmethod. It will capture not only the data in the plots, but many of the\nplotter attributes. One example might be:\n\nMany more table properties exist and can be set as the default values\nfor a table by setting same-named keys in the dictionary. The properties\nare documented in the item properties section described in Table\nin the documentation for Ansys Dynamic Reporting.\n\nA shortcut API exists for a common case:\n\nThis is a shortcut for the following two lines of python:\n\nNote this can be handy for cases like:\n\nwhere one does not want to work with numpy and prefers to pass lists of\nlists. The core API will convert the list of lists into a 2D numpy array\nfor the caller.\n\nIt is possible to use a table of strings. To create a 2 row, 3 column\narray of strings (up to 20 characters), one might use code like this:\n\nA numpy array of strings contains strings of all the same length. The\nmaximum length must be specified using the ‘dtype=’ named argument when\nthe array is created.\n\n"},{"objectID":"Home","href":"lowlevelapi/DataItemObject.html#tree-item","title":"Data Item Object > Tree Item","text":"Tree Item\n\nitem.set_payload_tree(tree)\n\nA tree payload consists of a list of “entities”. Each entity is a\ndictionary with several required keys and potentially some optional\nones. The required dictionary keys are:\n\n‘name’ - the text string that will be displayed in the tree view.\n\n‘key’ - a simple text string that can be used to specify the type of\nthe entity. This value can be used to enforce a schema on the\nentities. This value is not displayed.\n\n‘value’ - the data item value for the entity. This can be the None\nobject or an object of any of the following types: bool, int, float,\nstr, datetime.datetime, uuid.UUID.\n\noptional keys include:\n\n‘children’ - this key can be set to another list of entities. These\nentities are ‘children’ of the entity with this key and their\nvisibility is controlled by the visible state of this entity.\n\n‘state’ - if present, this key hints the generation engine that this\nentity node (or the nodes below it) should be initially displayed\nexpanded or collapsed. Valid values include the strings: “expanded”,\n“collapsed”, “collapseRecursive” and “expandRecursive”.\n\n‘header’ - this key may be set to a boolean and defaults to False. If\nit is present and set to True, the rendered row associated with this\nitem will be displayed as bold text and with an enhanced bottom\nborder line.\n\nThe following example includes examples of all of the various options:"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_wrap_content.html#table_wrap_content","title":"table_wrap_content","text":"table_wrap_content\n\n\n\nItem.table_wrap_content\n\nTable content wrapping\n\nControl wrapping of content to the next line inside a table cell.  Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux8.html#line_marker_aux8","title":"line_marker_aux8","text":"line_marker_aux8\n\n\n\nItem.line_marker_aux8\n\nAuxiliary data 8\n\nScalar value or name of a row accessible to line_marker_text as vaux8. May be a list."},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nIntroductory examples show how to use PyDynamicReporting to create or connect to\nan Ansys Dynamic Reporting service, create a database for a new service, and\ncreate and visualize items in a database.\n\nsphx_glr_examples_00-basic_00-launch-reporting-service.py\n\nsphx_glr_examples_00-basic_01-create_db.py\n\nsphx_glr_examples_00-basic_02-connect.py\n\nsphx_glr_examples_00-basic_03-plottype.py\n\nsphx_glr_examples_00-basic_04-set-plot-properties.py\n\nsphx_glr_examples_00-basic_05-explore-plot-properties.py\n\nsphx_glr_examples_00-basic_06-create-report-templates.py"},{"objectID":"Home","href":"examples/index.html#intermediate-examples","title":"Examples > Intermediate examples","text":"Intermediate examples\n\nIntermediate examples show how to use PyDynamicReporting\nto query an Ansys Dynamic Reporting database, modify its items,\nand get their corresponding web components.\n\nsphx_glr_examples_25-intermediate_00-tagging.py\n\nsphx_glr_examples_25-intermediate_01-queries.py\n\nsphx_glr_examples_25-intermediate_02-json.py"},{"objectID":"Home","href":"examples/index.html#advanced-examples","title":"Examples > Advanced examples","text":"Advanced examples\n\nAdvanced examples show how to use the low-level API in Ansys\nDynamic Reporting to create, query, visualize, and embed reports based on\ncustomers case studies.\n\nsphx_glr_examples_50-advanced_00-complete_report.py\n\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py\n\nsphx_glr_examples_50-advanced_02-customized_report_embed.py\n\n\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.html#report","title":"Report","text":"Report\n\n\n\nclass ansys.dynamicreporting.core.Report(service=None, report_name='default', report_obj=None)\n\nProvides for generating the Report object for the database.\n\nParameters\n\nservice\n\nansys.dynamicreporting.core.Service, optional\n\nAnsys Dynamic Reporting object that provides the connection to the database.\nThe default is None.\n\nreport_name\n\npython:str, optional\n\nName of the report object in the database. The default is default.\n\nreport_obj\n\npython:str, optional\n\nTemplateREST object from low-level ADR API. Do not modify.\n\nMethods\n\n"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.zaxis_format.html#zaxis_format","title":"zaxis_format","text":"zaxis_format\n\n\n\nItem.zaxis_format\n\nZ axis text format\n\nFormat for the z axis tick labels. Example: floatdot2"},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#create-a-database-and-populate-it","title":"Create a database and populate it","text":"Create a database and populate it\n\nThis example shows how to use PyDynamicReporting to create an Ansys\nDynamic Reporting service, create a database for this service, and\ncreate items in this database.\n\nThis example assumes that you have a local Ansys installation."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#start-an-ansys-dynamic-reporting-service","title":"Create a database and populate it > Start an Ansys Dynamic Reporting service","text":"Start an Ansys Dynamic Reporting service\n\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#create-items","title":"Create a database and populate it > Create items","text":"Create items\n\nNow that an Ansys Dynamic Reporting service is running on top of the new\ndatabase, create some items of different types (text, image, and 3D scene)\nin the database. The payload for these items comes from files on disk."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#visualize-all-items","title":"Create a database and populate it > Visualize all items","text":"Visualize all items\n\nVisualize all items  currently in the database by invoking the\ndefault report, which is simply the list of items, one after the other.\nIf you are running inside a Python interpreter such as Jupyter Notebook, the\nvisualization is embedded in the web page. If not, a browser opens an\nHTML page that displays the default report."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#create-tables-and-trees","title":"Create a database and populate it > Create tables and trees","text":"Create tables and trees\n\nTable and plot items can be generated by passing a numpy array. Trees\nare represented via Python dictionaries. All the different options for tables\nand trees can be set here."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#visualize-tables-and-trees","title":"Create a database and populate it > Visualize tables and trees","text":"Visualize tables and trees\n\nYou can visualize single items as web components, similarly to how you\nvisualized the default report. Simply calling the\nvisualize method\non each of the single items."},{"objectID":"Home","href":"examples/00-basic/01-create_db.html#close-the-service","title":"Create a database and populate it > Close the service","text":"Close the service\n\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\n\n\n\nDownload Jupyter notebook: 01-create_db.ipynb\n\nDownload Python source code: 01-create_db.py\n\nDownload zipped: 01-create_db.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"serverless/querying.html#querying","title":"Querying","text":"Querying\n\nServerless ADR provides flexible querying capabilities to retrieve your report data objects,\nincluding Items, Templates, Sessions, and Datasets. This lets you find and\nfilter report content efficiently by attributes, tags, or complex query strings."},{"objectID":"Home","href":"serverless/querying.html#query-methods","title":"Querying > Query Methods","text":"Query Methods\n\nThe main query methods are available on each model class:\n\nget(**kwargs)\n\nRetrieve a single object matching the given field filters.\nRaises an exception if zero or multiple objects are found.\n\nfilter(**kwargs)\n\nReturn an ObjectSet containing all objects matching the filters.\n\nfind(query: str, **kwargs)\n\nPerform an advanced query using the ADR query language syntax.\n\nADR.query(query_type, *, query=\"\", **kwargs)\n\nA static method that allows querying across any of the core object types\nby specifying the type explicitly (Item, Template, Session, or Dataset).\nReturns an ObjectSet of matching objects."},{"objectID":"Home","href":"serverless/querying.html#examples","title":"Querying > Examples","text":"Examples\n\nFetch a single Session by GUID:\n\nFilter Items by tag substring:\n\nFind Items with a custom ADR query string:\n\nUse the ADR query method to find Sessions with a name:"},{"objectID":"Home","href":"serverless/querying.html#subclass-queries","title":"Querying > Subclass Queries","text":"Subclass Queries\n\nWhen using subclasses like HTML or BasicLayout, queries automatically filter by the subclass type.\nExplicitly adding type filters (e.g., i_type|eq|html) in query strings is disallowed and will raise an exception.\n\nCorrect usage:\n\nIncorrect usage (raises exception):"},{"objectID":"Home","href":"serverless/querying.html#understanding-adr-query-strings","title":"Querying > Understanding ADR Query Strings","text":"Understanding ADR Query Strings\n\nADR queries use the format:\n\nConnector|Field|Operation|Value;\n\nConnector: Connector to chain multiple queries, e.g., A for ‘AND’ and O for ‘OR’.\n\nField: Field name, e.g., i_tags for item tags.\n\nOperation: Comparison operator, e.g., cont (contains), eq (equals).\n\nValue: The value to compare.\n\nMultiple filters are combined with a logical AND.\n\nExample:\n\nA|i_tags|cont|project=wing_sim;A|i_name|eq|summary_text;\n\nMatches items tagged project=wing_sim AND named summary_text."},{"objectID":"Home","href":"serverless/querying.html#querying-sessions-and-datasets","title":"Querying > Querying Sessions and Datasets","text":"Querying Sessions and Datasets\n\nSessions and Datasets support similar querying by their fields.\n\nGet a Dataset by filename:\n\nFilter Datasets by format:"},{"objectID":"Home","href":"serverless/querying.html#working-with-query-results","title":"Querying > Working with Query Results","text":"Working with Query Results\n\nget() returns a single model instance.\n\nfilter(), find(), and ADR.query() return an ObjectSet that behaves like a list and can be cast to a list or iterated over.\n\nYou can iterate over results, use len(), or index them:"},{"objectID":"Home","href":"serverless/querying.html#error-handling","title":"Querying > Error Handling","text":"Error Handling\n\nDoesNotExist: Raised when get() finds no match.\n\nMultipleObjectsReturned: Raised when get() finds multiple matches.\n\nADRException: Raised for invalid queries or disallowed filters.\n\nTypeError: Raised by ADR.query() if an invalid model type is passed.\n\nExample:"},{"objectID":"Home","href":"serverless/querying.html#summary","title":"Querying > Summary","text":"Summary\n\nQuerying in Serverless ADR allows precise and flexible data retrieval using:\n\nField filters for common attributes\n\nPowerful ADR query language strings\n\nSubclass-specific automatic type filtering\n\nUse querying to tailor report content dynamically for analysis and generation."},{"objectID":"Home","href":"serverless/querying.html#next-steps","title":"Querying > Next Steps","text":"Next Steps\n\nSee the media_and_static guide for managing media and static files linked to your reports."},{"objectID":"Home","href":"serverless/caveats.html#caveats","title":"Caveats","text":"Caveats"},{"objectID":"Home","href":"serverless/caveats.html#multiprocessing--multithreading-usage","title":"Caveats > Multiprocessing / Multithreading Usage","text":"Multiprocessing / Multithreading Usage\n\nWhen using Serverless ADR in applications that involve multiple processes or threads,\nServerless ADR modifies the Python process environment and dynamically loads\nrequired modules from the Ansys installation during setup. Because of this design,\nproper initialization and lifecycle management are critical when using Serverless ADR\nin applications involving multiple processes or threads."},{"objectID":"Home","href":"serverless/caveats.html#process-level-initialization","title":"Caveats > Process-Level Initialization","text":"Process-Level Initialization\n\nThe ADR.setup() method configures Serverless ADR for the entire process.\n\nWhen your application uses multiprocessing (e.g., the multiprocessing module,\nGunicorn workers, or other process-based concurrency), each process must call\nADR.setup() before accessing Serverless ADR features.\n\nIf setup() is not called in a new process, ADR APIs will fail or behave\nunpredictably due to missing environment configuration.\n\nExample: Multiprocessing with Serverless ADR"},{"objectID":"Home","href":"serverless/caveats.html#thread-level-behavior","title":"Caveats > Thread-Level Behavior","text":"Thread-Level Behavior\n\nServerless ADR configuration applies process-wide and is shared by all threads.\n\nIt is unnecessary and discouraged to call ADR.setup() multiple times within the\nsame process.\n\nEnsure the main thread calls ADR.setup() before spawning any threads that\nwill use Serverless ADR.\n\nCalling setup() concurrently or repeatedly from multiple threads can cause\nrace conditions or inconsistent environment state.\n\nExample: Threading with Serverless ADR"},{"objectID":"Home","href":"serverless/caveats.html#using-subprocesses-for-multiple-configurations","title":"Caveats > Using Subprocesses for Multiple Configurations","text":"Using Subprocesses for Multiple Configurations"},{"objectID":"Home","href":"serverless/caveats.html#problem","title":"Caveats > Problem","text":"Problem\n\nAs mentioned before, ADR.setup() configures Serverless ADR at the process level and some components\ncache configuration (paths, URLs, etc.) when first loaded. After a process is set up,\nattempting to reconfigure that same process to different db_directory,\nmedia_directory, or static_directory values can lead to conflicts or\nunpredictable behavior."},{"objectID":"Home","href":"serverless/caveats.html#why-a-subprocess-fixes-it","title":"Caveats > Why a subprocess fixes it","text":"Why a subprocess fixes it\n\nEach subprocess has its own interpreter and process-wide state. Running ADR in a\nsubprocess lets you start with a fresh configuration, do the work, and exit—no\nstate leaks between runs. This is the simplest, most reliable way to use different\ndirectories within one overall application."},{"objectID":"Home","href":"serverless/caveats.html#minimal-example","title":"Caveats > Minimal example","text":"Minimal example\n\nChild script (fresh ADR per run):\n\nParent process (run different configs safely):"},{"objectID":"Home","href":"serverless/caveats.html#guidelines","title":"Caveats > Guidelines","text":"Guidelines\n\nTreat ADR.setup() as one-time per process.\n\nTo use different database/media/static directories in the same application, spawn a subprocess per configuration.\n\nKeep child scripts small: set directories, call setup(), do the work, exit.\n\nOn Windows, ensure subprocess entry points are guarded with if __name__ == \"__main__\":."},{"objectID":"Home","href":"serverless/caveats.html#serverless-adr-usage-within-django-apps","title":"Caveats > Serverless ADR Usage Within Django Apps","text":"Serverless ADR Usage Within Django Apps\n\nServerless ADR internally configures Django settings and environment variables at the\nprocess level during ADR.setup().\n\nBecause Django settings are designed to be configured once per process, attempting\nto initialize Serverless ADR inside an existing Django application causes conflicts.\n\nSpecifically, setting up Serverless ADR tries to configure Django a second time, which\nis unsupported and results in errors or unpredictable behavior.\n\nThis means embedding or using Serverless ADR as a Django app within another Django\nproject is not currently supported and strongly discouraged.\n\nIf you require integration, consider separating Serverless ADR usage into a dedicated\nprocess or microservice to avoid Django settings conflicts."},{"objectID":"Home","href":"serverless/caveats.html#summary-and-best-practices","title":"Caveats > Summary and Best Practices","text":"Summary and Best Practices\n\nAlways call ADR.setup() once at the application startup or entry point.\n\nIn multiprocessing scenarios, call setup() separately in each spawned process.\n\nAvoid calling setup() multiple times or concurrently within the same process.\n\nShare the ADR instance across threads within a process after setup completes.\n\nAvoid embedding Serverless ADR within other Django apps due to Django configuration conflicts.\n\nIf unsure whether setup is needed, check adr.is_setup before calling.\n\nBy following these guidelines, you ensure stable and consistent Serverless ADR usage\nin complex multi-threaded or multi-process environments without risking Django conflicts."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.title.html#title","title":"title","text":"title\n\n\n\nItem.title\n\nCommon title"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.url.html#url","title":"url","text":"url\n\n\n\nproperty Service.url\n\nURL for the service."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.rem_tag.html#rem_tag","title":"rem_tag","text":"rem_tag\n\n\n\nItem.rem_tag(tag: str = '') -> bool\n\nRemove a tag on the item.\n\nParameters\n\ntag\n\npython:str, optional\n\nTag to remove. The default is \"\".\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.align_column.html#align_column","title":"align_column","text":"align_column\n\n\n\nItem.align_column\n\nColumn value alignment\n\nAlignment of data values in each column left right center justify"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_page.html#table_page","title":"table_page","text":"table_page\n\n\n\nItem.table_page\n\nTable paging\n\nNumber of rows visible per page.  Default: 0 all"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.histogram_cumulative.html#histogram_cumulative","title":"histogram_cumulative","text":"histogram_cumulative\n\n\n\nItem.histogram_cumulative\n\nCumulative histogram\n\nSet to 1 to cumulate the histograms. Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.histogram_bin_size.html#histogram_bin_size","title":"histogram_bin_size","text":"histogram_bin_size\n\n\n\nItem.histogram_bin_size\n\nHistogram bin size\n\nThe bin size of the histogram. Accepts positive integer or float types"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.palette_position.html#palette_position","title":"palette_position","text":"palette_position\n\n\n\nItem.palette_position\n\nPosition of the colorbar\n\nPosition the colorbar center relative to plot bounds 0 1. Example on left: 0.2 0.5"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Report.get_guid.html#get_guid","title":"get_guid","text":"get_guid\n\n\n\nReport.get_guid() -> str\n\nGet the guid corresponding to the report.\n\nReturns\n\npython:str\n\nguid corresponding to the report. If no guid exists, an empty string is returned.\n\nExamples"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux0.html#line_marker_aux0","title":"line_marker_aux0","text":"line_marker_aux0\n\n\n\nItem.line_marker_aux0\n\nAuxiliary data 0\n\nScalar value or name of a row accessible to line_marker_text as vaux0. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.visualize.html#visualize","title":"visualize","text":"visualize\n\n\n\nItem.visualize(new_tab: bool | None = False) -> None\n\nRender this item only.\n\nParameters\n\nnew_tab\n\nbool, optional\n\nWhether to render the item in a new tab if the current environment is a Jupyter\nnotebook. The default is False, in which case the item is rendered in the\ncurrent location. If the environment is not a Jupyter notebook, the item is\nalways rendered in a new tab.\n\nReturns\n\nItem\n\nRendered item.\n\nExamples\n\nCreate a text item and render it in a new tab:"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Service.start.html#start","title":"start","text":"start\n\n\n\nService.start(username: str = 'nexus', password: str = 'cei', create_db: bool = False, error_if_create_db_exists: bool = False, exit_on_close: bool = False, delete_db: bool = False) -> str\n\nStart a new service.\n\nParameters\n\nusername\n\npython:str, optional\n\nUsername for the service. The default is \"nexus\".\n\npassword\n\npython:str, optional\n\nPassword for the service. The default is \"cei\".\n\ncreate_db\n\nbool, optional\n\nWhether to create a new database before starting the service on top\nof it. The default is False. If True, this method creates a\ndatabase in the directory specified by the db_directory\nparameter and starts the service on top of it. An error is raised\nif the directory specified by the db_directory parameter\nalready exists and is not empty.\n\nerror_if_create_db_exists\n\nbool, optional\n\nWhether to raise an error if the create_db parameter is set to\nTrue and the database already exists. The default is False,\nin which case the start() method uses the database found instead\nof creating one.\n\nexit_on_close\n\nbool, optional\n\nWhether to automatically shut down the service when exiting the script.\nThe default is False, in which case the service continues to run.\n\ndelete_db\n\nbool, optional\n\nWhether to automatically delete the database when exiting the script. The\ndefault is False. This parameter is valid only if this parameter and\nthe exit_on_close parameter are set to True.\n\nReturns\n\npython:str\n\nID of the connected session.\n\nRaises\n\nDatabaseDirNotProvidedError\n\nThere is no database directory associated with the Service.\n\nCannotCreateDatabaseError\n\nError when creating the database.\n\nAlreadyConnectedError\n\nObject is already connected to a running ADR service.\n\nStartingServiceError\n\nCan not start the ADR service.\n\nNotValidServer\n\nCan not validate the current ADR service.\n\nExamples"},{"objectID":"Home","href":"examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_scrolly.html#table_scrolly","title":"table_scrolly","text":"table_scrolly\n\n\n\nItem.table_scrolly\n\nVertical scrolling\n\nControl visibility and height of vertical scrollbar.  Height in points  Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.plot_yaxis_type.html#plot_yaxis_type","title":"plot_yaxis_type","text":"plot_yaxis_type\n\n\n\nItem.plot_yaxis_type\n\nY axis style\n\nlinear log"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux5.html#line_marker_aux5","title":"line_marker_aux5","text":"line_marker_aux5\n\n\n\nItem.line_marker_aux5\n\nAuxiliary data 5\n\nScalar value or name of a row accessible to line_marker_text as vaux5. May be a list."},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.table_condensed.html#table_condensed","title":"table_condensed","text":"table_condensed\n\n\n\nItem.table_condensed\n\nTable compactness\n\nControl compactness of table.  Default: 0"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.legend_position.html#legend_position","title":"legend_position","text":"legend_position\n\n\n\nItem.legend_position\n\nPosition the legend\n\nPosition the legend relative to plot bounds 0 1.  Example on right: 1.2 0.5"},{"objectID":"Home","href":"_autosummary/ansys.dynamicreporting.core.Item.col_tags.html#col_tags","title":"col_tags","text":"col_tags\n\n\n\nItem.col_tags\n\nList of tags for each table column"}]