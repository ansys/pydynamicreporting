[
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.show_border",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.show_border.html#show_border",
        "title": "show_border",
        "section": "show_border",
        "text": "Show plot border\nSet to 1 to show the plot border. Default: 0"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#data-item-object",
        "title": "Data Item Object",
        "section": "Data Item Object",
        "text": "This object is a Python representation of an Ansys Dynamic\nReporting data item object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date.\nThe following attributes are available on an ItemREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nsequence - An integer sequence number that can be used for\nsorting/indexing in a report\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the data object, a string\nsource - The source of the data object, a string\nsession - string GUID of a SessionREST object that already exists in\nthe database\ndataset - string GUID of a DatasetREST object that already exists in\nthe database\nitem.set_tags(tagstring)\nSet the tags for the item to the passed string. Multiple tags are\nspace-separated.\nitem.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nitem.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nitem.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\nhas_file = item.is_file_protocol()\nThis method returns True if the data item refers to an actual file on\nthe server. Currently the ItemRest.type values of ItemREST.type_img,\nItemREST.type_scn, ItemREST.type_anim and ItemREST.type_file all refer\nto files.\nOnce all of the metadata attributes listed above are set, an actual data\npayload needs to be set for the data item. There are convenience methods\nto set the item type and fill in the payload data.\ncontent = item.get_payload_content()\nFor Items that have been fetched using the Server object, this method\nallows you to get the payload without having to manually decode the\npayload data.\nAn example of the use of this method is shown below:\nitem.set_payload_animation(mp4_filename)\nThis method sets the item payload to an animation. The “mp4_filename”\nargument should be the name of a .mp4 encoded video file. Note: the file\nmust exist on disk before this call is made and must stay on disk until\nthe item is pushed to the ADR Nexus server.\nitem.set_payload_file(filename)\nThis method sets the item payload to the content of an arbitrary file on\ndisk. The argument should be the name of a file to be uploaded. Note:\nthe file must exist on disk before this call is made and must stay on\ndisk until the item is pushed to the ADR Nexus server.\nitem.set_payload_html(html_text)\nThis will set the item payload to HTML formatted text.\nitem.set_payload_image(image)\nThis method sets the item payload to an image. The argument can be one\nof three things: the binary representation of a .png file on disk as a\nstring, a QImage object or an enve.image object. Examples are shown\nbelow:\nA string which is the binary data representation of the image. Note:\nthis is the only format supported in a Python interpreter that lacks\nthe PyQt and enve modules.\nA Qt QImage object instance\nAn enve image object instance\nitem.set_payload_none()\nBy default an item has no payload. This method will reset the item to\nthat state. It is legal to push an item without a data payload into the\nserver.\nitem.set_payload_scene(filename)\nThis method sets the item payload to the 3D geometry found in the passed\nfilename.  Supported geometry formats include: EnSight CSF, STL, PLY,\nSCDOC, SCDOCX and AVZ format files.\nitem.set_payload_string(string)\nThis will set the item payload to an ASCII string.\nitem.set_payload_table(dictionary)\nThis will set the item payload to be a table, the table being specified\nin a dictionary. Minimally, the dictionary must contain a single numpy\narray with the ‘array’ key. There are a few restrictions on this array.\nFirst, it must be 2D. Second, the dtype of the array should be\nnumpy.float32, numpy.double or a string (dtype=”|S20”).\nOther table properties (e.g. row/column labels, text formatting, etc)\ncan also be set in this dictionary. A simple example:\nIf the external Python API is being used from within EnSight, it is also\npossible to pass an ENS_PLOTTER object to the set_payload_table()\nmethod. It will capture not only the data in the plots, but many of the\nplotter attributes. One example might be:\nMany more table properties exist and can be set as the default values\nfor a table by setting same-named keys in the dictionary. The properties\nare documented in the item properties section at this page.\nA short-cut APIs exists for a common case:\nThis is a shortcut for the following two lines of python:\nNote this can be handy for cases like:\nwhere one does not want to work with numpy and prefers to pass lists of\nlists. The core API will convert the list of lists into a 2D numpy array\nfor the caller.\nIt is possible to use a table of strings. To create a 2 row, 3 column\narray of strings (up to 20 characters), one might use code like this:\nA numpy array of strings contains strings of all the same length. The\nmaximum length must be specified using the ‘dtype=’ named argument when\nthe array is created.\nitem.set_payload_tree(tree)\nA tree payload consists of a list of “entities”. Each entity is a\ndictionary with several required keys and potentially some optional\nones. The required dictionary keys are:\n‘name’ - the text string that will be displayed in the tree view.\n‘key’ - a simple text string that can be used to specify the type of\nthe entity. This value can be used to enforce a schema on the\nentities. This value is not displayed.\n‘value’ - the data item value for the entity. This can be the None\nobject or an object of any of the following types: bool, int, float,\nstr, datetime.datetime, uuid.UUID.\noptional keys include:\n‘children’ - this key can be set to another list of entities. These\nentities are ‘children’ of the entity with this key and their\nvisibility is controlled by the visible state of this entity.\n‘state’ - if present, this key hints the generation engine that this\nentity node (or the nodes below it) should be initially displayed\nexpanded or collapsed. Valid values include the strings: “expanded”,\n“collapsed”, “collapseRecursive” and “expandRecursive”.\n‘header’ - this key may be set to a boolean and defaults to False. If\nit is present and set to True, the rendered row associated with this\nitem will be displayed as bold text and with an enhanced bottom\nborder line.\nThe following example includes examples of all of the various options:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\"http://localhost:8000/\", \"nexus\", \"cei\")\nobj_list = serverobj.get_objects(\n    objtype=report_objects.ItemREST, query=\"A|i_type|cont|string;\"\n)\n\n# Previously you had to do this to get the data of an item and then decode it to view human readable content\n\n# import pickle**\n# data = pickle.loads(obj_list[0].payloaddata)\n\n# This method gives you the human readable content directly (handles decoding internally.)\ndata = obj_list[0].get_payload_content()\nwith open(\"example.png\", \"rb\") as fp:\n    img = fp.read()\nitem.set_payload_image(img)\nfrom PyQt4 import QtGui\n\nimg = QtGui.QImage(\"example.png\")\nitem.set_payload_image(img)\nimport enve\n\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    item.set_payload_image(img)\nimport numpy\n\nd = dict(\n    array=numpy.zeros((3, 2), numpy.double),\n    rowlbls=[\"Row 1\", \"Row 2\", \"Row 3\"],\n    collbls=[\"Column A\", \"Column B\"],\n    title=\"Simple table\",\n)\nitem.set_payload_table(d)\nplot = ensight.objs.core.PLOTS[0]  # get the first ENS_PLOTTER object\nitem.set_payload_table(plot)\nitem.set_payload_table_values(array, rowlbls=None, collbls=None, title=None)\nd = dict(\n    array=numpy.array(array, numpy.double),\n    rowlbls=rowlbls,\n    collbls=collbls,\n    title=title,\n)\nitem.set_payload_table(d)\nitem.set_payload_table_values([[1, 2, 3], [4, 5, 6]])\nimport numpy\n\narray = numpy.array([[\"A\", \"B\", \"C\"], [1, 2, 3]], dtype=\"\\|S20\")\nd = dict(\n    array=array,\n    rowlbls=[\"Row 1\", \"Row 2\"],\n    collbls=[\"Column A\", \"Column B\", \"Column C\"],\n    title=\"Simple ASCII table\",\n)\nitem.set_payload_table(d)\nimport datetime\nimport enve\nimport uuid\n\nimage_item = server.create_item(name=\"An Image\", source=\"externalAPI\", sequence=0)\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    image_item.set_payload_image(img)\n\nleaves = list()\nfor i in range(10):\n    leaves.append(dict(key=\"leaves\", name=\"Leaf {}\".format(i), value=i))\n\nchildren = list()\nchildren.append(dict(key=\"child\", name=\"Boolean example\", value=True))\nchildren.append(dict(key=\"child\", name=\"Integer example\", value=10))\nchildren.append(dict(key=\"child\", name=\"Float example\", value=99.99))\nchildren.append(dict(key=\"child\", name=\"Simple string\", value=\"Hello world!!!\"))\nchildren.append(\n    dict(key=\"child\", name=\"The current date\", value=datetime.datetime.now())\n)\n\n# this entity will display the image item (or a link to it) created above\nchildren.append(\n    dict(key=\"child\", name=\"A data item guid\", value=uuid.UUID(image_item.guid))\n)\nchildren.append(\n    dict(\n        key=\"child_parent\",\n        name=\"A child parent\",\n        value=\"Parents can have values\",\n        children=leaves,\n        state=\"expanded\",\n    )\n)\n\ntree = list()\ntree.append(\n    dict(key=\"root\", name=\"Top Level\", value=None, children=children, state=\"collapsed\")\n)\nitem = server.create_item(name=\"Tree List Example\", source=\"externalAPI\", sequence=0)\nitem.set_payload_tree(tree)"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#report_objectsitemrest-object",
        "title": "Data Item Object > report_objects.ItemREST object",
        "section": "report_objects.ItemREST object",
        "text": "This object is a Python representation of an Ansys Dynamic\nReporting data item object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date.\nThe following attributes are available on an ItemREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nsequence - An integer sequence number that can be used for\nsorting/indexing in a report\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the data object, a string\nsource - The source of the data object, a string\nsession - string GUID of a SessionREST object that already exists in\nthe database\ndataset - string GUID of a DatasetREST object that already exists in\nthe database\nitem.set_tags(tagstring)\nSet the tags for the item to the passed string. Multiple tags are\nspace-separated.\nitem.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nitem.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nitem.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\nhas_file = item.is_file_protocol()\nThis method returns True if the data item refers to an actual file on\nthe server. Currently the ItemRest.type values of ItemREST.type_img,\nItemREST.type_scn, ItemREST.type_anim and ItemREST.type_file all refer\nto files.\nOnce all of the metadata attributes listed above are set, an actual data\npayload needs to be set for the data item. There are convenience methods\nto set the item type and fill in the payload data.\ncontent = item.get_payload_content()\nFor Items that have been fetched using the Server object, this method\nallows you to get the payload without having to manually decode the\npayload data.\nAn example of the use of this method is shown below:\nitem.set_payload_animation(mp4_filename)\nThis method sets the item payload to an animation. The “mp4_filename”\nargument should be the name of a .mp4 encoded video file. Note: the file\nmust exist on disk before this call is made and must stay on disk until\nthe item is pushed to the ADR Nexus server.\nitem.set_payload_file(filename)\nThis method sets the item payload to the content of an arbitrary file on\ndisk. The argument should be the name of a file to be uploaded. Note:\nthe file must exist on disk before this call is made and must stay on\ndisk until the item is pushed to the ADR Nexus server.\nitem.set_payload_html(html_text)\nThis will set the item payload to HTML formatted text.\nitem.set_payload_image(image)\nThis method sets the item payload to an image. The argument can be one\nof three things: the binary representation of a .png file on disk as a\nstring, a QImage object or an enve.image object. Examples are shown\nbelow:\nA string which is the binary data representation of the image. Note:\nthis is the only format supported in a Python interpreter that lacks\nthe PyQt and enve modules.\nA Qt QImage object instance\nAn enve image object instance\nitem.set_payload_none()\nBy default an item has no payload. This method will reset the item to\nthat state. It is legal to push an item without a data payload into the\nserver.\nitem.set_payload_scene(filename)\nThis method sets the item payload to the 3D geometry found in the passed\nfilename.  Supported geometry formats include: EnSight CSF, STL, PLY,\nSCDOC, SCDOCX and AVZ format files.\nitem.set_payload_string(string)\nThis will set the item payload to an ASCII string.\nitem.set_payload_table(dictionary)\nThis will set the item payload to be a table, the table being specified\nin a dictionary. Minimally, the dictionary must contain a single numpy\narray with the ‘array’ key. There are a few restrictions on this array.\nFirst, it must be 2D. Second, the dtype of the array should be\nnumpy.float32, numpy.double or a string (dtype=”|S20”).\nOther table properties (e.g. row/column labels, text formatting, etc)\ncan also be set in this dictionary. A simple example:\nIf the external Python API is being used from within EnSight, it is also\npossible to pass an ENS_PLOTTER object to the set_payload_table()\nmethod. It will capture not only the data in the plots, but many of the\nplotter attributes. One example might be:\nMany more table properties exist and can be set as the default values\nfor a table by setting same-named keys in the dictionary. The properties\nare documented in the item properties section at this page.\nA short-cut APIs exists for a common case:\nThis is a shortcut for the following two lines of python:\nNote this can be handy for cases like:\nwhere one does not want to work with numpy and prefers to pass lists of\nlists. The core API will convert the list of lists into a 2D numpy array\nfor the caller.\nIt is possible to use a table of strings. To create a 2 row, 3 column\narray of strings (up to 20 characters), one might use code like this:\nA numpy array of strings contains strings of all the same length. The\nmaximum length must be specified using the ‘dtype=’ named argument when\nthe array is created.\nitem.set_payload_tree(tree)\nA tree payload consists of a list of “entities”. Each entity is a\ndictionary with several required keys and potentially some optional\nones. The required dictionary keys are:\n‘name’ - the text string that will be displayed in the tree view.\n‘key’ - a simple text string that can be used to specify the type of\nthe entity. This value can be used to enforce a schema on the\nentities. This value is not displayed.\n‘value’ - the data item value for the entity. This can be the None\nobject or an object of any of the following types: bool, int, float,\nstr, datetime.datetime, uuid.UUID.\noptional keys include:\n‘children’ - this key can be set to another list of entities. These\nentities are ‘children’ of the entity with this key and their\nvisibility is controlled by the visible state of this entity.\n‘state’ - if present, this key hints the generation engine that this\nentity node (or the nodes below it) should be initially displayed\nexpanded or collapsed. Valid values include the strings: “expanded”,\n“collapsed”, “collapseRecursive” and “expandRecursive”.\n‘header’ - this key may be set to a boolean and defaults to False. If\nit is present and set to True, the rendered row associated with this\nitem will be displayed as bold text and with an enhanced bottom\nborder line.\nThe following example includes examples of all of the various options:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\"http://localhost:8000/\", \"nexus\", \"cei\")\nobj_list = serverobj.get_objects(\n    objtype=report_objects.ItemREST, query=\"A|i_type|cont|string;\"\n)\n\n# Previously you had to do this to get the data of an item and then decode it to view human readable content\n\n# import pickle**\n# data = pickle.loads(obj_list[0].payloaddata)\n\n# This method gives you the human readable content directly (handles decoding internally.)\ndata = obj_list[0].get_payload_content()\nwith open(\"example.png\", \"rb\") as fp:\n    img = fp.read()\nitem.set_payload_image(img)\nfrom PyQt4 import QtGui\n\nimg = QtGui.QImage(\"example.png\")\nitem.set_payload_image(img)\nimport enve\n\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    item.set_payload_image(img)\nimport numpy\n\nd = dict(\n    array=numpy.zeros((3, 2), numpy.double),\n    rowlbls=[\"Row 1\", \"Row 2\", \"Row 3\"],\n    collbls=[\"Column A\", \"Column B\"],\n    title=\"Simple table\",\n)\nitem.set_payload_table(d)\nplot = ensight.objs.core.PLOTS[0]  # get the first ENS_PLOTTER object\nitem.set_payload_table(plot)\nitem.set_payload_table_values(array, rowlbls=None, collbls=None, title=None)\nd = dict(\n    array=numpy.array(array, numpy.double),\n    rowlbls=rowlbls,\n    collbls=collbls,\n    title=title,\n)\nitem.set_payload_table(d)\nitem.set_payload_table_values([[1, 2, 3], [4, 5, 6]])\nimport numpy\n\narray = numpy.array([[\"A\", \"B\", \"C\"], [1, 2, 3]], dtype=\"\\|S20\")\nd = dict(\n    array=array,\n    rowlbls=[\"Row 1\", \"Row 2\"],\n    collbls=[\"Column A\", \"Column B\", \"Column C\"],\n    title=\"Simple ASCII table\",\n)\nitem.set_payload_table(d)\nimport datetime\nimport enve\nimport uuid\n\nimage_item = server.create_item(name=\"An Image\", source=\"externalAPI\", sequence=0)\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    image_item.set_payload_image(img)\n\nleaves = list()\nfor i in range(10):\n    leaves.append(dict(key=\"leaves\", name=\"Leaf {}\".format(i), value=i))\n\nchildren = list()\nchildren.append(dict(key=\"child\", name=\"Boolean example\", value=True))\nchildren.append(dict(key=\"child\", name=\"Integer example\", value=10))\nchildren.append(dict(key=\"child\", name=\"Float example\", value=99.99))\nchildren.append(dict(key=\"child\", name=\"Simple string\", value=\"Hello world!!!\"))\nchildren.append(\n    dict(key=\"child\", name=\"The current date\", value=datetime.datetime.now())\n)\n\n# this entity will display the image item (or a link to it) created above\nchildren.append(\n    dict(key=\"child\", name=\"A data item guid\", value=uuid.UUID(image_item.guid))\n)\nchildren.append(\n    dict(\n        key=\"child_parent\",\n        name=\"A child parent\",\n        value=\"Parents can have values\",\n        children=leaves,\n        state=\"expanded\",\n    )\n)\n\ntree = list()\ntree.append(\n    dict(key=\"root\", name=\"Top Level\", value=None, children=children, state=\"collapsed\")\n)\nitem = server.create_item(name=\"Tree List Example\", source=\"externalAPI\", sequence=0)\nitem.set_payload_tree(tree)"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#data-members",
        "title": "Data Item Object > Data members",
        "section": "Data members",
        "text": "The following attributes are available on an ItemREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nsequence - An integer sequence number that can be used for\nsorting/indexing in a report\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the data object, a string\nsource - The source of the data object, a string\nsession - string GUID of a SessionREST object that already exists in\nthe database\ndataset - string GUID of a DatasetREST object that already exists in\nthe database"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#methods",
        "title": "Data Item Object > Methods",
        "section": "Methods",
        "text": "item.set_tags(tagstring)\nSet the tags for the item to the passed string. Multiple tags are\nspace-separated.\nitem.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nitem.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nitem.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\nhas_file = item.is_file_protocol()\nThis method returns True if the data item refers to an actual file on\nthe server. Currently the ItemRest.type values of ItemREST.type_img,\nItemREST.type_scn, ItemREST.type_anim and ItemREST.type_file all refer\nto files.\nOnce all of the metadata attributes listed above are set, an actual data\npayload needs to be set for the data item. There are convenience methods\nto set the item type and fill in the payload data.\ncontent = item.get_payload_content()\nFor Items that have been fetched using the Server object, this method\nallows you to get the payload without having to manually decode the\npayload data.\nAn example of the use of this method is shown below:\nitem.set_payload_animation(mp4_filename)\nThis method sets the item payload to an animation. The “mp4_filename”\nargument should be the name of a .mp4 encoded video file. Note: the file\nmust exist on disk before this call is made and must stay on disk until\nthe item is pushed to the ADR Nexus server.\nitem.set_payload_file(filename)\nThis method sets the item payload to the content of an arbitrary file on\ndisk. The argument should be the name of a file to be uploaded. Note:\nthe file must exist on disk before this call is made and must stay on\ndisk until the item is pushed to the ADR Nexus server.\nitem.set_payload_html(html_text)\nThis will set the item payload to HTML formatted text.\nitem.set_payload_image(image)\nThis method sets the item payload to an image. The argument can be one\nof three things: the binary representation of a .png file on disk as a\nstring, a QImage object or an enve.image object. Examples are shown\nbelow:\nA string which is the binary data representation of the image. Note:\nthis is the only format supported in a Python interpreter that lacks\nthe PyQt and enve modules.\nA Qt QImage object instance\nAn enve image object instance\nitem.set_payload_none()\nBy default an item has no payload. This method will reset the item to\nthat state. It is legal to push an item without a data payload into the\nserver.\nitem.set_payload_scene(filename)\nThis method sets the item payload to the 3D geometry found in the passed\nfilename.  Supported geometry formats include: EnSight CSF, STL, PLY,\nSCDOC, SCDOCX and AVZ format files.\nitem.set_payload_string(string)\nThis will set the item payload to an ASCII string.\nitem.set_payload_table(dictionary)\nThis will set the item payload to be a table, the table being specified\nin a dictionary. Minimally, the dictionary must contain a single numpy\narray with the ‘array’ key. There are a few restrictions on this array.\nFirst, it must be 2D. Second, the dtype of the array should be\nnumpy.float32, numpy.double or a string (dtype=”|S20”).\nOther table properties (e.g. row/column labels, text formatting, etc)\ncan also be set in this dictionary. A simple example:\nIf the external Python API is being used from within EnSight, it is also\npossible to pass an ENS_PLOTTER object to the set_payload_table()\nmethod. It will capture not only the data in the plots, but many of the\nplotter attributes. One example might be:\nMany more table properties exist and can be set as the default values\nfor a table by setting same-named keys in the dictionary. The properties\nare documented in the item properties section at this page.\nA short-cut APIs exists for a common case:\nThis is a shortcut for the following two lines of python:\nNote this can be handy for cases like:\nwhere one does not want to work with numpy and prefers to pass lists of\nlists. The core API will convert the list of lists into a 2D numpy array\nfor the caller.\nIt is possible to use a table of strings. To create a 2 row, 3 column\narray of strings (up to 20 characters), one might use code like this:\nA numpy array of strings contains strings of all the same length. The\nmaximum length must be specified using the ‘dtype=’ named argument when\nthe array is created.\nitem.set_payload_tree(tree)\nA tree payload consists of a list of “entities”. Each entity is a\ndictionary with several required keys and potentially some optional\nones. The required dictionary keys are:\n‘name’ - the text string that will be displayed in the tree view.\n‘key’ - a simple text string that can be used to specify the type of\nthe entity. This value can be used to enforce a schema on the\nentities. This value is not displayed.\n‘value’ - the data item value for the entity. This can be the None\nobject or an object of any of the following types: bool, int, float,\nstr, datetime.datetime, uuid.UUID.\noptional keys include:\n‘children’ - this key can be set to another list of entities. These\nentities are ‘children’ of the entity with this key and their\nvisibility is controlled by the visible state of this entity.\n‘state’ - if present, this key hints the generation engine that this\nentity node (or the nodes below it) should be initially displayed\nexpanded or collapsed. Valid values include the strings: “expanded”,\n“collapsed”, “collapseRecursive” and “expandRecursive”.\n‘header’ - this key may be set to a boolean and defaults to False. If\nit is present and set to True, the rendered row associated with this\nitem will be displayed as bold text and with an enhanced bottom\nborder line.\nThe following example includes examples of all of the various options:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\"http://localhost:8000/\", \"nexus\", \"cei\")\nobj_list = serverobj.get_objects(\n    objtype=report_objects.ItemREST, query=\"A|i_type|cont|string;\"\n)\n\n# Previously you had to do this to get the data of an item and then decode it to view human readable content\n\n# import pickle**\n# data = pickle.loads(obj_list[0].payloaddata)\n\n# This method gives you the human readable content directly (handles decoding internally.)\ndata = obj_list[0].get_payload_content()\nwith open(\"example.png\", \"rb\") as fp:\n    img = fp.read()\nitem.set_payload_image(img)\nfrom PyQt4 import QtGui\n\nimg = QtGui.QImage(\"example.png\")\nitem.set_payload_image(img)\nimport enve\n\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    item.set_payload_image(img)\nimport numpy\n\nd = dict(\n    array=numpy.zeros((3, 2), numpy.double),\n    rowlbls=[\"Row 1\", \"Row 2\", \"Row 3\"],\n    collbls=[\"Column A\", \"Column B\"],\n    title=\"Simple table\",\n)\nitem.set_payload_table(d)\nplot = ensight.objs.core.PLOTS[0]  # get the first ENS_PLOTTER object\nitem.set_payload_table(plot)\nitem.set_payload_table_values(array, rowlbls=None, collbls=None, title=None)\nd = dict(\n    array=numpy.array(array, numpy.double),\n    rowlbls=rowlbls,\n    collbls=collbls,\n    title=title,\n)\nitem.set_payload_table(d)\nitem.set_payload_table_values([[1, 2, 3], [4, 5, 6]])\nimport numpy\n\narray = numpy.array([[\"A\", \"B\", \"C\"], [1, 2, 3]], dtype=\"\\|S20\")\nd = dict(\n    array=array,\n    rowlbls=[\"Row 1\", \"Row 2\"],\n    collbls=[\"Column A\", \"Column B\", \"Column C\"],\n    title=\"Simple ASCII table\",\n)\nitem.set_payload_table(d)\nimport datetime\nimport enve\nimport uuid\n\nimage_item = server.create_item(name=\"An Image\", source=\"externalAPI\", sequence=0)\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    image_item.set_payload_image(img)\n\nleaves = list()\nfor i in range(10):\n    leaves.append(dict(key=\"leaves\", name=\"Leaf {}\".format(i), value=i))\n\nchildren = list()\nchildren.append(dict(key=\"child\", name=\"Boolean example\", value=True))\nchildren.append(dict(key=\"child\", name=\"Integer example\", value=10))\nchildren.append(dict(key=\"child\", name=\"Float example\", value=99.99))\nchildren.append(dict(key=\"child\", name=\"Simple string\", value=\"Hello world!!!\"))\nchildren.append(\n    dict(key=\"child\", name=\"The current date\", value=datetime.datetime.now())\n)\n\n# this entity will display the image item (or a link to it) created above\nchildren.append(\n    dict(key=\"child\", name=\"A data item guid\", value=uuid.UUID(image_item.guid))\n)\nchildren.append(\n    dict(\n        key=\"child_parent\",\n        name=\"A child parent\",\n        value=\"Parents can have values\",\n        children=leaves,\n        state=\"expanded\",\n    )\n)\n\ntree = list()\ntree.append(\n    dict(key=\"root\", name=\"Top Level\", value=None, children=children, state=\"collapsed\")\n)\nitem = server.create_item(name=\"Tree List Example\", source=\"externalAPI\", sequence=0)\nitem.set_payload_tree(tree)"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#animation-item",
        "title": "Data Item Object > Animation Item",
        "section": "Animation Item",
        "text": "item.set_payload_animation(mp4_filename)\nThis method sets the item payload to an animation. The “mp4_filename”\nargument should be the name of a .mp4 encoded video file. Note: the file\nmust exist on disk before this call is made and must stay on disk until\nthe item is pushed to the ADR Nexus server."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#file-item",
        "title": "Data Item Object > File Item",
        "section": "File Item",
        "text": "item.set_payload_file(filename)\nThis method sets the item payload to the content of an arbitrary file on\ndisk. The argument should be the name of a file to be uploaded. Note:\nthe file must exist on disk before this call is made and must stay on\ndisk until the item is pushed to the ADR Nexus server."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#html-item",
        "title": "Data Item Object > HTML Item",
        "section": "HTML Item",
        "text": "item.set_payload_html(html_text)\nThis will set the item payload to HTML formatted text."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#image-item",
        "title": "Data Item Object > Image Item",
        "section": "Image Item",
        "text": "item.set_payload_image(image)\nThis method sets the item payload to an image. The argument can be one\nof three things: the binary representation of a .png file on disk as a\nstring, a QImage object or an enve.image object. Examples are shown\nbelow:\nA string which is the binary data representation of the image. Note:\nthis is the only format supported in a Python interpreter that lacks\nthe PyQt and enve modules.\nA Qt QImage object instance\nAn enve image object instance\nwith open(\"example.png\", \"rb\") as fp:\n    img = fp.read()\nitem.set_payload_image(img)\nfrom PyQt4 import QtGui\n\nimg = QtGui.QImage(\"example.png\")\nitem.set_payload_image(img)\nimport enve\n\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    item.set_payload_image(img)"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#none-item",
        "title": "Data Item Object > None Item",
        "section": "None Item",
        "text": "item.set_payload_none()\nBy default an item has no payload. This method will reset the item to\nthat state. It is legal to push an item without a data payload into the\nserver."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#scene-item",
        "title": "Data Item Object > Scene Item",
        "section": "Scene Item",
        "text": "item.set_payload_scene(filename)\nThis method sets the item payload to the 3D geometry found in the passed\nfilename.  Supported geometry formats include: EnSight CSF, STL, PLY,\nSCDOC, SCDOCX and AVZ format files."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#string-item",
        "title": "Data Item Object > String Item",
        "section": "String Item",
        "text": "item.set_payload_string(string)\nThis will set the item payload to an ASCII string."
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#table-item",
        "title": "Data Item Object > Table Item",
        "section": "Table Item",
        "text": "item.set_payload_table(dictionary)\nThis will set the item payload to be a table, the table being specified\nin a dictionary. Minimally, the dictionary must contain a single numpy\narray with the ‘array’ key. There are a few restrictions on this array.\nFirst, it must be 2D. Second, the dtype of the array should be\nnumpy.float32, numpy.double or a string (dtype=”|S20”).\nOther table properties (e.g. row/column labels, text formatting, etc)\ncan also be set in this dictionary. A simple example:\nIf the external Python API is being used from within EnSight, it is also\npossible to pass an ENS_PLOTTER object to the set_payload_table()\nmethod. It will capture not only the data in the plots, but many of the\nplotter attributes. One example might be:\nMany more table properties exist and can be set as the default values\nfor a table by setting same-named keys in the dictionary. The properties\nare documented in the item properties section at this page.\nA short-cut APIs exists for a common case:\nThis is a shortcut for the following two lines of python:\nNote this can be handy for cases like:\nwhere one does not want to work with numpy and prefers to pass lists of\nlists. The core API will convert the list of lists into a 2D numpy array\nfor the caller.\nIt is possible to use a table of strings. To create a 2 row, 3 column\narray of strings (up to 20 characters), one might use code like this:\nA numpy array of strings contains strings of all the same length. The\nmaximum length must be specified using the ‘dtype=’ named argument when\nthe array is created.\nimport numpy\n\nd = dict(\n    array=numpy.zeros((3, 2), numpy.double),\n    rowlbls=[\"Row 1\", \"Row 2\", \"Row 3\"],\n    collbls=[\"Column A\", \"Column B\"],\n    title=\"Simple table\",\n)\nitem.set_payload_table(d)\nplot = ensight.objs.core.PLOTS[0]  # get the first ENS_PLOTTER object\nitem.set_payload_table(plot)\nitem.set_payload_table_values(array, rowlbls=None, collbls=None, title=None)\nd = dict(\n    array=numpy.array(array, numpy.double),\n    rowlbls=rowlbls,\n    collbls=collbls,\n    title=title,\n)\nitem.set_payload_table(d)\nitem.set_payload_table_values([[1, 2, 3], [4, 5, 6]])\nimport numpy\n\narray = numpy.array([[\"A\", \"B\", \"C\"], [1, 2, 3]], dtype=\"\\|S20\")\nd = dict(\n    array=array,\n    rowlbls=[\"Row 1\", \"Row 2\"],\n    collbls=[\"Column A\", \"Column B\", \"Column C\"],\n    title=\"Simple ASCII table\",\n)\nitem.set_payload_table(d)"
    },
    {
        "objectID": "lowlevelapi/DataItemObject",
        "href": "lowlevelapi/DataItemObject.html#tree-item",
        "title": "Data Item Object > Tree Item",
        "section": "Tree Item",
        "text": "item.set_payload_tree(tree)\nA tree payload consists of a list of “entities”. Each entity is a\ndictionary with several required keys and potentially some optional\nones. The required dictionary keys are:\n‘name’ - the text string that will be displayed in the tree view.\n‘key’ - a simple text string that can be used to specify the type of\nthe entity. This value can be used to enforce a schema on the\nentities. This value is not displayed.\n‘value’ - the data item value for the entity. This can be the None\nobject or an object of any of the following types: bool, int, float,\nstr, datetime.datetime, uuid.UUID.\noptional keys include:\n‘children’ - this key can be set to another list of entities. These\nentities are ‘children’ of the entity with this key and their\nvisibility is controlled by the visible state of this entity.\n‘state’ - if present, this key hints the generation engine that this\nentity node (or the nodes below it) should be initially displayed\nexpanded or collapsed. Valid values include the strings: “expanded”,\n“collapsed”, “collapseRecursive” and “expandRecursive”.\n‘header’ - this key may be set to a boolean and defaults to False. If\nit is present and set to True, the rendered row associated with this\nitem will be displayed as bold text and with an enhanced bottom\nborder line.\nThe following example includes examples of all of the various options:\nimport datetime\nimport enve\nimport uuid\n\nimage_item = server.create_item(name=\"An Image\", source=\"externalAPI\", sequence=0)\nimg = enve.image()\nif img.load(\"example.png\") == 0:\n    image_item.set_payload_image(img)\n\nleaves = list()\nfor i in range(10):\n    leaves.append(dict(key=\"leaves\", name=\"Leaf {}\".format(i), value=i))\n\nchildren = list()\nchildren.append(dict(key=\"child\", name=\"Boolean example\", value=True))\nchildren.append(dict(key=\"child\", name=\"Integer example\", value=10))\nchildren.append(dict(key=\"child\", name=\"Float example\", value=99.99))\nchildren.append(dict(key=\"child\", name=\"Simple string\", value=\"Hello world!!!\"))\nchildren.append(\n    dict(key=\"child\", name=\"The current date\", value=datetime.datetime.now())\n)\n\n# this entity will display the image item (or a link to it) created above\nchildren.append(\n    dict(key=\"child\", name=\"A data item guid\", value=uuid.UUID(image_item.guid))\n)\nchildren.append(\n    dict(\n        key=\"child_parent\",\n        name=\"A child parent\",\n        value=\"Parents can have values\",\n        children=leaves,\n        state=\"expanded\",\n    )\n)\n\ntree = list()\ntree.append(\n    dict(key=\"root\", name=\"Top Level\", value=None, children=children, state=\"collapsed\")\n)\nitem = server.create_item(name=\"Tree List Example\", source=\"externalAPI\", sequence=0)\nitem.set_payload_tree(tree)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_pagemenu",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_pagemenu.html#table_pagemenu",
        "title": "table_pagemenu",
        "section": "table_pagemenu",
        "text": "Table paging menu\nOptions for the number of rows per page menu.  Default: 10  25  50  100  1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.width",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.width.html#width",
        "title": "width",
        "section": "width",
        "text": "Chart width\nChart width in pixels"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nthis guide before attempting to contribute to PyDnamicReporting.\nUse the PyDnamicReporting Issues\npage to submit questions, report bugs, and request new features.\nTo reach the project support team, email pyansys.core@ansys.com.\nPyDynamicReporting is compliant with the Coding style described in the\nPyAnsys Developer’s Guide. It uses the tool\npre-commit to align the code style. You can\ninstall and activate this tool with these commands:\nYou can then directly execute pre-commit with\nthis command:\npython -m pip install pre-commit\npre-commit install\npre-commit run --all-files --show-diff-on-failure"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyDnamicReporting Issues\npage to submit questions, report bugs, and request new features.\nTo reach the project support team, email pyansys.core@ansys.com."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyDynamicReporting is compliant with the Coding style described in the\nPyAnsys Developer’s Guide. It uses the tool\npre-commit to align the code style. You can\ninstall and activate this tool with these commands:\nYou can then directly execute pre-commit with\nthis command:\npython -m pip install pre-commit\npre-commit install\npre-commit run --all-files --show-diff-on-failure"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_scale",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_scale.html#line_marker_scale",
        "title": "line_marker_scale",
        "section": "line_marker_scale",
        "text": "Marker scaling\nApply a linear transform to marker sizes M B = Minput_sizeB. Example: 1. 0."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.histogram_bin_size",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.histogram_bin_size.html#histogram_bin_size",
        "title": "histogram_bin_size",
        "section": "histogram_bin_size",
        "text": "Histogram bin size\nThe bin size of the histogram. Accepts positive integer or float types"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.xtitle",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.xtitle.html#xtitle",
        "title": "xtitle",
        "section": "xtitle",
        "text": "X axis title\nA title for the x axis"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.get_url",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.get_url.html#get_url",
        "title": "get_url",
        "section": "get_url",
        "text": "Get the URL corresponding to the report.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\nURL corresponding to the report. If no URL exists, an empty string is returned.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = 'Top report')\nreport_url = my_report.get_url()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_animation",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_animation.html#item_animation",
        "title": "item_animation",
        "section": "item_animation",
        "text": "Animation file (MP4/H.264 format files)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_table",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_table.html#item_table",
        "title": "item_table",
        "section": "item_table",
        "text": "Table values (Must be in a numpy array)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot_title",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot_title.html#plot_title",
        "title": "plot_title",
        "section": "plot_title",
        "text": "Plot title\nThe title of the plot"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.create_item",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.create_item.html#create_item",
        "title": "create_item",
        "section": "create_item",
        "text": "Create an item that gets automatically pushed into the database.\nName of the item. The default is \"default\".\nName of the source to generate the item from. The default is \"ADR\",\nwhich is Ansys Dynamic Reporting.\nItem object.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_img = adr_service.create_item()"
    },
    {
        "objectID": "examples/50-advanced/sg_execution_times",
        "href": "examples/50-advanced/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 3 files from examples/50-advanced:\nExample\nTime\nMem (MB)\nsphx_glr_examples_50-advanced_00-complete_report.py (00-complete_report.py)\n00:00.000\n0.0\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py (01-two_simulation_same_db.py)\n00:00.000\n0.0\nsphx_glr_examples_50-advanced_02-customized_report_embed.py (02-customized_report_embed.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux5",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux5.html#line_marker_aux5",
        "title": "line_marker_aux5",
        "section": "line_marker_aux5",
        "text": "Auxiliary data 5\nScalar value or name of a row accessible to line_marker_text as vaux5. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.session_guid",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.session_guid.html#session_guid",
        "title": "session_guid",
        "section": "session_guid",
        "text": "GUID of the session associated with the service."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.visualize",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.visualize.html#visualize",
        "title": "visualize",
        "section": "visualize",
        "text": "Render this item only.\nWhether to render the item in a new tab if the current environment is a Jupyter\nnotebook. The default is False, in which case the item is rendered in the\ncurrent location. If the environment is not a Jupyter notebook, the item is\nalways rendered in a new tab.\nRendered item.\nCreate a text item and render it in a new tab:\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect(url='http://localhost:8010')\nmy_txt = adr_service.create_item()\nmy_txt.item_text = '<h1>The test</h1>This is a text item'\nmy_txt.visualize(new_tab = True)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux4",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux4.html#line_marker_aux4",
        "title": "line_marker_aux4",
        "section": "line_marker_aux4",
        "text": "Auxiliary data 4\nScalar value or name of a row accessible to line_marker_text as vaux4. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_sort",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_sort.html#table_sort",
        "title": "table_sort",
        "section": "table_sort",
        "text": "Table sorting\nAllow column sorting from headers: none  all  data  Default: all"
    },
    {
        "objectID": "examples/25-intermediate/sg_execution_times",
        "href": "examples/25-intermediate/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 2 files from examples/25-intermediate:\nExample\nTime\nMem (MB)\nsphx_glr_examples_25-intermediate_00-tagging.py (00-tagging.py)\n00:00.000\n0.0\nsphx_glr_examples_25-intermediate_01-queries.py (01-queries.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#plot-types",
        "title": "Plot types",
        "section": "Plot types",
        "text": "This example shows how to start an Ansys Dynamic Reporting\nservice via a Docker image and create different plot items.\nThe example focuses on showing how to use the API to generate\ndifferent plot types.\nThis example assumes that you do not have a local Ansys installation but\nare starting an Ansys Dynamic Reporting Service via a Docker image on\na new database.\nStart an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory.\nLet us start by creating a simple table and visualizing it. Create a table\nwith 5 columns and 3 rows.\nYou can use the labels_row attribute to set the row labels. Use the visualize\nmethod on the object to see its representation. By default, it will be displayed\nas a table\nLet us know create a new item that is the same as the previous simple table,\nbut this time we will set the plot attribute to line to visualize the values\nas two line plots, and we will use the xaxis attribute to set which row should\nbe used as the X axis. We can also control the formatting and the title of the\naxis separately with the axis_format and title attributes, as done below.\nThe result can be seen in the following image.\nNext, we will see how to create a bar plot, and decorate it with the same\nattributes used in the previous code snippet. See the following image for\nthe resulting visualization.\nNext supported plot type is the pie chart. Please see the following code snippet\nto generate the pie chart as in the following image.\nHeatmaps are plots where at each (X,Y) position is associated the value of a\nvariable, colored according to a legend. Here the snippet on how to create\na heatmap representation - please note how nan values are also supported,\nresulting in empty cells.\nA 3D surface plot allows you to visualize the data points in a terrain-like\nsurface in a 3D space powered by the WebGL engine. It is a variation of a\nheatmap as they share the same data structure. The difference is that the\nsurface plot visualizes the heatmap values as the Z axis data, allowing you\nto zoom in and out, and rotate to view the surface from different angles. Like\nheatmap, nan values are also supported, resulting in empty\nholes on the surface.\nParallel coordinate plots are especially useful when analyzing data coming\nfrom multiple runs. Place in each raw the values of variables for a given\nsimulation. Each column is a different variable. The parallel coordinate\nplot allows you to visualize all this data in a way that stresses\ncorrelations between variables and runs.\nNow, let us create a gaussian distribution via numpy and display\nit as an histogram. Let us set the histogram to be normalized, and\nplay with the bin size and gaps.\nA Sankey diagram allows you to visualize the relationship between\ndifferent elements. For this reprenstation, place the information\ninside a squared table.\nA 3D scatter plot allows you to visualize the data points in 3D space\npowered by the WebGL engine. You can zoom in and out, and rotate to view the\ndata from different angles.\nA polar plot is a plot type that visualizes the data point in a polar\ncoordinate system. One common variation of a polar plot is a radar chart. The\ndata position is determined by:\nRadius (r): The distance from the center of the polar plot, defined by\nthe yaxis property.\nTheta (θ): The direction of the point, measured in numeric degrees or\ncategorical data, defined by the xaxis property.\nScatter polar is the only available polar plot type for now.\nThe theta (θ) value is defined by the data type of the xaxis\nvalues:\nIf xaxis values have minus numeric value: The labels will be a list\nof symmetrical values from “(-180°) - (180°)”.\nIf xaxis values are all positive values: The labeles will be from\n“(0°) - (360°)”.\nIf xaxis values are categorical values: All xaxis values will be used\nto label.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 02-plottype.ipynb\nDownload Python source code: 02-plottype.py\nDownload zipped: 02-plottype.zip\nGallery generated by Sphinx-Gallery\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=\"docker\", db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)\nsimple_table = adr_service.create_item(obj_name=\"Simple Table\", source=\"Documentation\")\nsimple_table.item_table = np.array(\n    [[0, 1, 2, 3, 4], [0, 3, 6, 9, 12], [0, 1, 4, 9, 16]], dtype=\"|S20\"\n)\nsimple_table.labels_row = [\"X\", \"line\", \"square\"]\nsimple_table.visualize()\nline_plot = adr_service.create_item(obj_name=\"Line Plot\", source=\"Documentation\")\nline_plot.item_table = np.array([[0, 1, 2, 3, 4], [0, 3, 6, 9, 12], [0, 1, 4, 9, 16]], dtype=\"|S20\")\nline_plot.labels_row = [\"X\", \"line\", \"square\"]\nline_plot.plot = \"line\"\nline_plot.xaxis = \"X\"\nline_plot.yaxis_format = \"floatdot0\"\nline_plot.xaxis_format = \"floatdot1\"\nline_plot.xtitle = \"x\"\nline_plot.ytitle = \"f(x)\"\nline_plot.visualize()\nbar_plot = adr_service.create_item(obj_name=\"Bar Plot\", source=\"Documentation\")\nbar_plot.item_table = np.array([[0, 1, 2, 3, 4], [0.3, 0.5, 0.7, 0.6, 0.3]], dtype=\"|S20\")\nbar_plot.plot = \"bar\"\nbar_plot.labels_row = [\"ics\", \"my variable\"]\nbar_plot.xaxis_format = \"floatdot0\"\nbar_plot.yaxis_format = \"floatdot2\"\nbar_plot.xaxis = \"ics\"\nbar_plot.yaxis = \"my variable\"\nbar_plot.visualize()\npie_plot = adr_service.create_item(obj_name=\"Pie Plot\", source=\"Documentation\")\npie_plot.item_table = np.array([[10, 20, 50, 20]], dtype=\"|S20\")\npie_plot.plot = \"pie\"\npie_plot.labels_column = [\"Bar\", \"Triangle\", \"Quad\", \"Penta\"]\npie_plot.visualize()\nheatmap = adr_service.create_item(obj_name=\"Heatmap\", source=\"Documentation\")\nheatmap.item_table = np.array(\n    [\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.02153, 0.09653, np.nan, 0.09653, 0.02153],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n    ],\n    dtype=\"|S20\",\n)\nheatmap.plot = \"heatmap\"\nheatmap.format = \"floatdot0\"\nheatmap.visualize()\nsurface = adr_service.create_item()\n# We can use the same data as we use to visualize heatmap\nsurface.item_table = np.array(\n    [\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.02153, 0.09653, np.nan, 0.09653, 0.02153],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n    ],\n    dtype=\"|S20\",\n)\nsurface.plot = \"3d surface\"\nsurface.format = \"floatdot0\"\nsurface.visualize()\nparallel = adr_service.create_item()\nparallel.item_table = np.array(\n    [\n        [54.2, 12.3, 1.45e5],\n        [72.3, 9.3, 4.34e5],\n        [45.4, 10.8, 8.45e4],\n        [67.4, 12.2, 2.56e5],\n        [44.8, 13.5, 9.87e4],\n    ],\n    dtype=\"|S20\",\n)\nparallel.labels_column = [\"Temperature\", \"Max. Pressure\", \"Max. Work\"]\nparallel.plot = \"parallel\"\nparallel.visualize()\nhisto_data = adr_service.create_item()\nhisto_data.item_table = np.random.normal(0, 0.1, 100)\nhisto_data.plot = \"histogram\"\nhisto_data.histogram_normalized = 1\nhisto_data.histogram_bin_size = 0.03\nhisto_data.visualize()\nsankey_plot = adr_service.create_item()\nsankey_plot.item_table = np.array(\n    [\n        [0, 0, 8, 2, 0, 0],\n        [0, 0, 0, 4, 0, 0],\n        [0, 0, 0, 0, 8, 0],\n        [0, 0, 0, 0, 5, 1],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n    ],\n    dtype=\"|S20\",\n)\nsankey_plot.labels_row = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nsankey_plot.labels_column = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nsankey_plot.plot = \"sankey\"\nsankey_plot.visualize()\nscatter_plot_3d = adr_service.create_item()\nscatter_plot_3d.item_table = np.random.uniform(1.0, 50.0, size=(6, 20))\nscatter_plot_3d.labels_row = [\"X1\", \"Y1\", \"Z1\", \"X2\", \"Y2\", \"Z2\"]\nscatter_plot_3d.plot = \"line\"\n# specified the 3D scatter's line style (default is markers+lines)\nscatter_plot_3d.line_style = \"none\"\n# specified the 3D scatter's symbol (default is solid circle)\n# supportive: diamond, cross, x, circle, square (open & solid)\nscatter_plot_3d.xaxis = [\"X1\", \"X2\"]\nscatter_plot_3d.yaxis = [\"Y1\", \"Y2\"]\nscatter_plot_3d.zaxis = [\"Z1\", \"Z2\"]\nscatter_plot_3d.zaxis_format = \"floatdot0\"\nscatter_plot_3d.yaxis_format = \"floatdot0\"\nscatter_plot_3d.xaxis_format = \"floatdot1\"\nscatter_plot_3d.xtitle = \"x\"\nscatter_plot_3d.ytitle = \"f(x)\"\nscatter_plot_3d.ztitle = \"f(x,y)\"\n# opacity\nscatter_plot_3d.line_marker_opacity = 0.7\n# vis\nscatter_plot_3d.visualize()\npolar = adr_service.create_item()\n# We can use the same data as we use to visualize heatmap\npolar.item_table = np.array(\n    [\n        [\"-180\", \"-135\", \"-90\", \"-45\", \"0\", \"45\", \"90\", \"135\", \"180\"],\n        [8.2, 7.3, 10.6, 5.6, 5.9, 9.1, 2.4, 1.6, 4.8],\n    ],\n    dtype=\"|S20\",\n)\npolar.plot = \"polar\"\npolar.format = \"floatdot0\"\npolar.xaxis = 0\npolar.format_row = \"str\"\npolar.labels_row = [\"theta\", \"r\"]\npolar.visualize()\n# sphinx_gallery_thumbnail_path = '_static/01_connect_3.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#start-an-ansys-dynamic-reporting-service",
        "title": "Plot types > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory.\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=\"docker\", db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#create-a-simple-table",
        "title": "Plot types > Create a simple table",
        "section": "Create a simple table",
        "text": "Let us start by creating a simple table and visualizing it. Create a table\nwith 5 columns and 3 rows.\nYou can use the labels_row attribute to set the row labels. Use the visualize\nmethod on the object to see its representation. By default, it will be displayed\nas a table\nsimple_table = adr_service.create_item(obj_name=\"Simple Table\", source=\"Documentation\")\nsimple_table.item_table = np.array(\n    [[0, 1, 2, 3, 4], [0, 3, 6, 9, 12], [0, 1, 4, 9, 16]], dtype=\"|S20\"\n)\nsimple_table.labels_row = [\"X\", \"line\", \"square\"]\nsimple_table.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-as-a-line-plot",
        "title": "Plot types > Visualize as a line plot",
        "section": "Visualize as a line plot",
        "text": "Let us know create a new item that is the same as the previous simple table,\nbut this time we will set the plot attribute to line to visualize the values\nas two line plots, and we will use the xaxis attribute to set which row should\nbe used as the X axis. We can also control the formatting and the title of the\naxis separately with the axis_format and title attributes, as done below.\nThe result can be seen in the following image.\nline_plot = adr_service.create_item(obj_name=\"Line Plot\", source=\"Documentation\")\nline_plot.item_table = np.array([[0, 1, 2, 3, 4], [0, 3, 6, 9, 12], [0, 1, 4, 9, 16]], dtype=\"|S20\")\nline_plot.labels_row = [\"X\", \"line\", \"square\"]\nline_plot.plot = \"line\"\nline_plot.xaxis = \"X\"\nline_plot.yaxis_format = \"floatdot0\"\nline_plot.xaxis_format = \"floatdot1\"\nline_plot.xtitle = \"x\"\nline_plot.ytitle = \"f(x)\"\nline_plot.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-as-a-bar-plot",
        "title": "Plot types > Visualize as a bar plot",
        "section": "Visualize as a bar plot",
        "text": "Next, we will see how to create a bar plot, and decorate it with the same\nattributes used in the previous code snippet. See the following image for\nthe resulting visualization.\nbar_plot = adr_service.create_item(obj_name=\"Bar Plot\", source=\"Documentation\")\nbar_plot.item_table = np.array([[0, 1, 2, 3, 4], [0.3, 0.5, 0.7, 0.6, 0.3]], dtype=\"|S20\")\nbar_plot.plot = \"bar\"\nbar_plot.labels_row = [\"ics\", \"my variable\"]\nbar_plot.xaxis_format = \"floatdot0\"\nbar_plot.yaxis_format = \"floatdot2\"\nbar_plot.xaxis = \"ics\"\nbar_plot.yaxis = \"my variable\"\nbar_plot.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-pie-chart",
        "title": "Plot types > Visualize a pie chart",
        "section": "Visualize a pie chart",
        "text": "Next supported plot type is the pie chart. Please see the following code snippet\nto generate the pie chart as in the following image.\npie_plot = adr_service.create_item(obj_name=\"Pie Plot\", source=\"Documentation\")\npie_plot.item_table = np.array([[10, 20, 50, 20]], dtype=\"|S20\")\npie_plot.plot = \"pie\"\npie_plot.labels_column = [\"Bar\", \"Triangle\", \"Quad\", \"Penta\"]\npie_plot.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-heatmap",
        "title": "Plot types > Visualize a heatmap",
        "section": "Visualize a heatmap",
        "text": "Heatmaps are plots where at each (X,Y) position is associated the value of a\nvariable, colored according to a legend. Here the snippet on how to create\na heatmap representation - please note how nan values are also supported,\nresulting in empty cells.\nheatmap = adr_service.create_item(obj_name=\"Heatmap\", source=\"Documentation\")\nheatmap.item_table = np.array(\n    [\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.02153, 0.09653, np.nan, 0.09653, 0.02153],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n    ],\n    dtype=\"|S20\",\n)\nheatmap.plot = \"heatmap\"\nheatmap.format = \"floatdot0\"\nheatmap.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-3d-surface-plot",
        "title": "Plot types > Visualize a 3D surface plot",
        "section": "Visualize a 3D surface plot",
        "text": "A 3D surface plot allows you to visualize the data points in a terrain-like\nsurface in a 3D space powered by the WebGL engine. It is a variation of a\nheatmap as they share the same data structure. The difference is that the\nsurface plot visualizes the heatmap values as the Z axis data, allowing you\nto zoom in and out, and rotate to view the surface from different angles. Like\nheatmap, nan values are also supported, resulting in empty\nholes on the surface.\nsurface = adr_service.create_item()\n# We can use the same data as we use to visualize heatmap\nsurface.item_table = np.array(\n    [\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.02153, 0.09653, np.nan, 0.09653, 0.02153],\n        [0.01306, 0.05854, 0.09653, 0.05854, 0.01306],\n        [0.00291, 0.01306, 0.02153, 0.01306, 0.00291],\n    ],\n    dtype=\"|S20\",\n)\nsurface.plot = \"3d surface\"\nsurface.format = \"floatdot0\"\nsurface.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-parallel-coordinate-plot",
        "title": "Plot types > Visualize a parallel coordinate plot",
        "section": "Visualize a parallel coordinate plot",
        "text": "Parallel coordinate plots are especially useful when analyzing data coming\nfrom multiple runs. Place in each raw the values of variables for a given\nsimulation. Each column is a different variable. The parallel coordinate\nplot allows you to visualize all this data in a way that stresses\ncorrelations between variables and runs.\nparallel = adr_service.create_item()\nparallel.item_table = np.array(\n    [\n        [54.2, 12.3, 1.45e5],\n        [72.3, 9.3, 4.34e5],\n        [45.4, 10.8, 8.45e4],\n        [67.4, 12.2, 2.56e5],\n        [44.8, 13.5, 9.87e4],\n    ],\n    dtype=\"|S20\",\n)\nparallel.labels_column = [\"Temperature\", \"Max. Pressure\", \"Max. Work\"]\nparallel.plot = \"parallel\"\nparallel.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-histogram",
        "title": "Plot types > Visualize a histogram",
        "section": "Visualize a histogram",
        "text": "Now, let us create a gaussian distribution via numpy and display\nit as an histogram. Let us set the histogram to be normalized, and\nplay with the bin size and gaps.\nhisto_data = adr_service.create_item()\nhisto_data.item_table = np.random.normal(0, 0.1, 100)\nhisto_data.plot = \"histogram\"\nhisto_data.histogram_normalized = 1\nhisto_data.histogram_bin_size = 0.03\nhisto_data.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-sankey-diagram",
        "title": "Plot types > Visualize a Sankey diagram",
        "section": "Visualize a Sankey diagram",
        "text": "A Sankey diagram allows you to visualize the relationship between\ndifferent elements. For this reprenstation, place the information\ninside a squared table.\nsankey_plot = adr_service.create_item()\nsankey_plot.item_table = np.array(\n    [\n        [0, 0, 8, 2, 0, 0],\n        [0, 0, 0, 4, 0, 0],\n        [0, 0, 0, 0, 8, 0],\n        [0, 0, 0, 0, 5, 1],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n    ],\n    dtype=\"|S20\",\n)\nsankey_plot.labels_row = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nsankey_plot.labels_column = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nsankey_plot.plot = \"sankey\"\nsankey_plot.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-3d-scatter-plot",
        "title": "Plot types > Visualize a 3D scatter plot",
        "section": "Visualize a 3D scatter plot",
        "text": "A 3D scatter plot allows you to visualize the data points in 3D space\npowered by the WebGL engine. You can zoom in and out, and rotate to view the\ndata from different angles.\nscatter_plot_3d = adr_service.create_item()\nscatter_plot_3d.item_table = np.random.uniform(1.0, 50.0, size=(6, 20))\nscatter_plot_3d.labels_row = [\"X1\", \"Y1\", \"Z1\", \"X2\", \"Y2\", \"Z2\"]\nscatter_plot_3d.plot = \"line\"\n# specified the 3D scatter's line style (default is markers+lines)\nscatter_plot_3d.line_style = \"none\"\n# specified the 3D scatter's symbol (default is solid circle)\n# supportive: diamond, cross, x, circle, square (open & solid)\nscatter_plot_3d.xaxis = [\"X1\", \"X2\"]\nscatter_plot_3d.yaxis = [\"Y1\", \"Y2\"]\nscatter_plot_3d.zaxis = [\"Z1\", \"Z2\"]\nscatter_plot_3d.zaxis_format = \"floatdot0\"\nscatter_plot_3d.yaxis_format = \"floatdot0\"\nscatter_plot_3d.xaxis_format = \"floatdot1\"\nscatter_plot_3d.xtitle = \"x\"\nscatter_plot_3d.ytitle = \"f(x)\"\nscatter_plot_3d.ztitle = \"f(x,y)\"\n# opacity\nscatter_plot_3d.line_marker_opacity = 0.7\n# vis\nscatter_plot_3d.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#visualize-a-polar-plot",
        "title": "Plot types > Visualize a polar plot",
        "section": "Visualize a polar plot",
        "text": "A polar plot is a plot type that visualizes the data point in a polar\ncoordinate system. One common variation of a polar plot is a radar chart. The\ndata position is determined by:\nRadius (r): The distance from the center of the polar plot, defined by\nthe yaxis property.\nTheta (θ): The direction of the point, measured in numeric degrees or\ncategorical data, defined by the xaxis property.\nScatter polar is the only available polar plot type for now.\nThe theta (θ) value is defined by the data type of the xaxis\nvalues:\nIf xaxis values have minus numeric value: The labels will be a list\nof symmetrical values from “(-180°) - (180°)”.\nIf xaxis values are all positive values: The labeles will be from\n“(0°) - (360°)”.\nIf xaxis values are categorical values: All xaxis values will be used\nto label.\npolar = adr_service.create_item()\n# We can use the same data as we use to visualize heatmap\npolar.item_table = np.array(\n    [\n        [\"-180\", \"-135\", \"-90\", \"-45\", \"0\", \"45\", \"90\", \"135\", \"180\"],\n        [8.2, 7.3, 10.6, 5.6, 5.9, 9.1, 2.4, 1.6, 4.8],\n    ],\n    dtype=\"|S20\",\n)\npolar.plot = \"polar\"\npolar.format = \"floatdot0\"\npolar.xaxis = 0\npolar.format_row = \"str\"\npolar.labels_row = [\"theta\", \"r\"]\npolar.visualize()"
    },
    {
        "objectID": "examples/00-basic/02-plottype",
        "href": "examples/00-basic/02-plottype.html#close-the-service",
        "title": "Plot types > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 02-plottype.ipynb\nDownload Python source code: 02-plottype.py\nDownload zipped: 02-plottype.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/01_connect_3.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux7",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux7.html#line_marker_aux7",
        "title": "line_marker_aux7",
        "section": "line_marker_aux7",
        "text": "Auxiliary data 7\nScalar value or name of a row accessible to line_marker_text as vaux7. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.column_minimum",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.column_minimum.html#column_minimum",
        "title": "column_minimum",
        "section": "column_minimum",
        "text": "Column range minimums\nScalar value or array of values used as column category minimums."
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#multiple-simulations-in-same-database",
        "title": "Multiple simulations in same database",
        "section": "Multiple simulations in same database",
        "text": "Use a single database and report template for multiple simluation results.\nThis example assumes that you have a local Ansys installation.\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nDefine two methods: one to create items associated with a design point\nsimulation, and a method to create the report template for a simulation\nreport. The first method to create items is mocking what a real\nsimulation would produce: a set of items pushed directly into the\ndatabase. Please note that each item is tagged with the corresponding\ndesign point.\nAssume we have ran the design point dp0. Create the items. Check if the\ndatabase already contains the report template with the method\nget_list_reports.\nIf it doesn’t exist, then create it as well.\nNow assume we separately ran the design point dp1. Connect to the\ncurrently running ADR service and push the new items in the same database.\nCheck if the report template already exists and create it only if it does not.\nNow the database contains data from both design point simulations. If you\nwere to simply visualize the report, both simulation results would appear.\nTo avoid that, use a filter to downselect the items to visualize each time.\nSetting the filter to look only at items with tag dp=dp0 will show the\nreport for the first design point. Simularly, filter for tag dp=dp1 will\ndisplay the report for the second design point.\nVisualize the report for the second design point. See how you only need to\nchange the filter.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-two_simulation_same_db.ipynb\nDownload Python source code: 01-two_simulation_same_db.py\nDownload zipped: 01-two_simulation_same_db.zip\nGallery generated by Sphinx-Gallery\nfrom random import random as r\n\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\nfrom ansys.dynamicreporting.core.utils import report_utils\n\n# Find a random open port for the ADR service\nadr_port = report_utils.find_unused_ports(1)[0]\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\Ansys Inc\\v241\",\n    db_directory=r\"D:\\tmp\\new_db\",\n    port=adr_port,\n)\nsession_guid = adr_service.start(create_db=True)\ndef create_items(dp=0) -> None:\n    intro_text = adr_service.create_item()\n    intro_text.item_text = \"This section describes the settings for the simulation: initial conditions, solver settings, and such.\"\n    intro_text.set_tags(f\"dp=dp{str(dp)} section=intro\")\n\n    intro_tree = adr_service.create_item()\n    mytree = []\n    mytree.append({\"key\": \"root\", \"name\": \"Solver\", \"value\": \"My Solver\"})\n    mytree.append({\"key\": \"root\", \"name\": \"Number cells\", \"value\": 10e6})\n    mytree.append({\"key\": \"root\", \"name\": \"Mesh Size\", \"value\": \"1.0 mm^3\"})\n    mytree.append({\"key\": \"root\", \"name\": \"Mesh Type\", \"value\": \"Hex8\"})\n    intro_tree.item_tree = mytree\n    intro_tree.set_tags(f\"dp=dp{str(dp)} section=intro\")\n\n    data_table = adr_service.create_item()\n    ics = []\n    ips = []\n    zet = []\n    for i in range(30):\n        ics.append(i / 5.0)\n        ips.append(np.sin((i + 6 * dp) * np.pi / 10.0) + r() * 0.1)\n        zet.append(np.cos((i + 6 * dp) * np.pi / 10.0) + r() * 0.1)\n\n    data_table.item_table = np.array([ics, ips, zet], dtype=\"|S20\")\n    data_table.labels_row = [\"X\", \"Sin\", \"Cos\"]\n    data_table.set_tags(f\"dp=dp{str(dp)} section=data\")\n    data_table.plot = \"line\"\n    data_table.xaxis = \"X\"\n    data_table.yaxis = [\"Sin\", \"Cos\"]\n    data_table.xaxis_format = \"floatdot0\"\n    data_table.yaxis_format = \"floatdot1\"\n    data_table.ytitle = \"Values\"\n    data_table.xtitle = \"X\"\n\n\ndef create_report_template(server=None) -> None:\n    template_1 = server.create_template(\n        name=\"Simulation Report\", parent=None, report_type=\"Layout:basic\"\n    )\n    template_1.params = '{\"HTML\": \"<h1>Simulation Report</h1>\"}'\n    server.put_objects(template_1)\n\n    template_0 = server.create_template(name=\"TOC\", parent=template_1, report_type=\"Layout:toc\")\n    template_0.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Table of Content</h2>\"}'\n    template_0.set_filter(\"A|i_name|eq|__NonexistantName__;\")\n    server.put_objects(template_0)\n    server.put_objects(template_1)\n\n    template_2 = server.create_template(\n        name=\"Introduction\", parent=template_1, report_type=\"Layout:panel\"\n    )\n    template_2.params = '{\"HTML\": \"<h2>Introduction</h2>\", \"properties\": {\"TOCItem\": \"1\"}}'\n    template_2.set_filter(\"A|i_tags|cont|section=intro;\")\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_3 = server.create_template(name=\"Text\", parent=template_2, report_type=\"Layout:basic\")\n    template_3.params = '{\"properties\": {\"TOCItem\": \"0\"}}'\n    template_3.set_filter(\"A|i_type|cont|html,string;\")\n    server.put_objects(template_3)\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_4 = server.create_template(name=\"Tree\", parent=template_2, report_type=\"Layout:basic\")\n    template_4.params = '{\"properties\": {\"TOCItem\": \"0\"}}'\n    template_4.set_filter(\"A|i_type|cont|tree;\")\n    server.put_objects(template_4)\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_5 = server.create_template(\n        name=\"Results\", parent=template_1, report_type=\"Layout:panel\"\n    )\n    template_5.params = (\n        '{\"HTML\": \"<h2>Results</h2>\\\\nYour simulation results.\", \"properties\": {\"TOCItem\": \"1\"}}'\n    )\n    template_5.set_filter(\"A|i_tags|cont|section=data;\")\n    server.put_objects(template_5)\n    server.put_objects(template_1)\ncreate_items(dp=0)\nif \"Simulation Report\" not in adr_service.get_list_reports():\n    create_report_template(server=adr_service.serverobj)\nnew_service = adr.Service(ansys_installation=r\"C:\\Program Files\\Ansys Inc\\v241\")\nnew_service.connect(url=adr_service.url)\ncreate_items(dp=1)\nif \"Simulation Report\" not in new_service.get_list_reports():\n    create_report_template(server=new_service.serverobj)\nnew_service.visualize_report(report_name=\"Simulation Report\", filter=\"A|i_tags|cont|dp0;\")\nnew_service.visualize_report(report_name=\"Simulation Report\", filter=\"A|i_tags|cont|dp1;\")\n# sphinx_gallery_thumbnail_path = '_static/01_two_simulation_same_db_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#start-an-ansys-dynamic-reporting-service",
        "title": "Multiple simulations in same database > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nfrom random import random as r\n\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\nfrom ansys.dynamicreporting.core.utils import report_utils\n\n# Find a random open port for the ADR service\nadr_port = report_utils.find_unused_ports(1)[0]\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\Ansys Inc\\v241\",\n    db_directory=r\"D:\\tmp\\new_db\",\n    port=adr_port,\n)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#set-methods-for-items-and-report-template-creation",
        "title": "Multiple simulations in same database > Set methods for items and report template creation",
        "section": "Set methods for items and report template creation",
        "text": "Define two methods: one to create items associated with a design point\nsimulation, and a method to create the report template for a simulation\nreport. The first method to create items is mocking what a real\nsimulation would produce: a set of items pushed directly into the\ndatabase. Please note that each item is tagged with the corresponding\ndesign point.\ndef create_items(dp=0) -> None:\n    intro_text = adr_service.create_item()\n    intro_text.item_text = \"This section describes the settings for the simulation: initial conditions, solver settings, and such.\"\n    intro_text.set_tags(f\"dp=dp{str(dp)} section=intro\")\n\n    intro_tree = adr_service.create_item()\n    mytree = []\n    mytree.append({\"key\": \"root\", \"name\": \"Solver\", \"value\": \"My Solver\"})\n    mytree.append({\"key\": \"root\", \"name\": \"Number cells\", \"value\": 10e6})\n    mytree.append({\"key\": \"root\", \"name\": \"Mesh Size\", \"value\": \"1.0 mm^3\"})\n    mytree.append({\"key\": \"root\", \"name\": \"Mesh Type\", \"value\": \"Hex8\"})\n    intro_tree.item_tree = mytree\n    intro_tree.set_tags(f\"dp=dp{str(dp)} section=intro\")\n\n    data_table = adr_service.create_item()\n    ics = []\n    ips = []\n    zet = []\n    for i in range(30):\n        ics.append(i / 5.0)\n        ips.append(np.sin((i + 6 * dp) * np.pi / 10.0) + r() * 0.1)\n        zet.append(np.cos((i + 6 * dp) * np.pi / 10.0) + r() * 0.1)\n\n    data_table.item_table = np.array([ics, ips, zet], dtype=\"|S20\")\n    data_table.labels_row = [\"X\", \"Sin\", \"Cos\"]\n    data_table.set_tags(f\"dp=dp{str(dp)} section=data\")\n    data_table.plot = \"line\"\n    data_table.xaxis = \"X\"\n    data_table.yaxis = [\"Sin\", \"Cos\"]\n    data_table.xaxis_format = \"floatdot0\"\n    data_table.yaxis_format = \"floatdot1\"\n    data_table.ytitle = \"Values\"\n    data_table.xtitle = \"X\"\n\n\ndef create_report_template(server=None) -> None:\n    template_1 = server.create_template(\n        name=\"Simulation Report\", parent=None, report_type=\"Layout:basic\"\n    )\n    template_1.params = '{\"HTML\": \"<h1>Simulation Report</h1>\"}'\n    server.put_objects(template_1)\n\n    template_0 = server.create_template(name=\"TOC\", parent=template_1, report_type=\"Layout:toc\")\n    template_0.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Table of Content</h2>\"}'\n    template_0.set_filter(\"A|i_name|eq|__NonexistantName__;\")\n    server.put_objects(template_0)\n    server.put_objects(template_1)\n\n    template_2 = server.create_template(\n        name=\"Introduction\", parent=template_1, report_type=\"Layout:panel\"\n    )\n    template_2.params = '{\"HTML\": \"<h2>Introduction</h2>\", \"properties\": {\"TOCItem\": \"1\"}}'\n    template_2.set_filter(\"A|i_tags|cont|section=intro;\")\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_3 = server.create_template(name=\"Text\", parent=template_2, report_type=\"Layout:basic\")\n    template_3.params = '{\"properties\": {\"TOCItem\": \"0\"}}'\n    template_3.set_filter(\"A|i_type|cont|html,string;\")\n    server.put_objects(template_3)\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_4 = server.create_template(name=\"Tree\", parent=template_2, report_type=\"Layout:basic\")\n    template_4.params = '{\"properties\": {\"TOCItem\": \"0\"}}'\n    template_4.set_filter(\"A|i_type|cont|tree;\")\n    server.put_objects(template_4)\n    server.put_objects(template_2)\n    server.put_objects(template_1)\n\n    template_5 = server.create_template(\n        name=\"Results\", parent=template_1, report_type=\"Layout:panel\"\n    )\n    template_5.params = (\n        '{\"HTML\": \"<h2>Results</h2>\\\\nYour simulation results.\", \"properties\": {\"TOCItem\": \"1\"}}'\n    )\n    template_5.set_filter(\"A|i_tags|cont|section=data;\")\n    server.put_objects(template_5)\n    server.put_objects(template_1)"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#create-items-and-report-template",
        "title": "Multiple simulations in same database > Create items and report template",
        "section": "Create items and report template",
        "text": "Assume we have ran the design point dp0. Create the items. Check if the\ndatabase already contains the report template with the method\nget_list_reports.\nIf it doesn’t exist, then create it as well.\ncreate_items(dp=0)\nif \"Simulation Report\" not in adr_service.get_list_reports():\n    create_report_template(server=adr_service.serverobj)"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#create-items-from-second-simulation",
        "title": "Multiple simulations in same database > Create items from second simulation",
        "section": "Create items from second simulation",
        "text": "Now assume we separately ran the design point dp1. Connect to the\ncurrently running ADR service and push the new items in the same database.\nCheck if the report template already exists and create it only if it does not.\nnew_service = adr.Service(ansys_installation=r\"C:\\Program Files\\Ansys Inc\\v241\")\nnew_service.connect(url=adr_service.url)\ncreate_items(dp=1)\nif \"Simulation Report\" not in new_service.get_list_reports():\n    create_report_template(server=new_service.serverobj)"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#visualize-the-report",
        "title": "Multiple simulations in same database > Visualize the report",
        "section": "Visualize the report",
        "text": "Now the database contains data from both design point simulations. If you\nwere to simply visualize the report, both simulation results would appear.\nTo avoid that, use a filter to downselect the items to visualize each time.\nSetting the filter to look only at items with tag dp=dp0 will show the\nreport for the first design point. Simularly, filter for tag dp=dp1 will\ndisplay the report for the second design point.\nnew_service.visualize_report(report_name=\"Simulation Report\", filter=\"A|i_tags|cont|dp0;\")"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#visualize-the-report-for-dp1",
        "title": "Multiple simulations in same database > Visualize the report for dp1",
        "section": "Visualize the report for dp1",
        "text": "Visualize the report for the second design point. See how you only need to\nchange the filter.\nnew_service.visualize_report(report_name=\"Simulation Report\", filter=\"A|i_tags|cont|dp1;\")"
    },
    {
        "objectID": "examples/50-advanced/01-two_simulation_same_db",
        "href": "examples/50-advanced/01-two_simulation_same_db.html#close-the-service",
        "title": "Multiple simulations in same database > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-two_simulation_same_db.ipynb\nDownload Python source code: 01-two_simulation_same_db.py\nDownload zipped: 01-two_simulation_same_db.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/01_two_simulation_same_db_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.html#report",
        "title": "Report",
        "section": "Report",
        "text": "Provides for generating the Report object for the database.\nAnsys Dynamic Reporting object that provides the connection to the database.\nThe default is None.\nName of the report object in the database. The default is default.\nTemplateREST object from low-level ADR API. Do not modify.\nReport.export_html([directory_name, query, ...])\nExport report as static HTML.\nReport.export_pdf([file_name, query, page, ...])\nExport report as PDF.\nReport.get_guid()\nGet the guid corresponding to the report.\nReport.get_iframe([width, height, filter])\nGet the iframe object corresponding to the report.\nReport.get_report_component([prefix, ...])\nA HTML code of the web component for report fetching.\nReport.get_report_script()\nA block of JavaScript script to define the web component for report fetching.\nReport.get_url([filter])\nGet the URL corresponding to the report.\nReport.visualize([new_tab, filter])\nRender the report."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_bordered",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_bordered.html#table_bordered",
        "title": "table_bordered",
        "section": "table_bordered",
        "text": "Table bordering\nControl visibility of table borders.  Default: 1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.delete",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete objects from the database.\nList of objects to delete. The objects can be of one of these types:\n\"Item\", Report, \"Session\" or Dataset.\nDeleting a session or a dataset also deletes all items\nassociated with the session or dataset. Deleting a Report also\ndeletes all its children.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation=r'C:\\Program Files\\ANSYS Inc\\v232')\nadr_service.connect(url='http://localhost:8020')\nall_items = adr_service.query(type='Item')\nadr_service.delete(all_items)\nmy_report = adr_service.get_report(report_name='My Report')\nadr_service.delete([my_report])"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#tagging",
        "title": "Tagging",
        "section": "Tagging",
        "text": "Tagging is an important feature of Ansys Dynamic Reporting. Adding tags to items\nallows the database to organize them and the templates to create reports in\na precise and effective manner. This example shows how to add, modify, query,\nand delete tags on items.\nThis example assumes that you have a local Ansys installation.\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nNow that an Ansys Dynamic Reporting service is running on top of a new\ndatabase, create an item and set some tags on it. Use the\nget_tags method to\nsee the values of the tags.\nOnce the tags have been set, you can add or delete to them. Use the\nget_tags method\nto verify that the new value of the tags is the expected var=pressure dp=3.\nAdd a couple of other items and tag them. Then, query the database\nfor items that have a specific tag set on them. Given the preceding\ncode, this results in only two items. See the contents of the dp3_items\nlist.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-tagging.ipynb\nDownload Python source code: 00-tagging.py\nDownload zipped: 00-tagging.zip\nGallery generated by Sphinx-Gallery\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)\nmy_text = adr_service.create_item()\nmy_text.item_text = \"<h1>Analysis Title</h1>This is the first of many items\"\nmy_text.set_tags(\"var=pressure time=0.34\")\nmy_text.get_tags()\nmy_text.add_tag(tag=\"dp\", value=\"3\")\nmy_text.rem_tag(\"time\")\nmy_text.get_tags()\nmy_second_text = adr_service.create_item()\nmy_second_text.item_text = \"<h1>Second Text</h1>Second text item\"\nmy_second_text.set_tags(\"var=temperature dp=3\")\nmy_thid_text = adr_service.create_item()\nmy_thid_text.item_text = \"<h1>Third Text</h1>An other item\"\nmy_thid_text.set_tags(\"var=temperature dp=2\")\ndp3_items = adr_service.query(filter=\"A|i_tags|cont|dp=3\")\n# sphinx_gallery_thumbnail_path = '_static/default_thumb.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#start-an-ansys-dynamic-reporting-service",
        "title": "Tagging > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#create-an-item-and-tag-it",
        "title": "Tagging > Create an item and tag it",
        "section": "Create an item and tag it",
        "text": "Now that an Ansys Dynamic Reporting service is running on top of a new\ndatabase, create an item and set some tags on it. Use the\nget_tags method to\nsee the values of the tags.\nmy_text = adr_service.create_item()\nmy_text.item_text = \"<h1>Analysis Title</h1>This is the first of many items\"\nmy_text.set_tags(\"var=pressure time=0.34\")\nmy_text.get_tags()"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#modify-the-tags",
        "title": "Tagging > Modify the tags",
        "section": "Modify the tags",
        "text": "Once the tags have been set, you can add or delete to them. Use the\nget_tags method\nto verify that the new value of the tags is the expected var=pressure dp=3.\nmy_text.add_tag(tag=\"dp\", value=\"3\")\nmy_text.rem_tag(\"time\")\nmy_text.get_tags()"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#query-items-based-on-tag-values",
        "title": "Tagging > Query items based on tag values",
        "section": "Query items based on tag values",
        "text": "Add a couple of other items and tag them. Then, query the database\nfor items that have a specific tag set on them. Given the preceding\ncode, this results in only two items. See the contents of the dp3_items\nlist.\nmy_second_text = adr_service.create_item()\nmy_second_text.item_text = \"<h1>Second Text</h1>Second text item\"\nmy_second_text.set_tags(\"var=temperature dp=3\")\nmy_thid_text = adr_service.create_item()\nmy_thid_text.item_text = \"<h1>Third Text</h1>An other item\"\nmy_thid_text.set_tags(\"var=temperature dp=2\")\ndp3_items = adr_service.query(filter=\"A|i_tags|cont|dp=3\")"
    },
    {
        "objectID": "examples/25-intermediate/00-tagging",
        "href": "examples/25-intermediate/00-tagging.html#close-the-service",
        "title": "Tagging > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-tagging.ipynb\nDownload Python source code: 00-tagging.py\nDownload zipped: 00-tagging.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/default_thumb.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.xrange",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.xrange.html#xrange",
        "title": "xrange",
        "section": "xrange",
        "text": "X axis range\nThe range for the x axis. Example: 0.  10."
    },
    {
        "objectID": "class_documentation",
        "href": "class_documentation.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "Ansys Dynamic Reporting contains a low-level API that allows you to access\nall the available features and properties in full detail. While this low-level\nAPI is very powerful, it can also be quite complex to use and it requires a\nsteep learning curve. For a comprehensive description of this API, see\nthe section Low Level Python API.\nThe goal of PyDynamicReporting is to provide an easier, more Pythonic way to\nstart or connect to an Ansys Dynamic Reporting service so that you do not need\nto understand the intricacies of Ansys Dynamic Reporting to manipulate its\ndatabase and reports. For this reason, the PyDynamicReporting API provides only a subset\nof features, which are wrapped in such a way as to make the workflow easier.\nIf you are interested in extended control of all options and features of\nAnsys Dynamic Reporting, you can use its low-level API in conjunction\nwith the PyDnamicReporting API.\nTo use PyDynamicReporting to start or connect to an Ansys Dynamic Reporting service,\nyou create an instance of the Service class. You then use this instance to\nquery the database, to add and delete items, and to visualize reports.\nItems inside the Ansys Dynamic Reporting service are represented as instances\nof the Item class. You use methods in both the Item class and Service\nclass to create, query, and modify items.\nLastly, you create and use Report instances to access reports in Ansys\nDynamic Reporting.\nansys.dynamicreporting.core.Item([service, ...])\nProvides for creating an object that represents an Ansys Dynamic Reporting item.\nansys.dynamicreporting.core.Service([...])\nProvides for creating a connection to an Ansys Dynamic Reporting service.\nansys.dynamicreporting.core.Report([...])\nProvides for generating the Report object for the database."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux8",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux8.html#line_marker_aux8",
        "title": "line_marker_aux8",
        "section": "line_marker_aux8",
        "text": "Auxiliary data 8\nScalar value or name of a row accessible to line_marker_text as vaux8. May be a list."
    },
    {
        "objectID": "examples/00-basic/index",
        "href": "examples/00-basic/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Introductory examples show how to use PyDynamicReporting to create or connect to\nan Ansys Dynamic Reporting service, create a database for a new service, and\ncreate and visualize items in a database.\nsphx_glr_examples_00-basic_00-create_db.py\nsphx_glr_examples_00-basic_01-connect.py\nsphx_glr_examples_00-basic_02-plottype.py"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.get_report",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.get_report.html#get_report",
        "title": "get_report",
        "section": "get_report",
        "text": "Get a Report item that corresponds to a report in the database with a given\nname.\nName of the report in the database. The name must be for a top-level report, not a name\nof a subsection within a report.\nReport object. If no such object can be found, None is returned.\nThere is no ADR service associated with the current object.\nThe service does not have a report with the input name.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation=r'C:\\Program Files\\ANSYS Inc\\v232')\nadr_service.connect(url='http://localhost:8020')\nmy_report = adr_service.get_report(report_name = \"Top Level Report')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.format_column",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.format_column.html#format_column",
        "title": "format_column",
        "section": "format_column",
        "text": "Column labels format\nformat for column labels scientific sigfigsX floatdotX str date_XY"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.format_row",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.format_row.html#format_row",
        "title": "format_row",
        "section": "format_row",
        "text": "Row labels format\nformat for row labels scientific sigfigsX floatdotX str date_XY"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot_margins",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot_margins.html#plot_margins",
        "title": "plot_margins",
        "section": "plot_margins",
        "text": "Plot margins\nAdjust plot margin sizes in pixels: left top right bottom Example: default  default  5 \ndefault"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.yaxis_format",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.yaxis_format.html#yaxis_format",
        "title": "yaxis_format",
        "section": "yaxis_format",
        "text": "Y axis text format\nFormat for the y axis tick labels. Example: floatdot2"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.palette_position",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.palette_position.html#palette_position",
        "title": "palette_position",
        "section": "palette_position",
        "text": "Position of the colorbar\nPosition the colorbar center relative to plot bounds 0 1. Example on left: 0.2 0.5"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.legend_position",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.legend_position.html#legend_position",
        "title": "legend_position",
        "section": "legend_position",
        "text": "Position the legend\nPosition the legend relative to plot bounds 0 1.  Example on right: 1.2 0.5"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.zaxis_format",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.zaxis_format.html#zaxis_format",
        "title": "zaxis_format",
        "section": "zaxis_format",
        "text": "Z axis text format\nFormat for the z axis tick labels. Example: floatdot2"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux6",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux6.html#line_marker_aux6",
        "title": "line_marker_aux6",
        "section": "line_marker_aux6",
        "text": "Auxiliary data 6\nScalar value or name of a row accessible to line_marker_text as vaux6. May be a list."
    },
    {
        "objectID": "userguide/index",
        "href": "userguide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section describes concepts that you need to know to use PyDynamicReporting.\nThe PyDynamicReporting API has three main classes:\nService: Provides for starting and connecting to an Ansys Dynamic\nReporting service. This class also provides for creating, querying, and\ndeleting the database and for stopping an Ansys Dynamic Report service.\nItem: Provides access to the items in the database and allows\nthem to be modified.\nReport: Provides access to and rendering of Report objects.\nPyDynamicReporting supports creating and pushing these items into an Ansys\nDynamic Reporting service:\nImages\nAnimations\n3D Scenes (AVZ file format supported)\nTables\nTrees\nText (HTML and LaTeX file formats supported)\nFiles (generic file formats supported)\nThis code connects to a running Ansys Dynamic Reporting service and\npushes an image item on a new session:\nA rendering of the image object is embedded in the current interpreter. You\ncan follow the same steps to create and visualize other types of items.\nTo get the URL corresponding to an item, use this attribute:\nSimilarly, to get the iframe corresponding to an item, use this attribute:\nWith the corresponding URL or iframe, you can embed the item visualization\ninto any other app.\nIf you want to update an image, all you need to do is redefine\nthe item_image attribute. The Ansys Dynamic Reporting database is\nautomatically updated.\nPyDynamicReporting provides two main ways to visualize an item. The first is\nto visualize it standalone, as shown in the preceding code examples. The second\nis to visualize it together with all the other items that are present in the\ncurrent Ansys Dynamic Reporting session.\nEach time that you use the PyDnamicReporting\nstart method to\nstart an Ansys Dynamic Reporting service or the\nconnect method\nto connect to one, you are connected to a specific session. Each\nsession has its own GUID (globally unique identifier).\nOn the Ansys Dynamic Reporting object, you can execute the\nvisualize_report\nmethod to visualize all items that are present in the session.\nThe following code embeds a widget in the app that you are running\nfrom. It shows that both items (image and text) have been created.\nYou can start an Ansys Dynamic Reporting session in one Python interpreter\nand connect to it in a different interpreter or on a different machine by passing the\nsession GUID as the parameter in the connect\nmethod.\nThis code starts an Ansys Dynamic Reporting session in the first interpreter:\nThe session contains the GUID needed to connect to this session in a different\ninterpreter or on a different machine.\nThis GUID is then copied and pasted into another interpreter as shown in this code:\nOnce you are connected to the session, you can query its items:\nThe query method takes\na filter input that allows you to select the items to return. The query\nstring follows the same structure as the queries described in\nQuery Expressions\nin the documentation for Ansys Dynamic Reporting.\nTo get a list of the existing report templates in the database, use the\nget_list_reports\nmethod:\nTo query the database for a specific report, use the\nget_report\nmethod:\nThe template editor in Ansys Dynamic Reporting contains a feature for exporting\na Python script to create report templates on the connected server with all their\nsettings and properties and push these report templates to a new server.\nThis script uses the low-level API for Ansys Dynamic Reporting, which preceded\nPyDynamicReporting.\nA legacy script starts with these lines of code:\nFollowing these lines are a series of commands that describe the template names and properties.\nTo convert a legacy script to a report template for PyDynamicReporting, replace the preceding\nlines in the legacy script with these lines:\nEverything else in the script remains the same.\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\nfirst_image = adr_service.create_item()\nfirst_image.item_image = \"location\\image\\file.png\"\nfirst_image.visualize()\nfirst_image.url()\nfirst_image.get_iframe()\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\nfirst_image = adr_service.create_item()\nfirst_image.item_image = \"location\\image\\file.png\"\nfirst_text = adr_service.create_item()\nfirst_text.item_text = \"<h1>My Title</h1>This is the first example\"\nadr_service.visualize_report()\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\test_pydynamicreporting\",\n    port=8010,\n)\n_ = adr_service.start()\nsession_guid = adr_service.session_guid\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(url=\"http://localhost:8010\", session=session_guid)\nall_items = adr_service.query()\nonly_images = adr_service.query(filter=\"A|i_type|cont|image|\")\nall_reports = adr_service.get_list_reports()\nmy_report = adr_service.get_report(report_name=\"My Top Report\")\nmy_report.visualize()\nimport cei\nfrom template_editor import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://127.0.0.1:9528\", \"nexus\", \"cei\")\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(url=\"http://localhost:8010\")\nserver = adr_\nservice.serverobj"
    },
    {
        "objectID": "userguide/index",
        "href": "userguide/index.html#api-overview",
        "title": "User guide > API overview",
        "section": "API overview",
        "text": "The PyDynamicReporting API has three main classes:\nService: Provides for starting and connecting to an Ansys Dynamic\nReporting service. This class also provides for creating, querying, and\ndeleting the database and for stopping an Ansys Dynamic Report service.\nItem: Provides access to the items in the database and allows\nthem to be modified.\nReport: Provides access to and rendering of Report objects.\nPyDynamicReporting supports creating and pushing these items into an Ansys\nDynamic Reporting service:\nImages\nAnimations\n3D Scenes (AVZ file format supported)\nTables\nTrees\nText (HTML and LaTeX file formats supported)\nFiles (generic file formats supported)\nThis code connects to a running Ansys Dynamic Reporting service and\npushes an image item on a new session:\nA rendering of the image object is embedded in the current interpreter. You\ncan follow the same steps to create and visualize other types of items.\nTo get the URL corresponding to an item, use this attribute:\nSimilarly, to get the iframe corresponding to an item, use this attribute:\nWith the corresponding URL or iframe, you can embed the item visualization\ninto any other app.\nIf you want to update an image, all you need to do is redefine\nthe item_image attribute. The Ansys Dynamic Reporting database is\nautomatically updated.\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\nfirst_image = adr_service.create_item()\nfirst_image.item_image = \"location\\image\\file.png\"\nfirst_image.visualize()\nfirst_image.url()\nfirst_image.get_iframe()"
    },
    {
        "objectID": "userguide/index",
        "href": "userguide/index.html#visualize-an-ansys-dynamic-reporting-item",
        "title": "User guide > Visualize an Ansys Dynamic reporting item",
        "section": "Visualize an Ansys Dynamic reporting item",
        "text": "PyDynamicReporting provides two main ways to visualize an item. The first is\nto visualize it standalone, as shown in the preceding code examples. The second\nis to visualize it together with all the other items that are present in the\ncurrent Ansys Dynamic Reporting session.\nEach time that you use the PyDnamicReporting\nstart method to\nstart an Ansys Dynamic Reporting service or the\nconnect method\nto connect to one, you are connected to a specific session. Each\nsession has its own GUID (globally unique identifier).\nOn the Ansys Dynamic Reporting object, you can execute the\nvisualize_report\nmethod to visualize all items that are present in the session.\nThe following code embeds a widget in the app that you are running\nfrom. It shows that both items (image and text) have been created.\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\nfirst_image = adr_service.create_item()\nfirst_image.item_image = \"location\\image\\file.png\"\nfirst_text = adr_service.create_item()\nfirst_text.item_text = \"<h1>My Title</h1>This is the first example\"\nadr_service.visualize_report()"
    },
    {
        "objectID": "userguide/index",
        "href": "userguide/index.html#connect-to-and-query-an-existing-ansys-dynamic-reporting-session",
        "title": "User guide > Connect to and query an existing Ansys Dynamic Reporting session",
        "section": "Connect to and query an existing Ansys Dynamic Reporting session",
        "text": "You can start an Ansys Dynamic Reporting session in one Python interpreter\nand connect to it in a different interpreter or on a different machine by passing the\nsession GUID as the parameter in the connect\nmethod.\nThis code starts an Ansys Dynamic Reporting session in the first interpreter:\nThe session contains the GUID needed to connect to this session in a different\ninterpreter or on a different machine.\nThis GUID is then copied and pasted into another interpreter as shown in this code:\nOnce you are connected to the session, you can query its items:\nThe query method takes\na filter input that allows you to select the items to return. The query\nstring follows the same structure as the queries described in\nQuery Expressions\nin the documentation for Ansys Dynamic Reporting.\nTo get a list of the existing report templates in the database, use the\nget_list_reports\nmethod:\nTo query the database for a specific report, use the\nget_report\nmethod:\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\test_pydynamicreporting\",\n    port=8010,\n)\n_ = adr_service.start()\nsession_guid = adr_service.session_guid\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(url=\"http://localhost:8010\", session=session_guid)\nall_items = adr_service.query()\nonly_images = adr_service.query(filter=\"A|i_type|cont|image|\")\nall_reports = adr_service.get_list_reports()\nmy_report = adr_service.get_report(report_name=\"My Top Report\")\nmy_report.visualize()"
    },
    {
        "objectID": "userguide/index",
        "href": "userguide/index.html#backward-compatibility-with-template-generator-scripts",
        "title": "User guide > Backward compatibility with template generator scripts",
        "section": "Backward compatibility with template generator scripts",
        "text": "The template editor in Ansys Dynamic Reporting contains a feature for exporting\na Python script to create report templates on the connected server with all their\nsettings and properties and push these report templates to a new server.\nThis script uses the low-level API for Ansys Dynamic Reporting, which preceded\nPyDynamicReporting.\nA legacy script starts with these lines of code:\nFollowing these lines are a series of commands that describe the template names and properties.\nTo convert a legacy script to a report template for PyDynamicReporting, replace the preceding\nlines in the legacy script with these lines:\nEverything else in the script remains the same.\nimport cei\nfrom template_editor import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://127.0.0.1:9528\", \"nexus\", \"cei\")\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(url=\"http://localhost:8010\")\nserver = adr_\nservice.serverobj"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.get_tags",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.get_tags.html#get_tags",
        "title": "get_tags",
        "section": "get_tags",
        "text": "Get the tags on the item.\nTags on the item.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nitem_list = adr_service.query()\nfirst_item = item_list[0]\nall_tags = first_item.get_tags()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.get_report_component",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.get_report_component.html#get_report_component",
        "title": "get_report_component",
        "section": "get_report_component",
        "text": "A HTML code of the web component for report fetching. By default, the web\ncomponent uses iframe to embed the report. If users have provided additional\nconfiguration settings on their application server or on another proxy server,\nthe web component will use fetch API to embed the report directly in the\napplication.\nA user defined key in the server to reroute and fetch the report from ADR server. If not provided,\nthe web component will use the default iframe to embed the report in the application.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\nThe hosting app’s stylesheet path. The default is \"\". The syntax is used to overwrite report\nstyling using an external CSS file.\nWidth of the iframe if the web component uses <iframe> to embed report. The default is 1000.\nHeight of the iframe if the web component uses <iframe> to embed report. The default is 800.\nThe web component HTML code (as string) that will get embedded in the HTML page\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = 'Top report')\nmy_report.get_report_component()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.histogram_threshold",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.histogram_threshold.html#histogram_threshold",
        "title": "histogram_threshold",
        "section": "histogram_threshold",
        "text": "Histogram rendering threshold\nThe threshold for data table columns to render as histogram. Default: 50"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.col_tags",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.col_tags.html#col_tags",
        "title": "col_tags",
        "section": "col_tags",
        "text": "List of tags for each table column"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.connect",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.connect.html#connect",
        "title": "connect",
        "section": "connect",
        "text": "Connect to a running service.\nURL for the service. The default is http://localhost:8000.\nUsername for the service. The default is \"nexus\".\nPassword for the service. The default is \"cei\".\nGUID for the session to work with. The default is \"\",\nin which case a new session with its own GUID is created.\nAll created items are then pushed on this session. Visualizations\nare all filtered so that only items for this session are shown.\nThe current Service doesn not have a valid server associated to it.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect(url=\"http://localhost:8010\", username='admin', password = 'mypsw')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.get_report_script",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.get_report_script.html#get_report_script",
        "title": "get_report_script",
        "section": "get_report_script",
        "text": "A block of JavaScript script to define the web component for report fetching.\nNote that the function return a block of string that stands for JavaScript codes\nand need to be wrapped in a <script>…</script> HTML tag.\nJavaScript code to define the report fetching web component (as a block of string)\nthat will get embedded in the HTML page\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = 'Top report')\nmy_report.get_report_script()"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#create-a-report-from-scratch",
        "title": "Create a report from scratch",
        "section": "Create a report from scratch",
        "text": "To use PyDynamicReporting to build a report from scratch, you start\na new Ansys Dynamic Reporting instance on a new database, populate it,\namd generate a report template. As a result, you get a report.\nThis example assumes that you have a local Ansys installation.\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nCreate a report template using the low-level API for Ansys Dynamic Reporting.\nUse the get_list_reports\nmethod on the Ansys Dynamic Reporting object to verify that there is one\ntop-level report in the database now. This call returns a list of the names\nof the top-level reports.\nNow that the report template is set, populate the database with items having\nproper tags and names.\nVisualize the report.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-complete_report.ipynb\nDownload Python source code: 00-complete_report.py\nDownload zipped: 00-complete_report.zip\nGallery generated by Sphinx-Gallery\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nport = 8080\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir, port=port)\nsession_guid = adr_service.start(create_db=True)\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nadr_service.connect(url=f\"http://localhost:{port}\")\nserver = adr_service.serverobj\n\ntemplate_003 = server.create_template(\n    name=\"Solution Analysis from Multiphysics simulation\", parent=None, report_type=\"Layout:basic\"\n)\ntemplate_003.params = '{\"HTML\": \"<h1>Solution Report</h1>\"}'\ntemplate_003.set_filter(\"A|i_tags|cont|solution=solverA;\")\nserver.put_objects(template_003)\n\ntemplate_011 = server.create_template(\n    name=\"Project Details\", parent=template_003, report_type=\"Layout:basic\"\n)\ntemplate_011.params = (\n    '{\"TOCitems\": 1, \"HTML\": \"<h2>Project Details</h2>\", \"properties\": {\"justification\": \"left\"}}'\n)\ntemplate_011.set_filter(\"A|i_type|cont|html,string;A|i_tags|cont|text=project_details;\")\nserver.put_objects(template_011)\nserver.put_objects(template_003)\n\ntemplate_000 = server.create_template(name=\"TOC\", parent=template_003, report_type=\"Layout:toc\")\ntemplate_000.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Table of Contents</h2>\"}'\ntemplate_000.set_filter(\"A|i_name|eq|__NonexistantName__;\")\nserver.put_objects(template_000)\nserver.put_objects(template_003)\n\ntemplate_004 = server.create_template(\n    name=\"TOC Figures\", parent=template_003, report_type=\"Layout:toc\"\n)\ntemplate_004.params = (\n    '{\"TOCitems\": 0, \"TOCfigures\": 1, \"HTML\": \"<h2>List of Figures</h2>\", \"TOCtables\": 0}'\n)\ntemplate_004.set_filter(\"A|i_name|eq|__NonexistantName__;\")\nserver.put_objects(template_004)\nserver.put_objects(template_003)\n\ntemplate_014 = server.create_template(\n    name=\"Introduction\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_014.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Introduction</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_014.set_filter(\"A|i_tags|cont|section=intro;\")\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_015 = server.create_template(name=\"text\", parent=template_014, report_type=\"Layout:basic\")\ntemplate_015.params = '{\"properties\": {\"TOCItem\": \"0\", \"justification\": \"left\"}}'\ntemplate_015.set_filter(\"A|i_type|cont|html,string;\")\nserver.put_objects(template_015)\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_016 = server.create_template(name=\"img\", parent=template_014, report_type=\"Layout:basic\")\ntemplate_016.params = (\n    '{\"properties\": {\"TOCName\": \"Multiphysics Workflow\", \"TOCItem\": \"\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_016.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_016)\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_005 = server.create_template(\n    name=\"CAD Model Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_005.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>CAD Model Summary</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_005.set_filter(\"A|i_tags|cont|section=cad_summary;\")\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_010 = server.create_template(\n    name=\"Summary of the Design Analysis\", parent=template_005, report_type=\"Layout:basic\"\n)\ntemplate_010.params = (\n    '{\"HTML\": \"<h3>Summary of the Design Analysis</h3>\", \"properties\": {\"TOCLevel\": \"1\"}}'\n)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_018 = server.create_template(\n    name=\"table_params\", parent=template_010, report_type=\"Layout:basic\"\n)\ntemplate_018.params = '{\"properties\": {\"TOCItem\": \"2\"}}'\ntemplate_018.set_filter(\"A|i_type|cont|table;\")\nserver.put_objects(template_018)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_017 = server.create_template(name=\"img\", parent=template_010, report_type=\"Layout:basic\")\ntemplate_017.params = (\n    '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"CAD Configuration\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_017.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_017)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_006 = server.create_template(\n    name=\"Preliminary Analysis Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_006.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Preliminary Analysis Summary</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_006.set_filter(\"A|i_tags|cont|section=preliminar_summary;\")\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_012 = server.create_template(\n    name=\"Results Summary for Preliminary Analysis\", parent=template_006, report_type=\"Layout:basic\"\n)\ntemplate_012.params = (\n    '{\"HTML\": \"<h3>Result summary for Preliminar Analysis</h3>\", \"properties\": {\"TOCLevel\": \"1\"}}'\n)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_019 = server.create_template(name=\"img\", parent=template_012, report_type=\"Layout:basic\")\ntemplate_019.params = (\n    '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"Discovery CAD\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_019.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_019)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_002 = server.create_template(\n    name=\"table_params\", parent=template_012, report_type=\"Layout:basic\"\n)\ntemplate_002.params = '{\"properties\": {\"TOCItem\": \"2\"}}'\ntemplate_002.set_filter(\"A|i_type|cont|table;\")\nserver.put_objects(template_002)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_007 = server.create_template(\n    name=\"Detailed Analysis Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_007.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Detailedy Analysis Summary</h2>\\\\nDetailed analysis constitutes detailed CFD (Computational Fluid Dynamics) analysis workflow with fluid solver and required data is transferred back to the CAD calibration.\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_007.set_filter(\"A|i_tags|cont|section=detailed_summary;\")\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_020 = server.create_template(name=\"img\", parent=template_007, report_type=\"Layout:basic\")\ntemplate_020.params = '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"Mesh Review\", \"TOCFigure\": \"1\"}}'\ntemplate_020.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_020)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_013 = server.create_template(\n    name=\"Mesh Summary\", parent=template_007, report_type=\"Layout:basic\"\n)\ntemplate_013.params = (\n    '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Mesh Summary</h3>\"}'\n)\ntemplate_013.set_filter(\"A|i_type|cont|table;A|i_tags|cont|table=meshsummary;\")\nserver.put_objects(template_013)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_021 = server.create_template(\n    name=\"Results Summary of Detailed Analysis\", parent=template_007, report_type=\"Layout:basic\"\n)\ntemplate_021.params = '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Results Summary of Detailed Analysis</h3>\", \"column_count\": 1, \"column_widths\": [1.0]}'\ntemplate_021.set_filter(\"A|i_type|cont|table;A|i_tags|cont|table=results;\")\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_001 = server.create_template(name=\"table\", parent=template_021, report_type=\"Layout:basic\")\ntemplate_001.params = '{\"properties\": {\"TOCItem\": \"\"}}'\ntemplate_001.set_filter(\"A|i_tags|cont|show=table;\")\nserver.put_objects(template_001)\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_022 = server.create_template(name=\"plots\", parent=template_021, report_type=\"Layout:basic\")\ntemplate_022.params = '{\"properties\": {\"TOCItem\": \"0\", \"plot\": \"line\", \"TOCFigure\": \"2\", \"xaxis\": \"0\", \"format\": \"floatdot0\"}, \"column_count\": 2, \"column_widths\": [1.0, 1.0]}'\ntemplate_022.set_filter(\"A|i_tags|cont|show=plot;\")\nserver.put_objects(template_022)\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_008 = server.create_template(\n    name=\"Results & Conclusion\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_008.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Results & Conclusion</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_008.set_filter(\"A|i_tags|cont|section=results;\")\nserver.put_objects(template_008)\nserver.put_objects(template_003)\n\ntemplate_009 = server.create_template(\n    name=\"Results\", parent=template_008, report_type=\"Layout:basic\"\n)\ntemplate_009.params = '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Results</h3>\\\\nResults are feedback for model calibrarion and detailed summary of results as below.\"}'\ntemplate_009.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_009)\nserver.put_objects(template_008)\nserver.put_objects(template_003)\n\ntemplate_023 = server.create_template(\n    name=\"References\", parent=template_003, report_type=\"Layout:basic\"\n)\ntemplate_023.params = '{\"TOCitems\": 1, \"HTML\": \"<h3>References</h3>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\", \"justification\": \"left\"}}'\ntemplate_023.set_filter(\"A|i_tags|cont|section=references;\")\nserver.put_objects(template_023)\nserver.put_objects(template_003)\nadr_service.get_list_reports()\na = adr_service.create_item(obj_name=\"introduction\")\na.item_text = \"Project Name: Multiphysics Solution<p></p><p></p>\\r\\n\\r\\nNote:  <p></p>\\r\\n\\r\\n[Images/Json data/plots/tables etc., are getting generated on the fly at each step and getting saved to Ansys Dynamic Reporting database with appropriate tags, based on the report requirement. The report will be generated with pre-defined template] \\r\\n\"\na.set_tags(\"solution=solverA text=project_details\")\nb = adr_service.create_item(obj_name=\"Description\")\nb.item_text = \"[some static content] <p></p>\\r\\nThe workflow provides calibrarion of the CAD model by high-fidelity 3D physics based solution. \\r\\nThis workflow ensures model consistency through design cycle - from CAD via Discovery to advanced Electronic-Fluid multi-physics.\\r\\n\"\nb.set_tags(\"solution=solverA section=intro\")\nb.get_tags()\nc = adr_service.create_item(obj_name=\"Schema\")\nc.item_image = r\"C:\\tmp\\schema.png\"\nc.set_tags(\"solution=solverA section=intro\")\nd = adr_service.create_item(obj_name=\"Schema\")\nd.item_image = r\"C:\\tmp\\sections.png\"\nd.set_tags(\"solution=solverA section=cad_summary\")\ne = adr_service.create_item(obj_name=\"Schema\")\ne.item_image = r\"C:\\tmp\\preliminary.png\"\ne.set_tags(\"solution=solverA section=preliminar_summary\")\nf = adr_service.create_item(obj_name=\"Schema\")\nf.item_image = r\"C:\\tmp\\solution.png\"\nf.set_tags(\"solution=solverA section=detailed_summary\")\ng = adr_service.create_item(obj_name=\"param_input\")\ng.table_dict[\"rowlbls\"] = [\n    \"Inlet Temperature\",\n    \"Total Losses\",\n    \"Inlet Flow Rate\",\n    \"Shaft Temperature\",\n    \"Shaft Flow Rate\",\n]\ng.item_table = np.array([[\"67\"], [\"1.25\"], [\"4.2\"], [\"67\"], [\"4.2\"]], dtype=\"|S20\")\ng.set_tags(\"solution=solverA section=cad_summary\")\nh = adr_service.create_item(obj_name=\"preliminary_table\")\nh.table_dict[\"rowlbls\"] = [\n    \"Max Domain Temp [Celsius]\",\n    \"Water Pressure [Pa]\",\n    \"Water Outlet Temp [Celsius]\",\n]\nh.item_table = np.array([[\"177\"], [\"400\"], [\"67\"]], dtype=\"|S20\")\nh.set_tags(\"solution=solverA section=preliminar_summary\")\ni = adr_service.create_item(obj_name=\"detailed_mesh_table\")\ni.table_dict[\"rowlbls\"] = [\"Total Cell Count\", \"Min Orthogal Quality\", \"Max aspect ratio\", \"Wrap\"]\ni.item_table = np.array([[\"626037\"], [\"0.2\"], [\"17.59\"], [\"0.4\"]], dtype=\"|S20\")\ni.set_tags(\"solution=solverA section=detailed_summary table=meshsummary\")\ntable = adr_service.create_item(obj_name=\"detailed_res_table\")\ntable.table_dict[\"rowlbls\"] = [\n    \"Max Domain Temp [Celsius]\",\n    \"Water Pressure Drop [Pa]\",\n    \"Water Outlet Temperature [Celsius]\",\n]\ntable.item_table = np.array([[\"177\"], [\"500\"], [\"67\"]], dtype=\"|S20\")\ntable.set_tags(\"show=table table=results section=detailed_summary solution=solverA\")\nm = adr_service.create_item(obj_name=\"monitors\")\nm.table_dict[\"rowlbls\"] = [\"Iteration\", \"Monitor Parameter\"]\nm.item_table = np.array(\n    [\n        [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n        [\"100\", \"90\", \"93\", \"88\", \"76\", \"71\", \"66\", \"60\", \"55\", \"53\", \"52\"],\n    ],\n    dtype=\"|S20\",\n)\nm.set_tags(\"show=plot table=results section=detailed_summary solution=solverA\")\nn = adr_service.create_item(obj_name=\"Convergence\")\nn.table_dict[\"rowlbls\"] = [\"Iteration\", \"Val 1\", \"Val 2\", \"Val 3\"]\nn.item_table = np.array(\n    [\n        [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n        [\"100\", \"90\", \"70\", \"60\", \"30\", \"20\", \"15\", \"15\", \"14\", \"13\", \"15\"],\n        [\"87\", \"85\", \"81\", \"80\", \"73\", \"60\", \"46\", \"20\", \"18\", \"17\", \"10\"],\n        [\"77\", \"73\", \"55\", \"53\", \"51\", \"47\", \"44\", \"30\", \"32\", \"20\", \"18\"],\n    ],\n    dtype=\"|S20\",\n)\nn.set_tags(\"show=plot table=results section=detailed_summary solution=solverA\")\no = adr_service.create_item(obj_name=\"references\")\no.item_text = \"<ul>\\r\\n  <li>Author, A. B. C., Author D. E., ... , Publication Year, Book, title, Publisher.</li>\\r\\n  <li>Author, F. G. H., Author I. J., ... , Publication Year, Book, title, Publisher.</li>\\r\\n</ul>\"\no.set_tags(\"solution=solverA section=references\")\nadr_service.visualize_report(report_name=\"Solution Analysis from Multiphysics simulation\")\n# sphinx_gallery_thumbnail_path = '_static/00_complete_report_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#start-an-ansys-dynamic-reporting-service",
        "title": "Create a report from scratch > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nport = 8080\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir, port=port)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#create-a-report-template",
        "title": "Create a report from scratch > Create a report template",
        "section": "Create a report template",
        "text": "Create a report template using the low-level API for Ansys Dynamic Reporting.\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nadr_service.connect(url=f\"http://localhost:{port}\")\nserver = adr_service.serverobj\n\ntemplate_003 = server.create_template(\n    name=\"Solution Analysis from Multiphysics simulation\", parent=None, report_type=\"Layout:basic\"\n)\ntemplate_003.params = '{\"HTML\": \"<h1>Solution Report</h1>\"}'\ntemplate_003.set_filter(\"A|i_tags|cont|solution=solverA;\")\nserver.put_objects(template_003)\n\ntemplate_011 = server.create_template(\n    name=\"Project Details\", parent=template_003, report_type=\"Layout:basic\"\n)\ntemplate_011.params = (\n    '{\"TOCitems\": 1, \"HTML\": \"<h2>Project Details</h2>\", \"properties\": {\"justification\": \"left\"}}'\n)\ntemplate_011.set_filter(\"A|i_type|cont|html,string;A|i_tags|cont|text=project_details;\")\nserver.put_objects(template_011)\nserver.put_objects(template_003)\n\ntemplate_000 = server.create_template(name=\"TOC\", parent=template_003, report_type=\"Layout:toc\")\ntemplate_000.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Table of Contents</h2>\"}'\ntemplate_000.set_filter(\"A|i_name|eq|__NonexistantName__;\")\nserver.put_objects(template_000)\nserver.put_objects(template_003)\n\ntemplate_004 = server.create_template(\n    name=\"TOC Figures\", parent=template_003, report_type=\"Layout:toc\"\n)\ntemplate_004.params = (\n    '{\"TOCitems\": 0, \"TOCfigures\": 1, \"HTML\": \"<h2>List of Figures</h2>\", \"TOCtables\": 0}'\n)\ntemplate_004.set_filter(\"A|i_name|eq|__NonexistantName__;\")\nserver.put_objects(template_004)\nserver.put_objects(template_003)\n\ntemplate_014 = server.create_template(\n    name=\"Introduction\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_014.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Introduction</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_014.set_filter(\"A|i_tags|cont|section=intro;\")\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_015 = server.create_template(name=\"text\", parent=template_014, report_type=\"Layout:basic\")\ntemplate_015.params = '{\"properties\": {\"TOCItem\": \"0\", \"justification\": \"left\"}}'\ntemplate_015.set_filter(\"A|i_type|cont|html,string;\")\nserver.put_objects(template_015)\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_016 = server.create_template(name=\"img\", parent=template_014, report_type=\"Layout:basic\")\ntemplate_016.params = (\n    '{\"properties\": {\"TOCName\": \"Multiphysics Workflow\", \"TOCItem\": \"\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_016.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_016)\nserver.put_objects(template_014)\nserver.put_objects(template_003)\n\ntemplate_005 = server.create_template(\n    name=\"CAD Model Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_005.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>CAD Model Summary</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_005.set_filter(\"A|i_tags|cont|section=cad_summary;\")\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_010 = server.create_template(\n    name=\"Summary of the Design Analysis\", parent=template_005, report_type=\"Layout:basic\"\n)\ntemplate_010.params = (\n    '{\"HTML\": \"<h3>Summary of the Design Analysis</h3>\", \"properties\": {\"TOCLevel\": \"1\"}}'\n)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_018 = server.create_template(\n    name=\"table_params\", parent=template_010, report_type=\"Layout:basic\"\n)\ntemplate_018.params = '{\"properties\": {\"TOCItem\": \"2\"}}'\ntemplate_018.set_filter(\"A|i_type|cont|table;\")\nserver.put_objects(template_018)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_017 = server.create_template(name=\"img\", parent=template_010, report_type=\"Layout:basic\")\ntemplate_017.params = (\n    '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"CAD Configuration\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_017.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_017)\nserver.put_objects(template_010)\nserver.put_objects(template_005)\nserver.put_objects(template_003)\n\ntemplate_006 = server.create_template(\n    name=\"Preliminary Analysis Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_006.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Preliminary Analysis Summary</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_006.set_filter(\"A|i_tags|cont|section=preliminar_summary;\")\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_012 = server.create_template(\n    name=\"Results Summary for Preliminary Analysis\", parent=template_006, report_type=\"Layout:basic\"\n)\ntemplate_012.params = (\n    '{\"HTML\": \"<h3>Result summary for Preliminar Analysis</h3>\", \"properties\": {\"TOCLevel\": \"1\"}}'\n)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_019 = server.create_template(name=\"img\", parent=template_012, report_type=\"Layout:basic\")\ntemplate_019.params = (\n    '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"Discovery CAD\", \"TOCFigure\": \"1\"}}'\n)\ntemplate_019.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_019)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_002 = server.create_template(\n    name=\"table_params\", parent=template_012, report_type=\"Layout:basic\"\n)\ntemplate_002.params = '{\"properties\": {\"TOCItem\": \"2\"}}'\ntemplate_002.set_filter(\"A|i_type|cont|table;\")\nserver.put_objects(template_002)\nserver.put_objects(template_012)\nserver.put_objects(template_006)\nserver.put_objects(template_003)\n\ntemplate_007 = server.create_template(\n    name=\"Detailed Analysis Summary\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_007.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Detailedy Analysis Summary</h2>\\\\nDetailed analysis constitutes detailed CFD (Computational Fluid Dynamics) analysis workflow with fluid solver and required data is transferred back to the CAD calibration.\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_007.set_filter(\"A|i_tags|cont|section=detailed_summary;\")\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_020 = server.create_template(name=\"img\", parent=template_007, report_type=\"Layout:basic\")\ntemplate_020.params = '{\"properties\": {\"TOCItem\": \"0\", \"TOCName\": \"Mesh Review\", \"TOCFigure\": \"1\"}}'\ntemplate_020.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_020)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_013 = server.create_template(\n    name=\"Mesh Summary\", parent=template_007, report_type=\"Layout:basic\"\n)\ntemplate_013.params = (\n    '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Mesh Summary</h3>\"}'\n)\ntemplate_013.set_filter(\"A|i_type|cont|table;A|i_tags|cont|table=meshsummary;\")\nserver.put_objects(template_013)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_021 = server.create_template(\n    name=\"Results Summary of Detailed Analysis\", parent=template_007, report_type=\"Layout:basic\"\n)\ntemplate_021.params = '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Results Summary of Detailed Analysis</h3>\", \"column_count\": 1, \"column_widths\": [1.0]}'\ntemplate_021.set_filter(\"A|i_type|cont|table;A|i_tags|cont|table=results;\")\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_001 = server.create_template(name=\"table\", parent=template_021, report_type=\"Layout:basic\")\ntemplate_001.params = '{\"properties\": {\"TOCItem\": \"\"}}'\ntemplate_001.set_filter(\"A|i_tags|cont|show=table;\")\nserver.put_objects(template_001)\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_022 = server.create_template(name=\"plots\", parent=template_021, report_type=\"Layout:basic\")\ntemplate_022.params = '{\"properties\": {\"TOCItem\": \"0\", \"plot\": \"line\", \"TOCFigure\": \"2\", \"xaxis\": \"0\", \"format\": \"floatdot0\"}, \"column_count\": 2, \"column_widths\": [1.0, 1.0]}'\ntemplate_022.set_filter(\"A|i_tags|cont|show=plot;\")\nserver.put_objects(template_022)\nserver.put_objects(template_021)\nserver.put_objects(template_007)\nserver.put_objects(template_003)\n\ntemplate_008 = server.create_template(\n    name=\"Results & Conclusion\", parent=template_003, report_type=\"Layout:panel\"\n)\ntemplate_008.params = '{\"TOCitems\": 1, \"HTML\": \"<h2>Results & Conclusion</h2>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\"}}'\ntemplate_008.set_filter(\"A|i_tags|cont|section=results;\")\nserver.put_objects(template_008)\nserver.put_objects(template_003)\n\ntemplate_009 = server.create_template(\n    name=\"Results\", parent=template_008, report_type=\"Layout:basic\"\n)\ntemplate_009.params = '{\"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"1\"}, \"HTML\": \"<h3>Results</h3>\\\\nResults are feedback for model calibrarion and detailed summary of results as below.\"}'\ntemplate_009.set_filter(\"A|i_type|cont|image;\")\nserver.put_objects(template_009)\nserver.put_objects(template_008)\nserver.put_objects(template_003)\n\ntemplate_023 = server.create_template(\n    name=\"References\", parent=template_003, report_type=\"Layout:basic\"\n)\ntemplate_023.params = '{\"TOCitems\": 1, \"HTML\": \"<h3>References</h3>\", \"properties\": {\"TOCItem\": \"1\", \"TOCLevel\": \"0\", \"justification\": \"left\"}}'\ntemplate_023.set_filter(\"A|i_tags|cont|section=references;\")\nserver.put_objects(template_023)\nserver.put_objects(template_003)"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#verify-the-report",
        "title": "Create a report from scratch > Verify the report",
        "section": "Verify the report",
        "text": "Use the get_list_reports\nmethod on the Ansys Dynamic Reporting object to verify that there is one\ntop-level report in the database now. This call returns a list of the names\nof the top-level reports.\nadr_service.get_list_reports()"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#create-items",
        "title": "Create a report from scratch > Create items",
        "section": "Create items",
        "text": "Now that the report template is set, populate the database with items having\nproper tags and names.\na = adr_service.create_item(obj_name=\"introduction\")\na.item_text = \"Project Name: Multiphysics Solution<p></p><p></p>\\r\\n\\r\\nNote:  <p></p>\\r\\n\\r\\n[Images/Json data/plots/tables etc., are getting generated on the fly at each step and getting saved to Ansys Dynamic Reporting database with appropriate tags, based on the report requirement. The report will be generated with pre-defined template] \\r\\n\"\na.set_tags(\"solution=solverA text=project_details\")\nb = adr_service.create_item(obj_name=\"Description\")\nb.item_text = \"[some static content] <p></p>\\r\\nThe workflow provides calibrarion of the CAD model by high-fidelity 3D physics based solution. \\r\\nThis workflow ensures model consistency through design cycle - from CAD via Discovery to advanced Electronic-Fluid multi-physics.\\r\\n\"\nb.set_tags(\"solution=solverA section=intro\")\nb.get_tags()\nc = adr_service.create_item(obj_name=\"Schema\")\nc.item_image = r\"C:\\tmp\\schema.png\"\nc.set_tags(\"solution=solverA section=intro\")\nd = adr_service.create_item(obj_name=\"Schema\")\nd.item_image = r\"C:\\tmp\\sections.png\"\nd.set_tags(\"solution=solverA section=cad_summary\")\ne = adr_service.create_item(obj_name=\"Schema\")\ne.item_image = r\"C:\\tmp\\preliminary.png\"\ne.set_tags(\"solution=solverA section=preliminar_summary\")\nf = adr_service.create_item(obj_name=\"Schema\")\nf.item_image = r\"C:\\tmp\\solution.png\"\nf.set_tags(\"solution=solverA section=detailed_summary\")\ng = adr_service.create_item(obj_name=\"param_input\")\ng.table_dict[\"rowlbls\"] = [\n    \"Inlet Temperature\",\n    \"Total Losses\",\n    \"Inlet Flow Rate\",\n    \"Shaft Temperature\",\n    \"Shaft Flow Rate\",\n]\ng.item_table = np.array([[\"67\"], [\"1.25\"], [\"4.2\"], [\"67\"], [\"4.2\"]], dtype=\"|S20\")\ng.set_tags(\"solution=solverA section=cad_summary\")\nh = adr_service.create_item(obj_name=\"preliminary_table\")\nh.table_dict[\"rowlbls\"] = [\n    \"Max Domain Temp [Celsius]\",\n    \"Water Pressure [Pa]\",\n    \"Water Outlet Temp [Celsius]\",\n]\nh.item_table = np.array([[\"177\"], [\"400\"], [\"67\"]], dtype=\"|S20\")\nh.set_tags(\"solution=solverA section=preliminar_summary\")\ni = adr_service.create_item(obj_name=\"detailed_mesh_table\")\ni.table_dict[\"rowlbls\"] = [\"Total Cell Count\", \"Min Orthogal Quality\", \"Max aspect ratio\", \"Wrap\"]\ni.item_table = np.array([[\"626037\"], [\"0.2\"], [\"17.59\"], [\"0.4\"]], dtype=\"|S20\")\ni.set_tags(\"solution=solverA section=detailed_summary table=meshsummary\")\ntable = adr_service.create_item(obj_name=\"detailed_res_table\")\ntable.table_dict[\"rowlbls\"] = [\n    \"Max Domain Temp [Celsius]\",\n    \"Water Pressure Drop [Pa]\",\n    \"Water Outlet Temperature [Celsius]\",\n]\ntable.item_table = np.array([[\"177\"], [\"500\"], [\"67\"]], dtype=\"|S20\")\ntable.set_tags(\"show=table table=results section=detailed_summary solution=solverA\")\nm = adr_service.create_item(obj_name=\"monitors\")\nm.table_dict[\"rowlbls\"] = [\"Iteration\", \"Monitor Parameter\"]\nm.item_table = np.array(\n    [\n        [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n        [\"100\", \"90\", \"93\", \"88\", \"76\", \"71\", \"66\", \"60\", \"55\", \"53\", \"52\"],\n    ],\n    dtype=\"|S20\",\n)\nm.set_tags(\"show=plot table=results section=detailed_summary solution=solverA\")\nn = adr_service.create_item(obj_name=\"Convergence\")\nn.table_dict[\"rowlbls\"] = [\"Iteration\", \"Val 1\", \"Val 2\", \"Val 3\"]\nn.item_table = np.array(\n    [\n        [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n        [\"100\", \"90\", \"70\", \"60\", \"30\", \"20\", \"15\", \"15\", \"14\", \"13\", \"15\"],\n        [\"87\", \"85\", \"81\", \"80\", \"73\", \"60\", \"46\", \"20\", \"18\", \"17\", \"10\"],\n        [\"77\", \"73\", \"55\", \"53\", \"51\", \"47\", \"44\", \"30\", \"32\", \"20\", \"18\"],\n    ],\n    dtype=\"|S20\",\n)\nn.set_tags(\"show=plot table=results section=detailed_summary solution=solverA\")\no = adr_service.create_item(obj_name=\"references\")\no.item_text = \"<ul>\\r\\n  <li>Author, A. B. C., Author D. E., ... , Publication Year, Book, title, Publisher.</li>\\r\\n  <li>Author, F. G. H., Author I. J., ... , Publication Year, Book, title, Publisher.</li>\\r\\n</ul>\"\no.set_tags(\"solution=solverA section=references\")"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#visualize-the-report",
        "title": "Create a report from scratch > Visualize the report",
        "section": "Visualize the report",
        "text": "Visualize the report.\nadr_service.visualize_report(report_name=\"Solution Analysis from Multiphysics simulation\")"
    },
    {
        "objectID": "examples/50-advanced/00-complete_report",
        "href": "examples/50-advanced/00-complete_report.html#close-the-service",
        "title": "Create a report from scratch > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-complete_report.ipynb\nDownload Python source code: 00-complete_report.py\nDownload zipped: 00-complete_report.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/00_complete_report_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.title",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.title.html#title",
        "title": "title",
        "section": "title",
        "text": "Common title"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.xaxis_format",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.xaxis_format.html#xaxis_format",
        "title": "xaxis_format",
        "section": "xaxis_format",
        "text": "X axis text format\nFormat for the x axis tick labels. Example: floatdot2"
    },
    {
        "objectID": "examples/00-basic/sg_execution_times",
        "href": "examples/00-basic/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 3 files from examples/00-basic:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-basic_00-create_db.py (00-create_db.py)\n00:00.000\n0.0\nsphx_glr_examples_00-basic_01-connect.py (01-connect.py)\n00:00.000\n0.0\nsphx_glr_examples_00-basic_02-plottype.py (02-plottype.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#embed-report-and-overwrite-styles",
        "title": "Embed report and overwrite styles",
        "section": "Embed report and overwrite styles",
        "text": "Applying the new custom web component <adr-report></adr-report> as an alternative of\nusing <iframe></iframe> to fetch and embed a report in the external web application.\nThis example assumes that you have a local Ansys installation with a version v251 or\nbeyond. For this feature, as of 25R1, Panel and Tabs are the only layout\ntemplates available for style overwrite, more templates will be included in the\nfuture release.\nStart an Ansys Dynamic Reporting service using an existing database that has\nat least 1 report template being defined.\nThe code here to start an ADR service and the following Python code to initiate\na Flask server should all be put together in the app.py file. The\nfile structure of this example is demonstrated at the end of the tutorial.\nApplying the custom web component to tunnel the report over to the external web\napp requires additional server settings to bypass potential cross-origin\nresource sharing (CORS) error. See below diagram illustrating the CORS error\nprocess:\nTo resolve the CORS error, instead of sending requests from the client side,\nusing the server that powers the external web app to proxy the requests.\nAdding 3 types of REST calls reroute settings to set up the proxy server:\nReroute GET Request to the main ADR report page (for HTML content)\nReroute GET Request to access the ADR report’s static files\nReroute GET Request to access the ADR report’s media files\nThe below diagram illustrates the proxy server concept to bypass CORS error:\nThis example is using Flask as the backend framework, but the same concept\nis applicable to other backend structures such as Node.js.\nUsing Flask as the backend framework to set up proxy will serve the static\nassets like CSS, JS files in its “static” directory, the GET request to ADR’s\nstatic assets may cause request conflicts (same for requesting “media” files).\nTherefore, the below code example includes rewriting request for “static” files\nand “media” files to avoid such conflicts, please refer to the highlighted\ncode block.\nThe following code snippet is a basic HTML structure in the index.html\nfile to serve the web component, its script, and the style sheet for style\noverwrite (if any). For reference, here is the file structure of this example:\nThe CSS stylesheet to overwrite report styles should be added as a <link> tag\ninside the <head></head> section of the HTML file. The href attribute\nof the <link> tag displays the CSS file path, which should then be passed as\nthe value of the style_path argument in the\nget_report_component(style_path=\"...\")\nin order to overwrite the styles.\nAt this point, all the essential server settings have been included, now it’s time\nto add the custom web component and its script in the external web app by PyADR\nmethod get_report_component\nand get_report_script.\nAs mentioned above, if a CSS file has been included for style overwrite, the file path\nshould be passed in the style_path argument of the get_report_component method.\nThe below screenshot demonstrates the simple style overwrite result for report’s\npanel layouts.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk. To stop the Flask server in this example,\na Keyboardinterrupt like (Ctrl + C) will shut down the server.\nDownload Jupyter notebook: 02-customized_report_embed.ipynb\nDownload Python source code: 02-customized_report_embed.py\nDownload zipped: 02-customized_report_embed.zip\nGallery generated by Sphinx-Gallery\nfrom random import random as r\n\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\nfrom ansys.dynamicreporting.core.utils import report_utils\n\n# Find a random open port for the ADR service & define the ADR root domain\nadr_port = report_utils.find_unused_ports(1)[0]\nroot = f\"http://127.0.0.1:{adr_port}/\"\n\n# start an ADR server\nadr_service = adr.Service(\n    # (installation version should be >= v251)\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v251\",\n    # Unlike previous examples, the db_directory MUST have an existing database in it\n    db_directory=r\"D:\\tmp\\new_db\",\n    port=adr_port,\n)\n\nadr_service.start()\n\n# Select report based upon the matched report name\nmy_report = adr_service.get_report(report_name=\"Top Level Report\")\n from flask import Flask, Response, redirect, request  # noqa: F811, E402\n from requests import get  # noqa: F811, E402\n\n  # init Flask app\n  app = Flask(__name__)\n\n  # Flask serves its own static files from \"/static/\"\" directory by default, to avoid conflicts occur while getting\n  # report's \"static\" files, intercept the GET request and rewrite the route from \"/static/\" to \"/adr_static/\"...\n  # if the given patterns match (*Do the route rewrite for media files too)\n  @app.before_request\n  def intercept_request():\n      # rewrite GET request path to ADR \"static\" files if the given pattern(s) match(es)\n      if (\n          request.path.startswith(\"/static/website/content\")\n          or request.path.startswith(\"/static/website/scripts\")\n          or request.path.startswith(\"/static/ansys\")\n      ):\n          static_path = request.path.replace(\"/static/\", \"/adr_static/\", 1)\n          return redirect(static_path)\n\n      # rewrite GET request path to ADR \"media\" files if the given pattern(s) match(es)\n      if request.path.startswith(\"/media/\"):\n          static_path = request.path.replace(\"/media/\", \"/adr_media/\", 1)\n          return redirect(static_path)\n\n  # reroute GET request path with a pattern of \"/report/...\" to main report HTML page\n  @app.route(\"/report/<path:subpath>\", methods=[\"GET\"])\n  def proxy_core(subpath):\n      subpath = subpath.split(\"/\")\n      # Construct the target URL for request reroute to get the report page HTML\n      target_url = f\"{root}/reports/report_display/?report_table_length=10&view={subpath[0]}&usemenus=on&dpi=120&pwidth=12.80&query={subpath[1]}\"\n      resp = get(target_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])\n\n  # reroute GET request path with a pattern of \"/adr_static/...\" to access report \"static\" files\n  @app.route(\"/adr_static/<path:subpath>\", methods=[\"GET\"])\n  def proxy_static(subpath):\n      # Construct the target URL for request reroute to get the report static files\n      static_url = f\"{root}/static/{subpath}\"\n      resp = get(static_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])\n\n  # reroute GET request path with a pattern of \"/adr_media/...\" to access report \"media\" files\n  @app.route(\"/adr_media/<path:subpath>\", methods=[\"GET\"])\n  def proxy_media(subpath):\n      # Construct the target URL for request reroute to get the report media files\n      media_url = f\"{root}/media/{subpath}\"\n      resp = get(media_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])\nexample_root /\n   ├── app.py (start an ADR service & initi Flask proxy server)\n   ├── static / style.css\n   ├── templates / index.html\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Document</title>\n      <!-- external CSS file for style overwrite -->\n      <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    </head>\n    <body>\n      <!-- <adr-report> web component generated by PyADR API from the backend -->\n      <main id=\"dash-container\">\n         {{ custom_html_element | safe }}\n      </main>\n\n      <!-- <adr-report> web component <script> define generated by PyADR API from the backend -->\n      <script type=\"text/javascript\">\n         {{ inline_js | safe }}\n      </script>\n    </body>\n  </html>\n from flask import render_template, url_for  # noqa: F811, E402\n\n # root domain\n @app.route(\"/\")\n def index():\n     return render_template(\n         \"index.html\",\n         # inject the report fetch web component html\n         custom_html_element = my_report.get_report_component(\n             # Prefix of the proxy request to main report HTML content\n             prefix = \"report\",\n             # Optional argument for style overwrite (Using external CSS file)\n             style_path = url_for(\"static\", filename = \"style.css\"),\n         ),\n         # inject the report fetch web component script logic\n         inline_js = my_report.get_report_script(),\n )\n\n # Run the Flask server at port 5000\n if __name__ == \"__main__\":\n     app.run(host = \"127.0.0.1\", port = 5000)\n# sphinx_gallery_thumbnail_path = '_static/00_complete_report_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#start-an-ansys-dynamic-reporting-service",
        "title": "Embed report and overwrite styles > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service using an existing database that has\nat least 1 report template being defined.\nThe code here to start an ADR service and the following Python code to initiate\na Flask server should all be put together in the app.py file. The\nfile structure of this example is demonstrated at the end of the tutorial.\nfrom random import random as r\n\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\nfrom ansys.dynamicreporting.core.utils import report_utils\n\n# Find a random open port for the ADR service & define the ADR root domain\nadr_port = report_utils.find_unused_ports(1)[0]\nroot = f\"http://127.0.0.1:{adr_port}/\"\n\n# start an ADR server\nadr_service = adr.Service(\n    # (installation version should be >= v251)\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v251\",\n    # Unlike previous examples, the db_directory MUST have an existing database in it\n    db_directory=r\"D:\\tmp\\new_db\",\n    port=adr_port,\n)\n\nadr_service.start()\n\n# Select report based upon the matched report name\nmy_report = adr_service.get_report(report_name=\"Top Level Report\")"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#set-up-proxy-server",
        "title": "Embed report and overwrite styles > Set up proxy server",
        "section": "Set up proxy server",
        "text": "Applying the custom web component to tunnel the report over to the external web\napp requires additional server settings to bypass potential cross-origin\nresource sharing (CORS) error. See below diagram illustrating the CORS error\nprocess:\nTo resolve the CORS error, instead of sending requests from the client side,\nusing the server that powers the external web app to proxy the requests.\nAdding 3 types of REST calls reroute settings to set up the proxy server:\nReroute GET Request to the main ADR report page (for HTML content)\nReroute GET Request to access the ADR report’s static files\nReroute GET Request to access the ADR report’s media files\nThe below diagram illustrates the proxy server concept to bypass CORS error:\nThis example is using Flask as the backend framework, but the same concept\nis applicable to other backend structures such as Node.js.\nUsing Flask as the backend framework to set up proxy will serve the static\nassets like CSS, JS files in its “static” directory, the GET request to ADR’s\nstatic assets may cause request conflicts (same for requesting “media” files).\nTherefore, the below code example includes rewriting request for “static” files\nand “media” files to avoid such conflicts, please refer to the highlighted\ncode block.\n from flask import Flask, Response, redirect, request  # noqa: F811, E402\n from requests import get  # noqa: F811, E402\n\n  # init Flask app\n  app = Flask(__name__)\n\n  # Flask serves its own static files from \"/static/\"\" directory by default, to avoid conflicts occur while getting\n  # report's \"static\" files, intercept the GET request and rewrite the route from \"/static/\" to \"/adr_static/\"...\n  # if the given patterns match (*Do the route rewrite for media files too)\n  @app.before_request\n  def intercept_request():\n      # rewrite GET request path to ADR \"static\" files if the given pattern(s) match(es)\n      if (\n          request.path.startswith(\"/static/website/content\")\n          or request.path.startswith(\"/static/website/scripts\")\n          or request.path.startswith(\"/static/ansys\")\n      ):\n          static_path = request.path.replace(\"/static/\", \"/adr_static/\", 1)\n          return redirect(static_path)\n\n      # rewrite GET request path to ADR \"media\" files if the given pattern(s) match(es)\n      if request.path.startswith(\"/media/\"):\n          static_path = request.path.replace(\"/media/\", \"/adr_media/\", 1)\n          return redirect(static_path)\n\n  # reroute GET request path with a pattern of \"/report/...\" to main report HTML page\n  @app.route(\"/report/<path:subpath>\", methods=[\"GET\"])\n  def proxy_core(subpath):\n      subpath = subpath.split(\"/\")\n      # Construct the target URL for request reroute to get the report page HTML\n      target_url = f\"{root}/reports/report_display/?report_table_length=10&view={subpath[0]}&usemenus=on&dpi=120&pwidth=12.80&query={subpath[1]}\"\n      resp = get(target_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])\n\n  # reroute GET request path with a pattern of \"/adr_static/...\" to access report \"static\" files\n  @app.route(\"/adr_static/<path:subpath>\", methods=[\"GET\"])\n  def proxy_static(subpath):\n      # Construct the target URL for request reroute to get the report static files\n      static_url = f\"{root}/static/{subpath}\"\n      resp = get(static_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])\n\n  # reroute GET request path with a pattern of \"/adr_media/...\" to access report \"media\" files\n  @app.route(\"/adr_media/<path:subpath>\", methods=[\"GET\"])\n  def proxy_media(subpath):\n      # Construct the target URL for request reroute to get the report media files\n      media_url = f\"{root}/media/{subpath}\"\n      resp = get(media_url)\n      return Response(resp.content, content_type=resp.headers[\"Content-Type\"])"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#html-structure-and-report-style-overwrite",
        "title": "Embed report and overwrite styles > HTML structure and report style overwrite",
        "section": "HTML structure and report style overwrite",
        "text": "The following code snippet is a basic HTML structure in the index.html\nfile to serve the web component, its script, and the style sheet for style\noverwrite (if any). For reference, here is the file structure of this example:\nThe CSS stylesheet to overwrite report styles should be added as a <link> tag\ninside the <head></head> section of the HTML file. The href attribute\nof the <link> tag displays the CSS file path, which should then be passed as\nthe value of the style_path argument in the\nget_report_component(style_path=\"...\")\nin order to overwrite the styles.\nexample_root /\n   ├── app.py (start an ADR service & initi Flask proxy server)\n   ├── static / style.css\n   ├── templates / index.html\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Document</title>\n      <!-- external CSS file for style overwrite -->\n      <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    </head>\n    <body>\n      <!-- <adr-report> web component generated by PyADR API from the backend -->\n      <main id=\"dash-container\">\n         {{ custom_html_element | safe }}\n      </main>\n\n      <!-- <adr-report> web component <script> define generated by PyADR API from the backend -->\n      <script type=\"text/javascript\">\n         {{ inline_js | safe }}\n      </script>\n    </body>\n  </html>"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#initiate-web-component-to-embed-the-report",
        "title": "Embed report and overwrite styles > Initiate web component to embed the report",
        "section": "Initiate web component to embed the report",
        "text": "At this point, all the essential server settings have been included, now it’s time\nto add the custom web component and its script in the external web app by PyADR\nmethod get_report_component\nand get_report_script.\nAs mentioned above, if a CSS file has been included for style overwrite, the file path\nshould be passed in the style_path argument of the get_report_component method.\nThe below screenshot demonstrates the simple style overwrite result for report’s\npanel layouts.\n from flask import render_template, url_for  # noqa: F811, E402\n\n # root domain\n @app.route(\"/\")\n def index():\n     return render_template(\n         \"index.html\",\n         # inject the report fetch web component html\n         custom_html_element = my_report.get_report_component(\n             # Prefix of the proxy request to main report HTML content\n             prefix = \"report\",\n             # Optional argument for style overwrite (Using external CSS file)\n             style_path = url_for(\"static\", filename = \"style.css\"),\n         ),\n         # inject the report fetch web component script logic\n         inline_js = my_report.get_report_script(),\n )\n\n # Run the Flask server at port 5000\n if __name__ == \"__main__\":\n     app.run(host = \"127.0.0.1\", port = 5000)"
    },
    {
        "objectID": "examples/50-advanced/02-customized_report_embed",
        "href": "examples/50-advanced/02-customized_report_embed.html#close-the-service",
        "title": "Embed report and overwrite styles > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk. To stop the Flask server in this example,\na Keyboardinterrupt like (Ctrl + C) will shut down the server.\nDownload Jupyter notebook: 02-customized_report_embed.ipynb\nDownload Python source code: 02-customized_report_embed.py\nDownload zipped: 02-customized_report_embed.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/00_complete_report_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.add_tag",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.add_tag.html#add_tag",
        "title": "add_tag",
        "section": "add_tag",
        "text": "Add a tag to the item.\nTag name. The default is \"\".\nTag value.  The default is \"\".\nTrue when successful, False when failed.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_txt = adr_service.create_item()\nmy_txt.item_text = '<h1>The test</h1>This is a text item'\nmy_txt.add_tag(tag='tagone', value='one')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot.html#plot",
        "title": "plot",
        "section": "plot",
        "text": "Table display style\ntable bar line pie heatmap parallel sankey 3d surface  polar"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.histogram_cumulative",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.histogram_cumulative.html#histogram_cumulative",
        "title": "histogram_cumulative",
        "section": "histogram_cumulative",
        "text": "Cumulative histogram\nSet to 1 to cumulate the histograms. Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.align_column",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.align_column.html#align_column",
        "title": "align_column",
        "section": "align_column",
        "text": "Column value alignment\nAlignment of data values in each column left right center justify"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.html#item",
        "title": "Item",
        "section": "Item",
        "text": "Provides for creating an object that represents an Ansys Dynamic Reporting item.\nCreate an instance of this class for each item in the database that you want to\ninteract with. When the object is created, no type is set. The type, determined the\nfirst time that you set the item_* attribute, cannot be changed.\nThis code creates an instance with the object my_txt as a text item:\nThe type of the item created in the preceding code cannot be changed. However,\nthe attributes describing the object can be reset at any time. These changes are\nautomatically propagated into the database. The attributes described in the\nfollowing “Parameters” section can be used to control the rendering of these objects.\nThese attributes mirror the generic data item attributes described in\nData Items in the documentation for Ansys Dynamic Reporting.\nAnsys Dynamic Reporting object that provides the connection to the database\nthat the item is to interact with. The default is None.\nName of the item object in the database. The default is default.\nName of the source for the item in the database. The default is \"ADR\".\nInitialize the Service class inside an Ansys Dynamic Reporting service and\ncreate an object as a text item:\nItem.add_tag([tag, value])\nAdd a tag to the item.\nItem.get_iframe([width, height])\nGet the iframe object corresponding to the item.\nItem.get_tags()\nGet the tags on the item.\nItem.rem_tag([tag])\nRemove a tag on the item.\nItem.set_tags([tagstring])\nSet tags on the item.\nItem.visualize([new_tab])\nRender this item only.\nItem.url\nURL corresponding to the item\nItem.item_text\nText (HTML and LaTeX formatting)\nItem.item_image\nImage object (Image and PNG binary files)\nItem.item_scene\n3D scene (AVZ, PLY, SCDOC, SCDOCX, GLB, and STL files)\nItem.item_animation\nAnimation file (MP4/H.264 format files)\nItem.item_table\nTable values (Must be in a numpy array)\nItem.format\nNumber format\nItem.format_column\nColumn labels format\nItem.labels_column\nColumn labels\nItem.format_row\nRow labels format\nItem.labels_row\nRow labels\nItem.plot\nTable display style\nItem.title\nCommon title\nItem.line_color\nLinebarhistogrampiemarker colors\nItem.line_marker\nMarkers\nItem.line_marker_text\nMarker text\nItem.marker_text_rowname\nMarker text row name\nItem.line_marker_size\nMarker size\nItem.line_marker_opacity\nMarker opacity\nItem.line_marker_scale\nMarker scaling\nItem.line_error_bars\nError bars\nItem.line_marker_aux0\nAuxiliary data 0\nItem.line_marker_aux1\nAuxiliary data 1\nItem.line_marker_aux2\nAuxiliary data 2\nItem.line_marker_aux3\nAuxiliary data 3\nItem.line_marker_aux4\nAuxiliary data 4\nItem.line_marker_aux5\nAuxiliary data 5\nItem.line_marker_aux6\nAuxiliary data 6\nItem.line_marker_aux7\nAuxiliary data 7\nItem.line_marker_aux8\nAuxiliary data 8\nItem.line_marker_aux9\nAuxiliary data 9\nItem.column_minimum\nColumn range minimums\nItem.column_maximum\nColumn range maximums\nItem.line_style\nLine styling\nItem.line_width\nLine width\nItem.stacked\nBar chart stacking Deprecated\nItem.bar_mode\nBar chart  Histogram config mode\nItem.xaxis\nX axis rows\nItem.yaxis\nY axis rows\nItem.zaxis\nZ axis rows\nItem.palette\nColor palette\nItem.palette_position\nPosition of the colorbar\nItem.palette_range\nRange of the colorbar\nItem.palette_show\nColorbar display\nItem.palette_title\nColorbar title string\nItem.histogram_threshold\nHistogram rendering threshold\nItem.histogram_cumulative\nCumulative histogram\nItem.histogram_normalized\nNormalize histogram\nItem.histogram_bin_size\nHistogram bin size\nItem.bar_gap\nBar charts bar gap\nItem.width\nChart width\nItem.height\nChart height\nItem.show_legend\nShow legend\nItem.legend_position\nPosition the legend\nItem.show_legend_border\nShow legend border\nItem.show_border\nShow plot border\nItem.plot_margins\nPlot margins\nItem.plot_title\nPlot title\nItem.plot_xaxis_type\nX axis style\nItem.plot_yaxis_type\nY axis style\nItem.plot_zaxis_type\nZ axis style\nItem.xrange\nX axis range\nItem.yrange\nY axis range\nItem.zrange\nZ axis range\nItem.xaxis_format\nX axis text format\nItem.yaxis_format\nY axis text format\nItem.zaxis_format\nZ axis text format\nItem.xtitle\nX axis title\nItem.ytitle\nY axis title\nItem.ztitle\nZ axis title\nItem.item_justification\nTable item justification\nItem.nan_display\nNaN table display value\nItem.table_sort\nTable sorting\nItem.table_title\nTable title\nItem.align_column\nColumn value alignment\nItem.table_search\nSearch values\nItem.table_page\nTable paging\nItem.table_pagemenu\nTable paging menu\nItem.table_scrollx\nHorizontal scrolling\nItem.table_scrolly\nVertical scrolling\nItem.table_bordered\nTable bordering\nItem.table_condensed\nTable compactness\nItem.table_wrap_content\nTable content wrapping\nItem.table_default_col_labels\nDefault column labels\nItem.table_cond_format\nTable conditional formatting\nItem.row_tags\nList of tags for each table row\nItem.col_tags\nList of tags for each table column\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nadr_service.connect(url='http://localhost:8010')\nmy_txt = adr_service.create_item()\nmy_txt.item_text = '<h1>The test</h1>This is a text item'"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.visualize",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.visualize.html#visualize",
        "title": "visualize",
        "section": "visualize",
        "text": "Render the report.\nWhether to render the report in a new tab if the current environment\nis a Jupyter notebook. The default is False, in which case the\nreport is rendered in the current location. If the environment is\nnot a Jupyter notebook, the report is always rendered in a new tab.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\nRendered report.\nRender a report in a new tab.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = \"My First Report\")\nmy_report.visualize(new_tab = True)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_text",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_text.html#line_marker_text",
        "title": "line_marker_text",
        "section": "line_marker_text",
        "text": "Marker text\nValue={{vx}} Position={{vy}}"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.get_list_reports",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.get_list_reports.html#get_list_reports",
        "title": "get_list_reports",
        "section": "get_list_reports",
        "text": "Get a list of top-level reports in the database.\nThis method can get either a list of the names of the top-level reports\nor a list of Report items corresponding to these reports.\nType of object to return. The default is \"name\", which returns\na list of the names of the reports. If you set the value\nfor this parameter to \"report\", this method returns a list of\nthe Report items corresponding to these reports.\nList of the top-level reports in the database. The list can be of the names\nof these reports or the Report items corresponding to these reports.\nThere is no ADR service associated with the current object.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation=r'C:\\Program Files\\ANSYS Inc\\v232')\nadr_service.connect(url='http://localhost:8020')\ntop_reports = adr_service.get_list_reports()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_error_bars",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_error_bars.html#line_error_bars",
        "title": "line_error_bars",
        "section": "line_error_bars",
        "text": "Error bars\nScalar value or name of a row with size of error bars in Y axis units. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_image",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_image.html#item_image",
        "title": "item_image",
        "section": "item_image",
        "text": "Image object (Image and PNG binary files)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_title",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_title.html#table_title",
        "title": "table_title",
        "section": "table_title",
        "text": "Table title\nThe title of the table"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.query",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.query.html#query",
        "title": "query",
        "section": "query",
        "text": "Query the database.\nType of objects to query. The default is \"Item\". Options are \"Item\",\n\"Session\", and \"Dataset\".\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\nList of queried objects.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nimgs = adr_service.query(query_type='Item', filter='A|i_type|cont|image;')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.palette",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.palette.html#palette",
        "title": "palette",
        "section": "palette",
        "text": "Color palette\nThe name of the color palette to use with line_color row data. =invert. Example: Hot"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.column_maximum",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.column_maximum.html#column_maximum",
        "title": "column_maximum",
        "section": "column_maximum",
        "text": "Column range maximums\nScalar value or array of values used as column category maximums."
    },
    {
        "objectID": "lowlevelapi/ServerObject",
        "href": "lowlevelapi/ServerObject.html#server-object",
        "title": "Server Object",
        "section": "Server Object",
        "text": "This object serves to wrap the Ansys Dynamic Reporting REST API.\nIt sets up a connection\nto an ADR Nexus server and allows objects to be pulled from and pushed to the\nserver.\nA new server object can be created with the following:\nserverobj = report_remote_server.Server(url=None, username=None, password=None)\nserverobj.set_URL(“http://localhost:8000”)\nserverobj.set_username(“nexus”)\nserverobj.set_password(“cei”)\nSpecify the ADR Nexus server (url and authentication information) to which\nto connect the Server object to.\nurl = serverobj.get_URL()\nusername = serverobj.get_username()\npassword = serverobj.get_password()\nRetrieve information about the current Server configuration.\nserver_name = serverobj.get_server_name()\nAttempts to connect to the database returns the name of the server. For\nremote servers, the name is a configuration parameter. For local\nservers, it is the name of the directory that contains the SQLite file.\nNote: if a connection to the server cannot be made or the server does\nnot support names, this method returns the URL for the server.\nserver_version_float = serverobj.validate()\nAttempts to connect to the database and verifies that the server\nconnection specifications are valid. It returns the version of the\nADR Nexus\nserver API that the server is using. Note: this method will throw an\nexception on encountering an error.\nhas_database_url = serverobj.valid_database()\nThis method checks to see if a database url has been set. It returns\nTrue if a url has been set. It does not verify that the connection and\nusername, password is valid.\nserverobj.stop_local_server()\nThis method will stop any local ADR Nexus server accessible via the current\nServer object URL, username and password.\nguid_list = serverobj.get_object_guids(objtype=type_class, query=None)\nThis method will query the server and returns a list of the object GUIDs\nthat meet the specific query. If the query is\nNone, all of the GUIDs of the type specified by objtype will be\nreturned. The objtype keyword specifies the type of database object to\nget the list of guids for. Valid values for the objtype keyword include:\nreport_objects.DatasetREST\nreport_objects.SessionREST\nreport_objects.ItemREST\nobj_list = serverobj.get_objects(objtype=type_class, query=None)\nThis method is similar to get_object_guids() except that it\nreturns a list of actual instances of the class specified by the\nobjtype keyword instead of just returning the GUIDs.\nNote that if you want the list of templates, you can either set\nobjtype to report_objects.TempalteREST or to\nreport.objects.TemplateREST.factory. In the first case, all the\ntemplates will be returned as objects of the TemplateREST class. In\nthe second case, all templates will be returned as objects of the\nsub-classes of TemplateREST, corresponding to the exact report_type.\nobj = serverobj.get_object_from_guid(guid, objtype=type_class)\nThis method queries the ADR Nexus server for a single object of the class\nspecified by objtype with the GUID specified by the guid argument. It\nreturns an instance of the class specified by objtype or None if the\nGUID is not present.\nstatus_code = serverobj.put_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and pushes the local contents of the objects to\nthe server. If objects with the same GUID(s) already exist in the server\ndatabase, they will be overwritten. The return value is a status code\nfrom the requests Python module (e.g. requests.codes.ok). Note:\nif an error occurs the method will return the last error, but it will\ntry to push every object in the input collection.\nstatus_code = serverobj.del_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and asks the server to delete them. If objects\nwith matching GUIDs exist in the server database, they will be removed\nfrom the database. This method only looks at the guid attribute of the\ninput object collection. The return value is a status code from the\nrequests Python module (e.g. requests.codes.ok). Note: if an\nerror occurs the method will return the last error, but it will try to\ndelete every object in the input collection.\nstatus_code = serverobj.get_file(object, fileobj)\nIn some cases, a report_objects.ItemREST instance will have an\nassociated file in the Ansys Dynamic Reporting datastore.\nExamples include images,\nanimations and 3D geometry (see report_objects.ItemRest above). The\nItemREST.is_file_protocol() can be used to check for this. This method\nwill download the file (if any) associated with the (ItemREST instance)\nobject and write the output into the file object specified by the\nfileobj argument. Fileobj should be an open Python file type object that\nsupports minimally write I/O semantics. Note that the operation is\nstreaming, so it is possible for a partial file to exist if errors are\nencountered. The return value is a status code from the requests\nPython module (e.g. requests.codes.ok).\nsession = serverobj.get_default_session()\ndataset = serverobj.get_default_dataset()\nserverobj.set_default_session(session)\nserverobj.set_default_dataset(dataset)\nThe server object maintains default SessionREST and DatasetREST objects\nthat are used with the create_item() method to simplify data item\ncreation. The get_default_session() and get_default_dataset() methods\nreturn the current default session and dataset objects. The\ncorresponding set_default_session() and set_default_dataset() methods\nset these objects to externally generated objects or more commonly,\nmodified objects returned by the get methods.\nitem = serverobj.create_item(name=”Unnamed Item”, source=”ADR Python\nAPI”, sequence=0)\nThis method simplifies the generation of data items. One can create a\nnew data item by simply instantiating an instance of ItemREST(), but\nmany of the item attributes would need to be configured properly before\nthe object can be saved into the database. Most notably, the\nitem.session and item.dataset attributes need to be set to the GUIDs for\nan instance of SessionREST and DatasetREST respectively. The Server\nobject always maintains a default instance of SessionREST and\nDatasetREST objects. The object references can be modified by the user\nto customize their metadata. The create_item() method will create a new\ninstance of the ItemREST class and will automatically fill in the\nsession and dataset attributes to the objects returned by\nget_default_session() and get_default_dataset(). Additionally, if\nput_objects() is called on an item whose session or dataset attributes\nmatch the default GUIDs, the put_objects() method will push the session\nand/or dataset objects as needed. If the session/dataset objects change\n(without changing the GUIDs) the system will detect this any\nautomatically push them when the next item is pushed that references one\nof them. The create_item() method allows the user to specify the name,\nsource and sequence number for the item during creation.\nserverobj.export_report_as_html(report_guid, directory_name,\nquery=None)\nThis method exports the Ansys Dynamic Reporting report with the\nGUID specified by the\nargument “report_guid”. The result will be written into the directory\nspecified by the argument “directory_name”. The method will create the\ndirectory if it does not exist previously. There will be a file named\n“index.html” in the directory and a “media” subdirectory containing the\nresources needed to display the report. note: if there is an error, this\nmethod will throw an exception.\nInput arguments:\nreport guid (string) - the guid of the report to be downloaded as\nHTML.\ndirectory_name (string) - the name of the directory to save the\ndownloaded contents.\nquery (dictionary) - a dictionary of query parameters to add to the\nreport URL.\nserverobj.export_report_as_pdf(report_guid, file_name, delay=5000)\nSave a PDF rendering of the Ansys Dynamic Reporting report with the GUID specified by the\nargument “report_guid”. The name of the PDF file is specified by the\nargument “file_name”. Note: if there is an error, this method will throw\nan exception. This is the equivalent of displaying the report with the\nquery ‘print=pdf’ included in the report URL.\nInput arguments:\nreport guid (string) - the guid of the report to be saved as PDF.\nfile_name (string) - the name of the target PDF file.\ndelay (int) - number of milliseconds to wait for the report to load\nbefore downloading it. Default is 5000ms. Optional.\nVarious data items and report templates will behave differently when\nprinting:\nTree data items will be fully expanded and the interactive buttons\nfor expanding/collapsing will be removed.\nAnimation data items will be rendered as if the ‘image_display’\nproperty is set to 1.\nTable data items will have all of their interactive controls\nsuppressed (e.g. sorting, searching, scrolling, pagination, etc)\nTab layouts will behave as if the ‘inline_tabs’ property is set to 1.\nPanel layouts will behave as if the ‘panel_template_toggle’ property\nis set to 0.\nMagic tokens is a new way for users in the ADR Nexus server\nto login without using\ntheir password. Ansys Dynamic Reporting\nprovides a Python API to generate a per-user\nsecret token. This token can then be attached to any Ansys Dynamic Reporting web page URL\nto bypass login during future access. This is currently restricted to\nonly the user who starts the server. This can be useful if a URL needs\nto be reused within a HTML iframe.\nserverobj.generate_magic_token(max_age=None)\nThis method generates a magic token with the desired expiry.\nInput arguments:\nmax_age (int) - Expiry of the token in seconds. If this is None, the\nserver will use its default expiry of 1 day.\nserverobj.get_url_with_magic_token()\nThis will return a URL to access the ADR Nexus server with a magic token\nattached.\nUsage:\nMethod on a report_remote_server.Server() object to create a new\nreport_object.TemplateREST object. You can pass as input:\nname (string) - the name of the template\nparent (template objects)- the parent template. If None, the new\ntemplate will be a top level one\nreport_type (string) - sets the type of template. Each value of\nreport_type corresponds to a different template type, and will\ngenerate an object from the corresponding template sub-class. See the\ntable for the accepted values of report_type, the corresponding\ntemplate type and Python API sub-class.\nerror_string = serverobj.get_last_error()\nSeveral of the server methods return REST error codes: put_objects(),\ndel_objects(), get_file(), etc. When these methods error, they return\nthe specific REST error code. If the error in question was generated by\nthe ADR Nexus server, in addition to the error_code not being equal to\nrequests.codes.ok, the server may return a more detailed error\nstring. This string can be retrieved using the get_last_error() method.\nAn example of a data item with an item name exceeding:\nwill output the following (note: requests.codes.bad_request == 400)\noutput noting that the “name” field exceeds the maximum field length:\n400\n{“name”:[“Ensure this field has no more than 80 characters.”]}\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server()\nopts = {\n    \"port\": 8000,\n    \"directory\": \"C:\\\\Users\\\\Nexus\\\\db\",\n    \"raise_exception\": True,\n    \"connect\": server,\n}\nlaunched = report_remote_server.launch_local_database_server(None, opts)\nif launched:\n    print(server.magic_token)  # auto generation.. default expiry of 1day\n    print(server.get_url_with_magic_token())\n    server.magic_token = server.generate_magic_token(\n        max_age=60\n    )  # manual generation, with an expiry of 60 seconds\n    print(server.get_url_with_magic_token())\n    # Prints URL with token.\n    # Example: http://127.0.0.1:8000?magic_token=eyJ1c2VyX2lkIjozLCJtYXhfYWdlIjo4NjQwMCwidGltZXN0YW1wIjoiMW5QY1B5In0:1nPcPy:c3OZhMCVQQq_fXXzevQ47WHxYfbAZE5TI-GL0yBzIaw\n    template = serverobj.create_template(\n        name=\"New Template\", parent=None, report_type=\"Layout:basic\"\n    )\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\n    url=\"http://localhost:8000\", username=\"nexus\", password=\"cei\"\n)\ninvalid_data_item_name = 100\nitem = serverobj.create_item(invalid_data_item_name, \"command line\")\nitem.set_payload_string(\"A simple text string\")\nprint(serverobj.put_objects(item))\nprint(serverobj.get_last_error())"
    },
    {
        "objectID": "lowlevelapi/ServerObject",
        "href": "lowlevelapi/ServerObject.html#report_remote_serverserver-object",
        "title": "Server Object > report_remote_server.Server object",
        "section": "report_remote_server.Server object",
        "text": "This object serves to wrap the Ansys Dynamic Reporting REST API.\nIt sets up a connection\nto an ADR Nexus server and allows objects to be pulled from and pushed to the\nserver.\nA new server object can be created with the following:\nserverobj = report_remote_server.Server(url=None, username=None, password=None)\nserverobj.set_URL(“http://localhost:8000”)\nserverobj.set_username(“nexus”)\nserverobj.set_password(“cei”)\nSpecify the ADR Nexus server (url and authentication information) to which\nto connect the Server object to.\nurl = serverobj.get_URL()\nusername = serverobj.get_username()\npassword = serverobj.get_password()\nRetrieve information about the current Server configuration.\nserver_name = serverobj.get_server_name()\nAttempts to connect to the database returns the name of the server. For\nremote servers, the name is a configuration parameter. For local\nservers, it is the name of the directory that contains the SQLite file.\nNote: if a connection to the server cannot be made or the server does\nnot support names, this method returns the URL for the server.\nserver_version_float = serverobj.validate()\nAttempts to connect to the database and verifies that the server\nconnection specifications are valid. It returns the version of the\nADR Nexus\nserver API that the server is using. Note: this method will throw an\nexception on encountering an error.\nhas_database_url = serverobj.valid_database()\nThis method checks to see if a database url has been set. It returns\nTrue if a url has been set. It does not verify that the connection and\nusername, password is valid.\nserverobj.stop_local_server()\nThis method will stop any local ADR Nexus server accessible via the current\nServer object URL, username and password.\nguid_list = serverobj.get_object_guids(objtype=type_class, query=None)\nThis method will query the server and returns a list of the object GUIDs\nthat meet the specific query. If the query is\nNone, all of the GUIDs of the type specified by objtype will be\nreturned. The objtype keyword specifies the type of database object to\nget the list of guids for. Valid values for the objtype keyword include:\nreport_objects.DatasetREST\nreport_objects.SessionREST\nreport_objects.ItemREST\nobj_list = serverobj.get_objects(objtype=type_class, query=None)\nThis method is similar to get_object_guids() except that it\nreturns a list of actual instances of the class specified by the\nobjtype keyword instead of just returning the GUIDs.\nNote that if you want the list of templates, you can either set\nobjtype to report_objects.TempalteREST or to\nreport.objects.TemplateREST.factory. In the first case, all the\ntemplates will be returned as objects of the TemplateREST class. In\nthe second case, all templates will be returned as objects of the\nsub-classes of TemplateREST, corresponding to the exact report_type.\nobj = serverobj.get_object_from_guid(guid, objtype=type_class)\nThis method queries the ADR Nexus server for a single object of the class\nspecified by objtype with the GUID specified by the guid argument. It\nreturns an instance of the class specified by objtype or None if the\nGUID is not present.\nstatus_code = serverobj.put_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and pushes the local contents of the objects to\nthe server. If objects with the same GUID(s) already exist in the server\ndatabase, they will be overwritten. The return value is a status code\nfrom the requests Python module (e.g. requests.codes.ok). Note:\nif an error occurs the method will return the last error, but it will\ntry to push every object in the input collection.\nstatus_code = serverobj.del_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and asks the server to delete them. If objects\nwith matching GUIDs exist in the server database, they will be removed\nfrom the database. This method only looks at the guid attribute of the\ninput object collection. The return value is a status code from the\nrequests Python module (e.g. requests.codes.ok). Note: if an\nerror occurs the method will return the last error, but it will try to\ndelete every object in the input collection.\nstatus_code = serverobj.get_file(object, fileobj)\nIn some cases, a report_objects.ItemREST instance will have an\nassociated file in the Ansys Dynamic Reporting datastore.\nExamples include images,\nanimations and 3D geometry (see report_objects.ItemRest above). The\nItemREST.is_file_protocol() can be used to check for this. This method\nwill download the file (if any) associated with the (ItemREST instance)\nobject and write the output into the file object specified by the\nfileobj argument. Fileobj should be an open Python file type object that\nsupports minimally write I/O semantics. Note that the operation is\nstreaming, so it is possible for a partial file to exist if errors are\nencountered. The return value is a status code from the requests\nPython module (e.g. requests.codes.ok).\nsession = serverobj.get_default_session()\ndataset = serverobj.get_default_dataset()\nserverobj.set_default_session(session)\nserverobj.set_default_dataset(dataset)\nThe server object maintains default SessionREST and DatasetREST objects\nthat are used with the create_item() method to simplify data item\ncreation. The get_default_session() and get_default_dataset() methods\nreturn the current default session and dataset objects. The\ncorresponding set_default_session() and set_default_dataset() methods\nset these objects to externally generated objects or more commonly,\nmodified objects returned by the get methods.\nitem = serverobj.create_item(name=”Unnamed Item”, source=”ADR Python\nAPI”, sequence=0)\nThis method simplifies the generation of data items. One can create a\nnew data item by simply instantiating an instance of ItemREST(), but\nmany of the item attributes would need to be configured properly before\nthe object can be saved into the database. Most notably, the\nitem.session and item.dataset attributes need to be set to the GUIDs for\nan instance of SessionREST and DatasetREST respectively. The Server\nobject always maintains a default instance of SessionREST and\nDatasetREST objects. The object references can be modified by the user\nto customize their metadata. The create_item() method will create a new\ninstance of the ItemREST class and will automatically fill in the\nsession and dataset attributes to the objects returned by\nget_default_session() and get_default_dataset(). Additionally, if\nput_objects() is called on an item whose session or dataset attributes\nmatch the default GUIDs, the put_objects() method will push the session\nand/or dataset objects as needed. If the session/dataset objects change\n(without changing the GUIDs) the system will detect this any\nautomatically push them when the next item is pushed that references one\nof them. The create_item() method allows the user to specify the name,\nsource and sequence number for the item during creation.\nserverobj.export_report_as_html(report_guid, directory_name,\nquery=None)\nThis method exports the Ansys Dynamic Reporting report with the\nGUID specified by the\nargument “report_guid”. The result will be written into the directory\nspecified by the argument “directory_name”. The method will create the\ndirectory if it does not exist previously. There will be a file named\n“index.html” in the directory and a “media” subdirectory containing the\nresources needed to display the report. note: if there is an error, this\nmethod will throw an exception.\nInput arguments:\nreport guid (string) - the guid of the report to be downloaded as\nHTML.\ndirectory_name (string) - the name of the directory to save the\ndownloaded contents.\nquery (dictionary) - a dictionary of query parameters to add to the\nreport URL.\nserverobj.export_report_as_pdf(report_guid, file_name, delay=5000)\nSave a PDF rendering of the Ansys Dynamic Reporting report with the GUID specified by the\nargument “report_guid”. The name of the PDF file is specified by the\nargument “file_name”. Note: if there is an error, this method will throw\nan exception. This is the equivalent of displaying the report with the\nquery ‘print=pdf’ included in the report URL.\nInput arguments:\nreport guid (string) - the guid of the report to be saved as PDF.\nfile_name (string) - the name of the target PDF file.\ndelay (int) - number of milliseconds to wait for the report to load\nbefore downloading it. Default is 5000ms. Optional.\nVarious data items and report templates will behave differently when\nprinting:\nTree data items will be fully expanded and the interactive buttons\nfor expanding/collapsing will be removed.\nAnimation data items will be rendered as if the ‘image_display’\nproperty is set to 1.\nTable data items will have all of their interactive controls\nsuppressed (e.g. sorting, searching, scrolling, pagination, etc)\nTab layouts will behave as if the ‘inline_tabs’ property is set to 1.\nPanel layouts will behave as if the ‘panel_template_toggle’ property\nis set to 0.\nMagic tokens is a new way for users in the ADR Nexus server\nto login without using\ntheir password. Ansys Dynamic Reporting\nprovides a Python API to generate a per-user\nsecret token. This token can then be attached to any Ansys Dynamic Reporting web page URL\nto bypass login during future access. This is currently restricted to\nonly the user who starts the server. This can be useful if a URL needs\nto be reused within a HTML iframe.\nserverobj.generate_magic_token(max_age=None)\nThis method generates a magic token with the desired expiry.\nInput arguments:\nmax_age (int) - Expiry of the token in seconds. If this is None, the\nserver will use its default expiry of 1 day.\nserverobj.get_url_with_magic_token()\nThis will return a URL to access the ADR Nexus server with a magic token\nattached.\nUsage:\nMethod on a report_remote_server.Server() object to create a new\nreport_object.TemplateREST object. You can pass as input:\nname (string) - the name of the template\nparent (template objects)- the parent template. If None, the new\ntemplate will be a top level one\nreport_type (string) - sets the type of template. Each value of\nreport_type corresponds to a different template type, and will\ngenerate an object from the corresponding template sub-class. See the\ntable for the accepted values of report_type, the corresponding\ntemplate type and Python API sub-class.\nerror_string = serverobj.get_last_error()\nSeveral of the server methods return REST error codes: put_objects(),\ndel_objects(), get_file(), etc. When these methods error, they return\nthe specific REST error code. If the error in question was generated by\nthe ADR Nexus server, in addition to the error_code not being equal to\nrequests.codes.ok, the server may return a more detailed error\nstring. This string can be retrieved using the get_last_error() method.\nAn example of a data item with an item name exceeding:\nwill output the following (note: requests.codes.bad_request == 400)\noutput noting that the “name” field exceeds the maximum field length:\n400\n{“name”:[“Ensure this field has no more than 80 characters.”]}\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server()\nopts = {\n    \"port\": 8000,\n    \"directory\": \"C:\\\\Users\\\\Nexus\\\\db\",\n    \"raise_exception\": True,\n    \"connect\": server,\n}\nlaunched = report_remote_server.launch_local_database_server(None, opts)\nif launched:\n    print(server.magic_token)  # auto generation.. default expiry of 1day\n    print(server.get_url_with_magic_token())\n    server.magic_token = server.generate_magic_token(\n        max_age=60\n    )  # manual generation, with an expiry of 60 seconds\n    print(server.get_url_with_magic_token())\n    # Prints URL with token.\n    # Example: http://127.0.0.1:8000?magic_token=eyJ1c2VyX2lkIjozLCJtYXhfYWdlIjo4NjQwMCwidGltZXN0YW1wIjoiMW5QY1B5In0:1nPcPy:c3OZhMCVQQq_fXXzevQ47WHxYfbAZE5TI-GL0yBzIaw\n    template = serverobj.create_template(\n        name=\"New Template\", parent=None, report_type=\"Layout:basic\"\n    )\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\n    url=\"http://localhost:8000\", username=\"nexus\", password=\"cei\"\n)\ninvalid_data_item_name = 100\nitem = serverobj.create_item(invalid_data_item_name, \"command line\")\nitem.set_payload_string(\"A simple text string\")\nprint(serverobj.put_objects(item))\nprint(serverobj.get_last_error())"
    },
    {
        "objectID": "lowlevelapi/ServerObject",
        "href": "lowlevelapi/ServerObject.html#methods",
        "title": "Server Object > Methods",
        "section": "Methods",
        "text": "serverobj.set_URL(“http://localhost:8000”)\nserverobj.set_username(“nexus”)\nserverobj.set_password(“cei”)\nSpecify the ADR Nexus server (url and authentication information) to which\nto connect the Server object to.\nurl = serverobj.get_URL()\nusername = serverobj.get_username()\npassword = serverobj.get_password()\nRetrieve information about the current Server configuration.\nserver_name = serverobj.get_server_name()\nAttempts to connect to the database returns the name of the server. For\nremote servers, the name is a configuration parameter. For local\nservers, it is the name of the directory that contains the SQLite file.\nNote: if a connection to the server cannot be made or the server does\nnot support names, this method returns the URL for the server.\nserver_version_float = serverobj.validate()\nAttempts to connect to the database and verifies that the server\nconnection specifications are valid. It returns the version of the\nADR Nexus\nserver API that the server is using. Note: this method will throw an\nexception on encountering an error.\nhas_database_url = serverobj.valid_database()\nThis method checks to see if a database url has been set. It returns\nTrue if a url has been set. It does not verify that the connection and\nusername, password is valid.\nserverobj.stop_local_server()\nThis method will stop any local ADR Nexus server accessible via the current\nServer object URL, username and password.\nguid_list = serverobj.get_object_guids(objtype=type_class, query=None)\nThis method will query the server and returns a list of the object GUIDs\nthat meet the specific query. If the query is\nNone, all of the GUIDs of the type specified by objtype will be\nreturned. The objtype keyword specifies the type of database object to\nget the list of guids for. Valid values for the objtype keyword include:\nreport_objects.DatasetREST\nreport_objects.SessionREST\nreport_objects.ItemREST\nobj_list = serverobj.get_objects(objtype=type_class, query=None)\nThis method is similar to get_object_guids() except that it\nreturns a list of actual instances of the class specified by the\nobjtype keyword instead of just returning the GUIDs.\nNote that if you want the list of templates, you can either set\nobjtype to report_objects.TempalteREST or to\nreport.objects.TemplateREST.factory. In the first case, all the\ntemplates will be returned as objects of the TemplateREST class. In\nthe second case, all templates will be returned as objects of the\nsub-classes of TemplateREST, corresponding to the exact report_type.\nobj = serverobj.get_object_from_guid(guid, objtype=type_class)\nThis method queries the ADR Nexus server for a single object of the class\nspecified by objtype with the GUID specified by the guid argument. It\nreturns an instance of the class specified by objtype or None if the\nGUID is not present.\nstatus_code = serverobj.put_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and pushes the local contents of the objects to\nthe server. If objects with the same GUID(s) already exist in the server\ndatabase, they will be overwritten. The return value is a status code\nfrom the requests Python module (e.g. requests.codes.ok). Note:\nif an error occurs the method will return the last error, but it will\ntry to push every object in the input collection.\nstatus_code = serverobj.del_objects(objects)\nThis method takes a collection of objects of the classes\nreport_objects.DatasetREST, report_objects.SessionREST and\nreport_objects.ItemREST and asks the server to delete them. If objects\nwith matching GUIDs exist in the server database, they will be removed\nfrom the database. This method only looks at the guid attribute of the\ninput object collection. The return value is a status code from the\nrequests Python module (e.g. requests.codes.ok). Note: if an\nerror occurs the method will return the last error, but it will try to\ndelete every object in the input collection.\nstatus_code = serverobj.get_file(object, fileobj)\nIn some cases, a report_objects.ItemREST instance will have an\nassociated file in the Ansys Dynamic Reporting datastore.\nExamples include images,\nanimations and 3D geometry (see report_objects.ItemRest above). The\nItemREST.is_file_protocol() can be used to check for this. This method\nwill download the file (if any) associated with the (ItemREST instance)\nobject and write the output into the file object specified by the\nfileobj argument. Fileobj should be an open Python file type object that\nsupports minimally write I/O semantics. Note that the operation is\nstreaming, so it is possible for a partial file to exist if errors are\nencountered. The return value is a status code from the requests\nPython module (e.g. requests.codes.ok).\nsession = serverobj.get_default_session()\ndataset = serverobj.get_default_dataset()\nserverobj.set_default_session(session)\nserverobj.set_default_dataset(dataset)\nThe server object maintains default SessionREST and DatasetREST objects\nthat are used with the create_item() method to simplify data item\ncreation. The get_default_session() and get_default_dataset() methods\nreturn the current default session and dataset objects. The\ncorresponding set_default_session() and set_default_dataset() methods\nset these objects to externally generated objects or more commonly,\nmodified objects returned by the get methods.\nitem = serverobj.create_item(name=”Unnamed Item”, source=”ADR Python\nAPI”, sequence=0)\nThis method simplifies the generation of data items. One can create a\nnew data item by simply instantiating an instance of ItemREST(), but\nmany of the item attributes would need to be configured properly before\nthe object can be saved into the database. Most notably, the\nitem.session and item.dataset attributes need to be set to the GUIDs for\nan instance of SessionREST and DatasetREST respectively. The Server\nobject always maintains a default instance of SessionREST and\nDatasetREST objects. The object references can be modified by the user\nto customize their metadata. The create_item() method will create a new\ninstance of the ItemREST class and will automatically fill in the\nsession and dataset attributes to the objects returned by\nget_default_session() and get_default_dataset(). Additionally, if\nput_objects() is called on an item whose session or dataset attributes\nmatch the default GUIDs, the put_objects() method will push the session\nand/or dataset objects as needed. If the session/dataset objects change\n(without changing the GUIDs) the system will detect this any\nautomatically push them when the next item is pushed that references one\nof them. The create_item() method allows the user to specify the name,\nsource and sequence number for the item during creation.\nserverobj.export_report_as_html(report_guid, directory_name,\nquery=None)\nThis method exports the Ansys Dynamic Reporting report with the\nGUID specified by the\nargument “report_guid”. The result will be written into the directory\nspecified by the argument “directory_name”. The method will create the\ndirectory if it does not exist previously. There will be a file named\n“index.html” in the directory and a “media” subdirectory containing the\nresources needed to display the report. note: if there is an error, this\nmethod will throw an exception.\nInput arguments:\nreport guid (string) - the guid of the report to be downloaded as\nHTML.\ndirectory_name (string) - the name of the directory to save the\ndownloaded contents.\nquery (dictionary) - a dictionary of query parameters to add to the\nreport URL.\nserverobj.export_report_as_pdf(report_guid, file_name, delay=5000)\nSave a PDF rendering of the Ansys Dynamic Reporting report with the GUID specified by the\nargument “report_guid”. The name of the PDF file is specified by the\nargument “file_name”. Note: if there is an error, this method will throw\nan exception. This is the equivalent of displaying the report with the\nquery ‘print=pdf’ included in the report URL.\nInput arguments:\nreport guid (string) - the guid of the report to be saved as PDF.\nfile_name (string) - the name of the target PDF file.\ndelay (int) - number of milliseconds to wait for the report to load\nbefore downloading it. Default is 5000ms. Optional.\nVarious data items and report templates will behave differently when\nprinting:\nTree data items will be fully expanded and the interactive buttons\nfor expanding/collapsing will be removed.\nAnimation data items will be rendered as if the ‘image_display’\nproperty is set to 1.\nTable data items will have all of their interactive controls\nsuppressed (e.g. sorting, searching, scrolling, pagination, etc)\nTab layouts will behave as if the ‘inline_tabs’ property is set to 1.\nPanel layouts will behave as if the ‘panel_template_toggle’ property\nis set to 0."
    },
    {
        "objectID": "lowlevelapi/ServerObject",
        "href": "lowlevelapi/ServerObject.html#magic-tokens",
        "title": "Server Object > Magic tokens",
        "section": "Magic tokens",
        "text": "Magic tokens is a new way for users in the ADR Nexus server\nto login without using\ntheir password. Ansys Dynamic Reporting\nprovides a Python API to generate a per-user\nsecret token. This token can then be attached to any Ansys Dynamic Reporting web page URL\nto bypass login during future access. This is currently restricted to\nonly the user who starts the server. This can be useful if a URL needs\nto be reused within a HTML iframe.\nserverobj.generate_magic_token(max_age=None)\nThis method generates a magic token with the desired expiry.\nInput arguments:\nmax_age (int) - Expiry of the token in seconds. If this is None, the\nserver will use its default expiry of 1 day.\nserverobj.get_url_with_magic_token()\nThis will return a URL to access the ADR Nexus server with a magic token\nattached.\nUsage:\nMethod on a report_remote_server.Server() object to create a new\nreport_object.TemplateREST object. You can pass as input:\nname (string) - the name of the template\nparent (template objects)- the parent template. If None, the new\ntemplate will be a top level one\nreport_type (string) - sets the type of template. Each value of\nreport_type corresponds to a different template type, and will\ngenerate an object from the corresponding template sub-class. See the\ntable for the accepted values of report_type, the corresponding\ntemplate type and Python API sub-class.\nerror_string = serverobj.get_last_error()\nSeveral of the server methods return REST error codes: put_objects(),\ndel_objects(), get_file(), etc. When these methods error, they return\nthe specific REST error code. If the error in question was generated by\nthe ADR Nexus server, in addition to the error_code not being equal to\nrequests.codes.ok, the server may return a more detailed error\nstring. This string can be retrieved using the get_last_error() method.\nAn example of a data item with an item name exceeding:\nwill output the following (note: requests.codes.bad_request == 400)\noutput noting that the “name” field exceeds the maximum field length:\n400\n{“name”:[“Ensure this field has no more than 80 characters.”]}\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server()\nopts = {\n    \"port\": 8000,\n    \"directory\": \"C:\\\\Users\\\\Nexus\\\\db\",\n    \"raise_exception\": True,\n    \"connect\": server,\n}\nlaunched = report_remote_server.launch_local_database_server(None, opts)\nif launched:\n    print(server.magic_token)  # auto generation.. default expiry of 1day\n    print(server.get_url_with_magic_token())\n    server.magic_token = server.generate_magic_token(\n        max_age=60\n    )  # manual generation, with an expiry of 60 seconds\n    print(server.get_url_with_magic_token())\n    # Prints URL with token.\n    # Example: http://127.0.0.1:8000?magic_token=eyJ1c2VyX2lkIjozLCJtYXhfYWdlIjo4NjQwMCwidGltZXN0YW1wIjoiMW5QY1B5In0:1nPcPy:c3OZhMCVQQq_fXXzevQ47WHxYfbAZE5TI-GL0yBzIaw\n    template = serverobj.create_template(\n        name=\"New Template\", parent=None, report_type=\"Layout:basic\"\n    )\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\n    url=\"http://localhost:8000\", username=\"nexus\", password=\"cei\"\n)\ninvalid_data_item_name = 100\nitem = serverobj.create_item(invalid_data_item_name, \"command line\")\nitem.set_payload_string(\"A simple text string\")\nprint(serverobj.put_objects(item))\nprint(serverobj.get_last_error())"
    },
    {
        "objectID": "index",
        "href": "index.html#pydynamicreporting",
        "title": "PyDynamicReporting",
        "section": "PyDynamicReporting",
        "text": "Ansys Dynamic Reporting, documented as Nexus, provides the report\ngenerator technologies that are used in several Ansys products. Ansys Dynamic\nReporting allows you to collect data in multiple formats from different sources.\nYou can then aggregate, analyze, and display this data in highly interactive reports.\nHere are some key features of Ansys Dynamic Reporting:\nHandles multiple data formats natively.\nStores data from multiple sources, including CAD packages, simulation software, and postprocessors.\nProvides tools for aggregating, filtering, and processing the data in the database.\nSupplies a web-based interface for quickly and intuitively interacting with database items.\nIncludes a template editor for generating report templates.\nDisplays live reports that automatically update when new data is available.\nGenerates reports with a high degree of interactivity.\nPyDynamicReporting is part of the PyAnsys ecosystem. It is\na Python client library that allows you to start and connect to an Ansys Dynamic Reporting\nservice and control the database and reports. It also provides you with quick access to web\ncomponents so that you can easily embed items or reports in other apps.\nDocumentation for the latest stable release of PyDynamicReporting is hosted at\nPyDynamicReporting documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nYou can also view or\ndownload the\nPyDynamicReporting cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyDynamicReporting.\nOn the PyDynamicReporting Issues\npage, you can create issues to report bugs and request new features. On the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nPyDynamicReporting is licensed under the MIT license.\nPyDynamicReporting makes no commercial claim over Ansys whatsoever.\nThis library extends Ansys Dynamic Reporting by adding a Python\ninterface to Ansys Dynamic Reporting without changing the core behavior\nor license of the original software. The use of PyDynamicReporting\nrequires a legally licensed copy of an Ansys product that supports\nAnsys Dynamic Reporting.\ngenindex"
    },
    {
        "objectID": "index",
        "href": "index.html#introduction",
        "title": "PyDynamicReporting > Introduction",
        "section": "Introduction",
        "text": "Ansys Dynamic Reporting, documented as Nexus, provides the report\ngenerator technologies that are used in several Ansys products. Ansys Dynamic\nReporting allows you to collect data in multiple formats from different sources.\nYou can then aggregate, analyze, and display this data in highly interactive reports.\nHere are some key features of Ansys Dynamic Reporting:\nHandles multiple data formats natively.\nStores data from multiple sources, including CAD packages, simulation software, and postprocessors.\nProvides tools for aggregating, filtering, and processing the data in the database.\nSupplies a web-based interface for quickly and intuitively interacting with database items.\nIncludes a template editor for generating report templates.\nDisplays live reports that automatically update when new data is available.\nGenerates reports with a high degree of interactivity."
    },
    {
        "objectID": "index",
        "href": "index.html#what-is-pydynamicreporting",
        "title": "PyDynamicReporting > What is PyDynamicReporting?",
        "section": "What is PyDynamicReporting?",
        "text": "PyDynamicReporting is part of the PyAnsys ecosystem. It is\na Python client library that allows you to start and connect to an Ansys Dynamic Reporting\nservice and control the database and reports. It also provides you with quick access to web\ncomponents so that you can easily embed items or reports in other apps."
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-issues",
        "title": "PyDynamicReporting > Documentation and issues",
        "section": "Documentation and issues",
        "text": "Documentation for the latest stable release of PyDynamicReporting is hosted at\nPyDynamicReporting documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nYou can also view or\ndownload the\nPyDynamicReporting cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyDynamicReporting.\nOn the PyDynamicReporting Issues\npage, you can create issues to report bugs and request new features. On the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com."
    },
    {
        "objectID": "index",
        "href": "index.html#license",
        "title": "PyDynamicReporting > License",
        "section": "License",
        "text": "PyDynamicReporting is licensed under the MIT license.\nPyDynamicReporting makes no commercial claim over Ansys whatsoever.\nThis library extends Ansys Dynamic Reporting by adding a Python\ninterface to Ansys Dynamic Reporting without changing the core behavior\nor license of the original software. The use of PyDynamicReporting\nrequires a legally licensed copy of an Ansys product that supports\nAnsys Dynamic Reporting."
    },
    {
        "objectID": "index",
        "href": "index.html#project-index",
        "title": "PyDynamicReporting > Project index",
        "section": "Project index",
        "text": "genindex"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.zrange",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.zrange.html#zrange",
        "title": "zrange",
        "section": "zrange",
        "text": "Z axis range\nThe range for the z axis. Example: 0.  10."
    },
    {
        "objectID": "lowlevelapi/index",
        "href": "lowlevelapi/index.html#low-level-python-api",
        "title": "Low Level Python API",
        "section": "Low Level Python API",
        "text": "The low level Python API for Ansys Dynamic Reporting\nallows the user to have full control of all the features\nof ADR and the Nexus server. It is a very powerful API, but\nat the same time it can be quite complex and requires the end user\nto fully understand how ADR works in all its components. For a\nfull description of ADR as a package, see Nexus"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_search",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_search.html#table_search",
        "title": "table_search",
        "section": "table_search",
        "text": "Search values\nVisibility of table value search field.  Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.yaxis",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.yaxis.html#yaxis",
        "title": "yaxis",
        "section": "yaxis",
        "text": "Y axis rows\nThe row numbersnames to use as the Y axis values. Example: 0 Pressure"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.yrange",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.yrange.html#yrange",
        "title": "yrange",
        "section": "yrange",
        "text": "Y axis range\nThe range for the y axis. Example: 0.  10."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux2",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux2.html#line_marker_aux2",
        "title": "line_marker_aux2",
        "section": "line_marker_aux2",
        "text": "Auxiliary data 2\nScalar value or name of a row accessible to line_marker_text as vaux2. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot_yaxis_type",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot_yaxis_type.html#plot_yaxis_type",
        "title": "plot_yaxis_type",
        "section": "plot_yaxis_type",
        "text": "Y axis style\nlinear log"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_text",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_text.html#item_text",
        "title": "item_text",
        "section": "item_text",
        "text": "Text (HTML and LaTeX formatting)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.show_legend_border",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.show_legend_border.html#show_legend_border",
        "title": "show_legend_border",
        "section": "show_legend_border",
        "text": "Show legend border\nSet to 1 to display a border around the legend. Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.marker_text_rowname",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.marker_text_rowname.html#marker_text_rowname",
        "title": "marker_text_rowname",
        "section": "marker_text_rowname",
        "text": "Marker text row name\nShould the row name be appended to the marker text: 0|1|undefined"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_width",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_width.html#line_width",
        "title": "line_width",
        "section": "line_width",
        "text": "Line width\nThe line width in pixels"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.nan_display",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.nan_display.html#nan_display",
        "title": "nan_display",
        "section": "nan_display",
        "text": "NaN table display value\nThe string to be displayed for a NaN value. Default: NaN"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.get_iframe",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.get_iframe.html#get_iframe",
        "title": "get_iframe",
        "section": "get_iframe",
        "text": "Get the iframe object corresponding to the report.\nWidth of the iframe object. The default is 1000.\nHeight of the iframe object. The default is 800.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\niframe object corresponding to the report. If no iframe can be generated,\nNone is returned.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = \"My Top Report\")\nreport_iframe = my_report.get_iframe()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.labels_row",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.labels_row.html#labels_row",
        "title": "labels_row",
        "section": "labels_row",
        "text": "Row labels\nrow 1 row 2"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux0",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux0.html#line_marker_aux0",
        "title": "line_marker_aux0",
        "section": "line_marker_aux0",
        "text": "Auxiliary data 0\nScalar value or name of a row accessible to line_marker_text as vaux0. May be a list."
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 8 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-basic_00-create_db.py (examples_source/00-basic/00-create_db.py)\n00:00.000\n0.0\nsphx_glr_examples_00-basic_01-connect.py (examples_source/00-basic/01-connect.py)\n00:00.000\n0.0\nsphx_glr_examples_00-basic_02-plottype.py (examples_source/00-basic/02-plottype.py)\n00:00.000\n0.0\nsphx_glr_examples_25-intermediate_00-tagging.py (examples_source/25-intermediate/00-tagging.py)\n00:00.000\n0.0\nsphx_glr_examples_25-intermediate_01-queries.py (examples_source/25-intermediate/01-queries.py)\n00:00.000\n0.0\nsphx_glr_examples_50-advanced_00-complete_report.py (examples_source/50-advanced/00-complete_report.py)\n00:00.000\n0.0\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py (examples_source/50-advanced/01-two_simulation_same_db.py)\n00:00.000\n0.0\nsphx_glr_examples_50-advanced_02-customized_report_embed.py (examples_source/50-advanced/02-customized_report_embed.py)\n00:00.000\n0.0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.bar_gap",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.bar_gap.html#bar_gap",
        "title": "bar_gap",
        "section": "bar_gap",
        "text": "Bar charts bar gap\nThe bar gap of the bar chart float type. Range: 0  1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.stacked",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.stacked.html#stacked",
        "title": "stacked",
        "section": "stacked",
        "text": "Bar chart stacking Deprecated\n1=stack the bar charts This is a deprecated property  please use bar_mode instead."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.ytitle",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.ytitle.html#ytitle",
        "title": "ytitle",
        "section": "ytitle",
        "text": "Y axis title\nA title for the y axis"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.export_pdf",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.export_pdf.html#export_pdf",
        "title": "export_pdf",
        "section": "export_pdf",
        "text": "Export report as PDF. Currently works only with a local ADR installation, and\nnot a docker image.\nPath and filename for the PDF file to export.\nDictionary for query parameters to apply to report template before export. Default: None\nList of integers that represents the size of the exported pdf. Default: None, which\ncorresponds to A4 size\nSeconds to delay the start of the pdf export operation. Default: None, which\ncorresponds to no delay\nSuccess status of the PDF export: True if it worked, False otherwise\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = \"My Top Report\")\nsucc = my_report.export_pdf(file_name=r'D:\\tmp\\myreport.pdf')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.url",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.url.html#url",
        "title": "url",
        "section": "url",
        "text": "URL corresponding to the item"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_style",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_style.html#line_style",
        "title": "line_style",
        "section": "line_style",
        "text": "Line styling\nnone solid dot dash longdash dashdot longdashdot"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.stop",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.stop.html#stop",
        "title": "stop",
        "section": "stop",
        "text": "Stop the service connected to the session.\nimport ansys.dynamicreporting.core as adr\ninstallation_dir = r'C:\\Program Files\\ANSYS Inc\\v232'\nadr_service = adr.Service(ansys_installation = installation_dir, port = 8020)\nsession_guid = adr_service.start(username = 'admin', password = 'mypsw',\ndb_directory ='/tmp/dbase')\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.height",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.height.html#height",
        "title": "height",
        "section": "height",
        "text": "Chart height\nChart height in pixels"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux3",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux3.html#line_marker_aux3",
        "title": "line_marker_aux3",
        "section": "line_marker_aux3",
        "text": "Auxiliary data 3\nScalar value or name of a row accessible to line_marker_text as vaux3. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_condensed",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_condensed.html#table_condensed",
        "title": "table_condensed",
        "section": "table_condensed",
        "text": "Table compactness\nControl compactness of table.  Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.format",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.format.html#format",
        "title": "format",
        "section": "format",
        "text": "Number format\nscientific sigfigsX floatdotX str date_XY"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_cond_format",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_cond_format.html#table_cond_format",
        "title": "table_cond_format",
        "section": "table_cond_format",
        "text": "Table conditional formatting\nSpecify conditional formatting rules for table cell formatting."
    },
    {
        "objectID": "examples/25-intermediate/01-queries",
        "href": "examples/25-intermediate/01-queries.html#item-queries",
        "title": "Item queries",
        "section": "Item queries",
        "text": "The Ansys Dynamic Reporting database can contain any number of items, from a few\nto tens of thousands. To handle all this data, the queryansys.dynamicreporting.core.Service.query>()\nmethod allows you to quickly slice the database to select a subset of items.\nThis example assumes that you have a local Ansys installation.\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nNow that an Ansys Dynamic Reporting service is running on top of a\nnew database, you can populate it. To keep this example simple, this code\ncreates multiple text items. It then sets some different names, sources, and\ntags.\nNow that the database is populated with a hundred items with different\nnames, sources, and tags, query the database, beginning with an empty\nquery that returns the entire set (all 100 items). Next, query on the\nsource name, which results in three different lists, with 34, 33, and 33 items\nrespectively. Finally, query on the name and the dp tag. See that the lists\nhave theexpected length. You can try different queries using the other attributes\nthat have been set on the items.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-queries.ipynb\nDownload Python source code: 01-queries.py\nDownload zipped: 01-queries.zip\nGallery generated by Sphinx-Gallery\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)\nfor i in range(100):\n    if i % 3 == 0:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application X\")\n    elif i % 3 == 1:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application Y\")\n    elif i % 3 == 2:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application Z\")\n    my_text.item_text = \"Any text. Does not matter the actual payload\"\n    if i % 4 == 0:\n        my_text.set_tags(\"var=pressure\")\n    elif i % 4 == 1:\n        my_text.set_tags(\"var=energy\")\n    elif i % 4 == 2:\n        my_text.set_tags(\"var=temperature\")\n    elif i % 4 == 3:\n        my_text.set_tags(\"var=vorticity\")\n    my_text.add_tag(tag=\"dp\", value=str(i % 50))\nall_items = adr_service.query()\ntest_one = len(all_items) == 100\napp_x = adr_service.query(filter=\"A|i_src|cont|Application X\")\napp_y = adr_service.query(filter=\"A|i_src|cont|Application Y\")\napp_z = adr_service.query(filter=\"A|i_src|cont|Application Z\")\ntest_two = len(app_x) == 34\ntest_three = len(app_y) == len(app_z) == 33\nname_0 = adr_service.query(filter=\"A|i_name|cont|Name 0\")\nname_11 = adr_service.query(filter=\"A|i_name|cont|Name 11\")\nname_7 = adr_service.query(filter=\"A|i_name|cont|Name 7\")\ntest_four = len(name_7) == len(name_0) == len(name_11) == 5\ndp0_items = adr_service.query(filter=\"A|i_tags|cont|dp=0\")\ndp10_items = adr_service.query(filter=\"A|i_tags|cont|dp=10\")\ndp33_items = adr_service.query(filter=\"A|i_tags|cont|dp=33\")\ntest_five = len(dp0_items) == len(dp10_items) == len(dp33_items) == 2\n# sphinx_gallery_thumbnail_path = '_static/default_thumb.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/25-intermediate/01-queries",
        "href": "examples/25-intermediate/01-queries.html#start-an-ansys-dynamic-reporting-service",
        "title": "Item queries > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/25-intermediate/01-queries",
        "href": "examples/25-intermediate/01-queries.html#create-items",
        "title": "Item queries > Create items",
        "section": "Create items",
        "text": "Now that an Ansys Dynamic Reporting service is running on top of a\nnew database, you can populate it. To keep this example simple, this code\ncreates multiple text items. It then sets some different names, sources, and\ntags.\nfor i in range(100):\n    if i % 3 == 0:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application X\")\n    elif i % 3 == 1:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application Y\")\n    elif i % 3 == 2:\n        my_text = adr_service.create_item(obj_name=f\"Name {str(i % 20)}\", source=\"Application Z\")\n    my_text.item_text = \"Any text. Does not matter the actual payload\"\n    if i % 4 == 0:\n        my_text.set_tags(\"var=pressure\")\n    elif i % 4 == 1:\n        my_text.set_tags(\"var=energy\")\n    elif i % 4 == 2:\n        my_text.set_tags(\"var=temperature\")\n    elif i % 4 == 3:\n        my_text.set_tags(\"var=vorticity\")\n    my_text.add_tag(tag=\"dp\", value=str(i % 50))"
    },
    {
        "objectID": "examples/25-intermediate/01-queries",
        "href": "examples/25-intermediate/01-queries.html#query-the-database",
        "title": "Item queries > Query the database",
        "section": "Query the database",
        "text": "Now that the database is populated with a hundred items with different\nnames, sources, and tags, query the database, beginning with an empty\nquery that returns the entire set (all 100 items). Next, query on the\nsource name, which results in three different lists, with 34, 33, and 33 items\nrespectively. Finally, query on the name and the dp tag. See that the lists\nhave theexpected length. You can try different queries using the other attributes\nthat have been set on the items.\nall_items = adr_service.query()\ntest_one = len(all_items) == 100\napp_x = adr_service.query(filter=\"A|i_src|cont|Application X\")\napp_y = adr_service.query(filter=\"A|i_src|cont|Application Y\")\napp_z = adr_service.query(filter=\"A|i_src|cont|Application Z\")\ntest_two = len(app_x) == 34\ntest_three = len(app_y) == len(app_z) == 33\nname_0 = adr_service.query(filter=\"A|i_name|cont|Name 0\")\nname_11 = adr_service.query(filter=\"A|i_name|cont|Name 11\")\nname_7 = adr_service.query(filter=\"A|i_name|cont|Name 7\")\ntest_four = len(name_7) == len(name_0) == len(name_11) == 5\ndp0_items = adr_service.query(filter=\"A|i_tags|cont|dp=0\")\ndp10_items = adr_service.query(filter=\"A|i_tags|cont|dp=10\")\ndp33_items = adr_service.query(filter=\"A|i_tags|cont|dp=33\")\ntest_five = len(dp0_items) == len(dp10_items) == len(dp33_items) == 2"
    },
    {
        "objectID": "examples/25-intermediate/01-queries",
        "href": "examples/25-intermediate/01-queries.html#close-the-service",
        "title": "Item queries > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-queries.ipynb\nDownload Python source code: 01-queries.py\nDownload zipped: 01-queries.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/default_thumb.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.visualize_report",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.visualize_report.html#visualize_report",
        "title": "visualize_report",
        "section": "visualize_report",
        "text": "Render the report.\nName of the report. the default is \"\", in which\ncase all items assigned to the session are shown.\nWhether to render the report in a new tab if the current environment\nis a Jupyter notebook. The default is False, in which case the\nreport is rendered in the current location. If the environment is\nnot a Jupyter notebook, the report is always rendered in a new tab.\nQuery string for filtering. The default is \"\". The syntax corresponds\nto the syntax for Ansys Dynamic Reporting. For more information, see\n_Query Expressions in the documentation for Ansys Dynamic Reporting.\nRendered report.\nThere is no ADR service associated with the current object.\nThe service does not have a report with the input name.\nimport ansys.dynamicreporting.core as adr\ninstallation_dir = r'C:\\Program Files\\ANSYS Inc\\v232'\nadr_service = adr.Service(ansys_installation = installation_dir)\nret = adr_service.connect()\nmy_img = adr_service.create_item()\nmy_img.item_image = 'Image_to_push_on_report'\nadr_service.visualize_report()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux9",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux9.html#line_marker_aux9",
        "title": "line_marker_aux9",
        "section": "line_marker_aux9",
        "text": "Auxiliary data 9\nScalar value or name of a row accessible to line_marker_text as vaux9. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.set_tags",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.set_tags.html#set_tags",
        "title": "set_tags",
        "section": "set_tags",
        "text": "Set tags on the item.\nTags to set on the item. Separate multiple tags with a space. The\ntag syntax is tagname=value.\nTrue when successful, False when failed.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_txt = adr_service.create_item()\nmy_txt.item_text = '<h1>The test</h1>This is a text item'\nmy_txt.set_tags(\"tagone=1 tagtwo=two\")"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_color",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_color.html#line_color",
        "title": "line_color",
        "section": "line_color",
        "text": "Linebarhistogrampiemarker colors\n#rrggbb #rgb @rownamenumber hexadecimal digits: #8b783f"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.rem_tag",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.rem_tag.html#rem_tag",
        "title": "rem_tag",
        "section": "rem_tag",
        "text": "Remove a tag on the item.\nTag to remove. The default is \"\".\nTrue when successful, False when failed.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nitem_list = adr_service.query()\nfirst_item = item_list[0]\nall_tags = first_item.rem_tags(tag='tagone')"
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#dataset-and-session-objects",
        "title": "Dataset and Session Objects",
        "section": "Dataset and Session Objects",
        "text": "This object is a Python representation of an Ansys\nDynamic Reporting dataset object. When\nthis object is created, a GUID will automatically be generated for the\nobject.\nThe following attributes are available on a DatasetREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nfilename - The filename portion of the dataset local path, a string\ndirname - The directory name portion of the dataset local path, a\nstring\nformat - The format of the dataset, a string\nnumparts - The number of parts in the dataset, an integer\nnumelements - The total number of elements in the dataset, an integer\n(a measure of the size of the dataset)\ndataset.set_tags(tagstring)\nSet the tags for the dataset to the passed string. Multiple tags are\nspace-separated.\ndataset.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ndataset.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ndataset.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\nThis object is a Python representation of an\nAnsys Dynamic Reporting session object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date.\nThe following attributes are available on a SessionREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user defined tags string for this object. Multiple tags\nare space-separated.\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nhostname - The name of the host system the session was run on, a\nstring\nversion - The version of the application that was used to generate\nthis session, a string\nplatform - The platform/OS on which the application generated this\nsession, a string\napplication - The name of the application generating this session, a\nstring\nsession.set_tags(tagstring)\nSet the tags for the session to the passed string. Multiple tags are\nspace-separated.\nsession.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nsession.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nsession.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring."
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#report_objectsdatasetrest-object",
        "title": "Dataset and Session Objects > report_objects.DatasetREST object",
        "section": "report_objects.DatasetREST object",
        "text": "This object is a Python representation of an Ansys\nDynamic Reporting dataset object. When\nthis object is created, a GUID will automatically be generated for the\nobject.\nThe following attributes are available on a DatasetREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nfilename - The filename portion of the dataset local path, a string\ndirname - The directory name portion of the dataset local path, a\nstring\nformat - The format of the dataset, a string\nnumparts - The number of parts in the dataset, an integer\nnumelements - The total number of elements in the dataset, an integer\n(a measure of the size of the dataset)\ndataset.set_tags(tagstring)\nSet the tags for the dataset to the passed string. Multiple tags are\nspace-separated.\ndataset.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ndataset.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ndataset.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring."
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#data-members",
        "title": "Dataset and Session Objects > Data members",
        "section": "Data members",
        "text": "The following attributes are available on a DatasetREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated.\nfilename - The filename portion of the dataset local path, a string\ndirname - The directory name portion of the dataset local path, a\nstring\nformat - The format of the dataset, a string\nnumparts - The number of parts in the dataset, an integer\nnumelements - The total number of elements in the dataset, an integer\n(a measure of the size of the dataset)"
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#methods",
        "title": "Dataset and Session Objects > Methods",
        "section": "Methods",
        "text": "dataset.set_tags(tagstring)\nSet the tags for the dataset to the passed string. Multiple tags are\nspace-separated.\ndataset.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ndataset.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ndataset.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring."
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#report_objectssessionrest-object",
        "title": "Dataset and Session Objects > report_objects.SessionREST object",
        "section": "report_objects.SessionREST object",
        "text": "This object is a Python representation of an\nAnsys Dynamic Reporting session object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date.\nThe following attributes are available on a SessionREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user defined tags string for this object. Multiple tags\nare space-separated.\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nhostname - The name of the host system the session was run on, a\nstring\nversion - The version of the application that was used to generate\nthis session, a string\nplatform - The platform/OS on which the application generated this\nsession, a string\napplication - The name of the application generating this session, a\nstring\nsession.set_tags(tagstring)\nSet the tags for the session to the passed string. Multiple tags are\nspace-separated.\nsession.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nsession.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nsession.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring."
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#data-members",
        "title": "Dataset and Session Objects > Data members",
        "section": "Data members",
        "text": "The following attributes are available on a SessionREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user defined tags string for this object. Multiple tags\nare space-separated.\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nhostname - The name of the host system the session was run on, a\nstring\nversion - The version of the application that was used to generate\nthis session, a string\nplatform - The platform/OS on which the application generated this\nsession, a string\napplication - The name of the application generating this session, a\nstring"
    },
    {
        "objectID": "lowlevelapi/DatasetandSessionObjects",
        "href": "lowlevelapi/DatasetandSessionObjects.html#methods",
        "title": "Dataset and Session Objects > Methods",
        "section": "Methods",
        "text": "session.set_tags(tagstring)\nSet the tags for the session to the passed string. Multiple tags are\nspace-separated.\nsession.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\nsession.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\nsession.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.html#service",
        "title": "Service",
        "section": "Service",
        "text": "Provides for creating a connection to an Ansys Dynamic Reporting service.\nThree-digit format for a locally installed Ansys version.\nFor example, 232 for Ansys 2023 R2. The default is None.\nDocker image to use if you do not have a local Ansys installation.\nThe default is \"ghcr.io/ansys-internal/nexus\".\nPath to the directory for storing temporary information from the Docker image.\nThe default is creating a new directory inside the OS\ntemporary directory. This parameter must pass a directory that exists and\nis empty.\nPath to the database directory for the Ansys Dynamic Reporting service.\nThe default is None. This parameter must pass a directory that exists and\nis empty.\nPort to run the Ansys Dynamic Reporting service on. The default is 8000.\nFile to write logs to. The default is None. Acceptable values are\nfilenames or stdout for standard output.\nPath to the directory where Ansys is installed locally. If Ansys is not\ninstalled locally but is to be run in a Docker image, set the\nvalue for this paraemter to \"docker\".\nThe \"db_directory\" argument has not been provided when using a Docker image.\nCan not create the \"db_directory\" when using a Docker image.\nThe \"ansys_installation\" does not correspond to a valid Ansys installation.\ndirectory\nCan not find the Ansys version number from the installation directory.\nInitialize the class and connect to an Ansys Dynamic Reporting service running on\nthe localhost on port 8010 with username set to \"admin\" and password\nset to \"mypsw\" using a local Ansys installation:\nService.connect([url, username, password, ...])\nConnect to a running service.\nService.create_item([obj_name, source])\nCreate an item that gets automatically pushed into the database.\nService.delete(items)\nDelete objects from the database.\nService.get_list_reports([r_type])\nGet a list of top-level reports in the database.\nService.get_report(report_name)\nGet a Report item that corresponds to a report in the database with a given name.\nService.query([query_type, filter])\nQuery the database.\nService.start([username, password, ...])\nStart a new service.\nService.stop()\nStop the service connected to the session.\nService.visualize_report([report_name, ...])\nRender the report.\nService.session_guid\nGUID of the session associated with the service.\nService.url\nURL for the service.\nimport ansys.dynamicreporting.core as adr\ninstallation_dir = r'C:\\Program Files\\ANSYS Inc\\v232'\nadr_service = adr.Service(ansys_installation = installation_dir)\nret = adr_service.connect(url = \"http://localhost:8010\", username = \"admin\", password = \"mypsw\")"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.get_guid",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.get_guid.html#get_guid",
        "title": "get_guid",
        "section": "get_guid",
        "text": "Get the guid corresponding to the report.\nguid corresponding to the report. If no guid exists, an empty string is returned.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = 'Top report')\nreport_url = my_report.get_guid()"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#template-objects",
        "title": "Template Objects",
        "section": "Template Objects",
        "text": "This object is a Python representation of an Ansys\nDynamic Reporting template object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date. The\nreport_objects.TemplateREST class represent features common to all\ntemplate types. Two sub-classes, report_objects.LayoutREST and\nreport_objects.GeneratorREST represent the generic Layout and Generator\ntemplates. From each of these classes, a set of sub-classes representing\nthe specific template types are inherited. For information specific to\neach template type, refer to the subclass tree.\nTemplateREST objects should always be generated using the\nserver object create_template() method.\nThe following attributes are available on a TemplateREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated. You can also access the tabs via the method\nget_tags().\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the template\nreport_type - The type of the report template (e.g. ‘Layout:basic’).\nThe report_type is also set by the sub-class of the object. See\nthis table for the\ncorrespondence between report_type and template sub-class\nitem_filter - The filter string for this report template. You can\nalso access the filter via the method\nget_filter().\nparams - A Python dictionary of the parameters for this specific\nreport_type. You can also access the parameters via the method\nget_params().\nchildren - A list of the child templates of this template\nmaster - True if the parent data member is None\nparent - The parent template (if any) of this template\ntemplate.get_params()\nGet the parameters of the template.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.set_params({‘param1’: 1})\nSet the parameters of the template. This function takes as input a\ndictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.add_params({‘param1’: 1})\nAdd the parameters to the existing template parameters. This function\ntakes as input a dictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.get_property()\nGet the properties of the template as a dictionary. A general\ndescription of what properties are for a template can be found\nhere.\ntemplate.set_property(property={})\nSet the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.add_property(property={})\nAdd the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.get_sort_fields()\nGet the sorting filter of the template.\ntemplate.set_sort_fields([‘+i_date’, ‘-i_name’])\nSet the sorting filter of the template. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported at this link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.add_sort_fields([‘+i_date’, ‘-i_name’])\nAdd elements to the sorting filter of the template. This function takes\na list as input. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.get_sort_selection()\nGet the sort selection parameter.\ntemplate.set_sort_selection(value=”all”)\nSet the sort selection parameter for the template.This function takes a\nstring as input, among the following options:\n‘all’\n‘first’\n‘last’\ntemplate.set_tags(tagstring)\nSet the tags for the template to the passed string. Multiple tags are\nspace-separated.\ntemplate.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ntemplate.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ntemplate.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\ntemplate.get_filter()\nGet the item filter of the template. The item filter is encoded as a\nstring using the format explained link.\ntemplate.set_filter(filter_str=’’)\nSets the item filter of the template. Takes as input a string. The item\nfilter is encoded as a string using the format explained\nlink.\ntemplate.add_filter(filter_str=’’)\nAdd filters to the item filter of the template. Takes as input a string.\nThe item filter is encoded as a string using the format explained\nlink.\ntemplate.get_filter_mode()\nReturns the filter mode of the template. The possible outputs are:\n‘items’: corresponds to Incoming Items\n‘root_replace’: corresponds to Database (replace)\n‘root_append’: corresponds to Database (append)\ntemplate.set_filter_mode(value=’items’)\nSets the filter mode of the template. Takes as input a string. See\nget_filter_mode for the accepted values.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nEach template type is represented by a subclass of the TemplateREST\nclass. There are two main subclasses: LayoutREST for the Layout template\ntypes and GeneratorREST for the Generator template types. Each of these\nsubclasses has its own set of subclasses, to represent each specific\ntemplate type.\nLayouts\nTemplate type\nTemplate API sub-class\nbasic\nColumns\nreport_objects.basicREST()\npanel\nPanel\nreport_objects.panelREST()\nbox\nBoxes\nreport_objects.boxREST()\ntabs\nTabs\nreport_objects.tabsREST()\ncarousel\nCarousel\nreport_objects.carouselREST()\nslider\nSlider\nreport_objects.sliderREST()\nfooter\nPage Footer\nreport_objects.footerREST()\nheader\nPage Header\nreport_objects.headerREST()\niterator\nIterator\nreport_objects.iteratorREST()\ntagprops\nTag to Properties\nreport_objects.tagpropsREST()\ntoc\nTable of Contents\nreport_objects.tocREST()\nreportlink\nLink Report\nreport_objects.reportlinkREST()\nuserdefined\nUserdefined\nreport_objects.userdefinedREST()\nGenerators\nTemplate type\nTemplate API sub-class\ntablemerge\nTable Merge\nreport_objects.tablemergeREST()\ntablereduce\nTable Reduction\nreport_objects.tablereduceREST()\ntablerowcolumnfilter\nTable Row/Column Filter\nreport_objects.tablerowcolumnfilterREST()\ntablevaluefilter\nTable Value Filter\nreport_objects.tablevaluefilterREST()\ntablesortfilter\nTable Row/Column Sort\nreport_objects.tablesortfilterREST()\nsqlqueries\nSQL Query\nreport_objects.sqlqueriesREST()\ntreemerge\nTree Merge\nreport_objects.mergetreeREST()\nstatistical\nStatistical Analysis\nreport_objects.statisticalREST()\nInherits from TemplateREST\nClass that groups all the common attributes among Layout templates\n(for reference, see here). Its specific methods are:\ntemplate.get_column_count()\nGet the number of columns.\ntemplate.set_column_count(value)\nSet the number of columns. Takes as input an integer larger than 0.\ntemplate.get_column_widths()\nGet the list of the widths of the columns.\ntemplate.set_column_widths([1.0, 2.0, 1.0])\nSet the list of the widths of the columns. Takes as input an array where\neach number represent the relative width of that column compared to the\nother columns.\ntemplate.get_transpose()\nReturns the Transpose columns/rows status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_transpose(value=0)\nSets the Transpose columns/rows status of the template. value = 0 for\noff, value = 1 for on. It supports only Layout: template types.\ntemplate.get_skip()\nReturns the Skip if no input items status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_skip(value=0)\nSets the Skip if no input items status of the template. value = 0\n(default) for off, value = 1 for on. It supports only Layout: template\ntypes.\ntemplate.get_html()\nReturns the HTML of the template. It supports only Layout: template\ntypes\ntemplate.set_html(value=None)\nSets the HTML of the template. Takes as input a string. It supports only\nLayout: template types.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Slider Example” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nInherits from TemplateREST\nClass that groups all the common attributes among\nGenerator templates. Its specific methods are:\ntemplate.get_generated_items()\nGet the Generated items flag. Returned values:\n‘replace’: corresponds to Replace\n‘add’: corresponds to Append\ntemplate.set_generated_items(value)\nGet the Generated items flag. Takes as input a string. See\nget_generated_items() for the acceptable strings.\ntemplate.get_append_tags()\nGet the value for Append template tags to new items. Returned values are\nTrue for toggled ON, False for toggled OFF\ntemplate.set_append_tags(value=True)\nGet the value for Append template tags to new items. The input needs to\nbe a boolean: True / False\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Columns Layout template\ntype. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Panel Layout template type.\nIts specific methods are:\ntemplate.get_panel_style()\nGet the style of the Panel. Possible returned values:\n‘panel’: corresponds to Titled Panel\n‘callout-default’: corresponds to Callout\n‘callout-danger’: corresponds to Callout Error\n‘callout-warning’: corresponds to Callout Warning\n‘callout-success’: corresponds to Callout Success\n‘callout-info’: corresponds to Callout Info\ntemplate.set_panel_style(value=’panel’)\nSet the style of the Panel. Takes as input strings. For the acceptable\nvalues, see get_panel_style()\ntemplate.get_items_as_link()\nGet the Show items as link toggle. 0 corresponds to Off, 1 corresponds\nto ON.\ntemplate.set_items_as_link(value=0)\nSet the Show items as link toggle. Takes as input an integer. 0\ncorresponds to Off, 1 corresponds to ON.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Boxes Layout template type.\nIts specific methods are:\ntemplate.get_children_layout()\nGet the children layout. This method returns a dictionary where each\nentry is a different child layout.\nFor each entry, the key corresponds to the guid of the child template.\nThe corresponding value is an array that gives:\nwhere Clip has the following values:\n‘self’: corresponds to Clip: To self\n‘scroll’: corresponds to Clip: Scroll\n‘none’: corresponds to Clip: None\ntemplate.set_child_position(guid=None, value=[0,0,10,10])\nSet the children layout: position and size. The method takes as input\nthe guid of the child template you want to modify, and an array of 4\nintegers that corresponds to [X, Y, Width, Height] that you want to\nset.\nRemember that if you are setting a new child template (not modifying\nan existing one), you will manually need to set that this child\ntemplate has the current box template as the parent template. See the\nexample below for how to do it.\ntemplate.set_child_clip(guid=None, clip=’self’)\nSet the children layout: clip parameter. The method takes as input the\nguid of the child template you want to modify, and the clip type as a\nstring. Only the types enumerated in get_children_layout() are\nacceptable values.\nRemember that if you are setting the clip type for a new child\ntemplate (not modifying an existing one), you will manually need to\nset that this child template has the current box template as the\nparent template. See the example below for how to do it.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Box report test” that already exists in in the database\nrunning locally on port 8000. These would be the lines of code to create\nthe new template:\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Tabs Layout template type. No\nspecific methods for this class.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Carousel Layout template\ntype. Its specific methods are:\ntemplate.get_animated()\nGet the Animated value. If the toggle is OFF (default), the method will\nreturn 0. This means that the Carousel doesn’t automatically change\ndisplayed image, and the user needs to click to see the next item.\nA non-zero integer value means the Carousel will automatically change\ndisplayed image. The value represents how long each image is displayed\nfor in ms.\ntemplate.set_animated(value=0)\nSet the Animated value. For an explanation of what this parameter\nrepresents, see the get_animated() method above.\ntemplate.get_slide_dots()\nGet the Include side dots value. If zero (default), the method returns\n1.  If the number of side dots is larger than the number of items\ndisplayed on the Carousel, a number of dots corresponding to the number\nof items will be displayed. If the number of side dots is smaller than\nthe number of items displayed on the Carousel, it is ignored an no dots\nare displayed.\ntemplate.set_slide_dots(value=20)\nSet the Include side dots value. For an explanation of what this\nparameter represents, see the get_side_dots() method above.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Slider template\ntype. Its specific methods are:\ntemplate.get_map_to_slider()\nGet the Selected tags and sort to map to sliders. This function returns\na list where each element corresponds to one tag and its sorting order.\nThe accepted sorted orders are:\n‘text_up’: corresponds to Text sort up\n‘text_down’: corresponds to Text sort down\n‘numeric_up’: corresponds to Numeric sort up\n‘numeric_down’: corresponds to Numeric sort down\n‘none’: corresponds to No sorting\n‘natural_up’: corresponds to Natural sort up\n‘natural_down’: corresponds to Natural sort down\n‘none’: corresponds to No sorting\nAn example of output of this function is: [‘tag1|text_up’,\n‘tag2|numeric_down’, ‘tag3|none’] where the slider is sorted by “tag1”\nusing the “Text sort up” sorting method, then by “tag2” using the\n“Numeric sort down” method and finally by “tag3” using no sorting\nmethod.\ntemplate.set_map_to_slider(value=[])\nSet the Selected tags and sort to map to sliders. This function takes as\ninput a list where each element corresponds to one tag and its sorting\norder. See function get_map_to_slider() for the accepted sorting order\nvalues. The input for this function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\ntemplate.add_map_to_slider(value=[])\nAdd new tags and sorting methods to the the Selected tags and sort to\nmap to sliders. This function takes as input a list where each element\ncorresponds to one tag and its sorting order. See function\nget_map_to_slider() for the accepted sorting order values. The input for\nthis function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Basic Slider” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Tabs” in the database running locally on port 8000. These would be the\nlines of code to create the new template:\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Footer Layout\ntemplate type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Header Layout\ntemplate type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Iterator template\ntype. Its specific methods are:\ntemplate.get_iteration_tags()\nGet the values for Iteration tag and Secondary sorting tag. The values\nare returned as element 0 and 1 of a list.\ntemplate.set_iteration_tags(value = [‘’, ‘’])\nSet the values for Iteration tag and Secondary sorting tag. The input\nvalues are given as element 0 and 1 of a list, and they need to be\nstrings\ntemplate.get_sort_tag()\nGet the values for Sort items by tag and Reverse the sort as booleans.\nThe values are returned as element 0 and 1 of a list.\ntemplate.set_sort_tag(value=[True, False])\nSet the values for Iteration tag and Secondary sorting tag. The values\nare given as a list of booleans. Note that if you set the first element\nto False, the second will automatically be set to False as well,\nregardless of what the input is.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Tag to Properties\nLayout template type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Table of Contents\nLayout template type. Its specific methods are:\ntemplate.get_toc()\nGet the values for Table of Contents, Figure List and Table List. Only\none option can be ON at any given time. The function will return a\nstring that corresponds to the option that is toggled on:\n‘toc’: corresponds to Table of Contents option\n‘figure’: corresponds to the Figure List option\n‘table’: corresponds to the Table List option\nIf none of these option is ON (default when the template is created),\nthen the method will return None.\ntemplate.set_toc(option=’toc’)\nSet the values for Table of Contents, Figure List and Table List. Only\none can be ON at any given time. Only the following values for option\nare accepted:\n‘toc’: toggles on the Table of Contents option\n‘figure’: toggles on the Figure List option\n‘table’: toggles on the Table List option\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Link Report Layout\ntemplate type. Its specific methods are:\ntemplate.get_report_link()\nGet the guid of the linked report. If no linked report, it will return\nNone\ntemplate.set_report_link(link=None)\nSet the guid of the linked report. It takes as input a valid guid. If\nyou want to set to link to no report, set the input to None\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Userdefined Layout\ntemplate type. This template inserts a named div into the HTML output.\nThis div can be filled with any HTML the user would like.  By default,\nthe HTML content will be filled in with the TemplateREST.set_html()\ncontent (if any).  This content may be placed before or after any\nchild item/layout content.\nSpecific properties include:\ntemplate.interactive_only: int\nIf this property is set to a non-zero value (the default), then the\ndiv will not be included when ADR is outputting PDF, PowerPoint or\nOffline HTML.  If set to zero, it will be included in PDF and Offline\nHTML output.\ntemplate.before_children: int\nIf this property is set to zero (the default), then any child content\nis placed in the report before the div.  If set to a non-zero value, the\nchildren will be placed in the report after the div.\ntemplate.userdef_name: str\nThis property is used to specify the value of the div adr_userdefined_template\nattribute.  The default value is unspecified.\nFor example, if this property is set to \"Hello\" and the HTML is set\nto <h1>Example</h1> the generated div will look like this:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merging_param()\nGet the value of Merging. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_merging_param(value=’row’)\nSet the value of Merging. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_sources()\nGet the values of the Select source rows/columns. The output is a list\nwhere each element is a different source. Each element has the following\nform: ‘row_name|merge_operation’ where merge_operation can have one of\nthe following values:\n‘duplicate’: corresponds to Allow Duplicates\n‘merge’: corresponds to Combine Values\n‘rename_tag’: corresponds to Rename Using Only Tag\n‘rename_nametag’: corresponds to Rename With Name and Tag\ntemplate.set_sources(value=[])\nSet the values of the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.add_sources(value=[])\nAdd some values to the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_use_labels()\nGet the value of the toggle for Use row/column labels as row/column IDs.\nOutput is 0 for toggled OFF, 1 for toggled ON.\ntemplate.set_use_labels(value=1)\nSet the value of the toggle for Use row/column labels as row/column IDs.\nInput should be an integer: 0 for toggled OFF, 1 for toggled ON.\ntemplate.get_use_ids()\nGet the value for the Row/Column to use as column/row IDs field.\ntemplate.set_use_ids(value=’’)\nSet the value for the Row/Column to use as column/row IDs field. Input\nshould be a string. This method will not work if get_use_labels()\nreturns 1.\ntemplate.get_id_selection()\nGet the value for the Row/Column ID selection. The possible outputs are:\n‘all’: corresponds to All IDs\n‘intersect’: corresponds to Only Common IDs\n‘select’: corresponds to Select Specific IDs\ntemplate.set_id_selection(value=’all’)\nSet the value for the Row/Column ID selection. Input should be a string\namong the ones listed in the get_id_selection() method.\ntemplate.get_ids()\nGet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, it will return an empty\nlist. Otherwise, it will return a list where each element is an ID.\ntemplate.set_ids(value=[])\nSet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.add_ids(value=[])\nAdd IDs to the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.get_unknown_value()\nGet the value for Unknown value. It returns a string. Default is ‘nan’.\ntemplate.set_unknown_value(value=’nan’)\nSet the value for the Unknown value. Input needs to be a string.\ntemplate.get_table_transpose()\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Merged Table” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Columns” in the database running locally on port 8000. These would be\nthe lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Reduction\nGenerator template type. Its specific methods\nare:\ntemplate.get_reduce_param()\nGet the value of Reduce. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_reduce_param(value=’row’)\nSet the value of Reduce. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_operations()\nGet the values for the Reduce operations as a list. Each element\ncorresponds to a different operation. Each element is a dictionary,\nwhere the following keys are presented:\n‘source_rows’: corresponds to the name(s) of the rows/columns used in\nthe operation\n‘output_rows’: corresponds to the Output row/column name\n‘output_rows_from_values’: False (OFF) / True (ON) for the Use unique\nvalues from a column/row as column/row names\n‘output_column_select’: corresponds to the “Select columns/rows”\nfield\n‘output_columns’: corresponds to the Column/Row name field\n‘output_columns_from_values’: False (OFF) / True (ON) for the Use\nunique values from a column/row as a new columns/rows toggle\n‘operation’: corresponds to the Operation field. Possible values:\n‘min’: Minimum\n‘max’: Maximum\n‘count’: Count\n‘sum’: Sum\n‘diff’: Difference\n‘mean’: Mean\n‘stdev’: Standard deviation\n‘skew’: Skew\n‘kurtosis’: Kurtosis\ntemplate.delete_operation(name = [])\nMethod to remove an entire Reduce operation. Takes as input a list with\nthe name(s) of the source rows/columns used in the operation. So for\nexample to delete the third Reduce operation from the following panel:\nuse:\nTo delete the first operation, use:\nAdd a new Reduce operation.\n‘name’: corresponds to the name(s) of the rows/columns used in the\noperation. Input needs to be a list of strings\n‘unique’: corresponds to the Use unique values from a column as row\nnames toggle. False is OFF, True is ON\noutput_name: corresponds to the Output row/column name.\nexisting: corresponds to the Use existing columns/rows toggle. False\nif OFF, True is ON.\nselect_names. If existing is set to True, it is used for the Selected\ncolumns/rows field. If existing is set to False, this field is used\nfor the Column/Row name.\noperation: corresponds to the operation field. See get_operation()\nfor the acceptable values.\nFor example to create the operation in the following widget:\nyou would run:\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “ASCII reduce” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Merge reduce example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Filter\nGenerator template type. Its specific\nmethods are:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_rows()\nGet the value of Rows… The values are returned as a list of strings,\nwhere each element corresponds to a row value.\ntemplate.set_filter_rows(value=[’*’])\nSet the value of Rows… The input value needs to be a list of strings,\nwhere each element corresponds to a different row value.\ntemplate.add_filter_rows(value=[’*’])\nAdd new values to the value of Rows… The input value needs to be a\nlist of strings, where each element corresponds to a different row\nvalue.\ntemplate.get_filter_columns()\nGet the value of Columns… The values are returned as a list of\nstrings, where each element corresponds to a column value.\ntemplate.set_filter_columns(value=[’*’])\nSet the value of Columns… The input value needs to be a list of\nstrings, where each element corresponds to a different column value.\ntemplate.add_filter_columns(value=[’*’])\nAdd new values to the value of Columns… The input value needs to be a\nlist of strings, where each element corresponds to a different column\nvalue.\ntemplate.get_invert()\nGet the value of Select the rows/columns to remove. Returns 0 or False\nif it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert(value=False)\nSet the value of Select the rows/columns to remove. Set it to 0 or False\nto toggle OFF, set to 1 or True to toggle ON\ntemplate.get_sort()\nGet the value of Sort rows/columns by selection order. Returns 0 or\nFalse if it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_sort(value=False)\nSet the value of Sort rows/columns by selection order. Set it to 0 or\nFalse to toggle OFF, set to 1 or True to toggle ON. This method works\nonly if the Select the rows/columns to remove is toggled OFF.\ntemplate.get_table_transpose()\nGet the value of Transpose the output table. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_table_transpose(value=False)\nSet the value of Transpose the output table. Set it to 0 or False to\ntoggle OFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Filter” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Filter Generator” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Value Filter\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_by()\nGet the value of Filter by values in as a list. The first element is\n‘column’ (default) or ‘row’. The second element of the list of the\nnumber of row/column set in the following field.\ntemplate.set_filter_by(value = [‘column’, ‘0’])\nSet the value of Filter by values in as a list. The first element needs\nto be ‘column’ or ‘row’. The second element of the list of the number of\nrow/column set in the following field, and needs to be a string.\ntemplate.get_filter_value()\nGet the value of Filter. Each different type of filter will return a\ndifferent type of output:\n‘Range of values’: it returns a list of three elements. The first\nelement is ‘range’. The second and third are strings that represent\nthe min. and max. of the range.\n‘Specific values’: it returns a list of two elements. The first\nelement is “specific”. The second element is a list of strings. Each\nelement in this second list is one entry in the Select specific\nvalues… field\n‘Upper % of values’: it returns a list of two elements. The first\nelement is “top_percent”. The second element is a float that\ncorresponds to the Upper percent of values field.\n‘Upper # of values’: it returns a list of two elements. The first\nelement is “top_count”. The second element is an integer that\ncorresponds to the Upper number of values field.\n‘Lower % of values’: it returns a list of two elements. The first\nelement is “bot_percent”. The second element is a float that\ncorresponds to the Lower percent of values field.\n‘Lower # of values’: it returns a list of two elements. The first\nelement is “bot_count”. The second element is an integer that\ncorresponds to the Lower number of values field.\ntemplate.set_filter_value(value=[‘range’, ‘’, ‘’])\nSet the value of Filter. Each different type needs a different type of\ninput. See the description of get_filter_value() possible outputs to know the\ndetails of the accepted formats.\ntemplate.get_invert_filter()\nGet the value of Invert filter sense. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert_filter(value=False)\nSet the value of Invert filter sense. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\ntemplate.get_values_as_dates()\nGet the value of Treat values as dates. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_values_as_dates(value=False)\nSet the value of Treat values as dates. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Value Filter Example” that already exists in in the database\nrunning locally on port 800. These would be the lines of code to create\nthe new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Sort\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_sort_rows()\nGet the Select columns to sort rows by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the row name to sort by.\ntemplate.set_sort_rows([])\nSet the Select columns to sort rows by. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the row to sort by. Example: setting the sort\nfields to be by increasing row “temperature” and decreasing by row\n“pressure” becomes: [‘+temperature’, ‘-pressure’]\ntemplate.add_sort_rows([])\nAdd the Select columns to sort rows by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.get_sort_columns()\nGet the Select rows to sort columns by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the column name to sort by.\ntemplate.set_sort_columns([])\nSet the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.add_sort_columns([])\nAdd the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Sorted” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Sort Filter Example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the SQL Query Generator\ntemplate type. Its specific methods are:\ntemplate.get_db_type()\nGet the Database type. Possible outputs are: SQLite / PostgreSQL\ntemplate.set_db_type(value=’SQLite’)\nSet the Database type. Input needs to be a string. Only two acceptable\nvalues: ‘SQLite’ or ‘PostgreSQL’\ntemplate.get_sqlite_name()\nGet the SQLite filename.\ntemplate.set_sqlite_name(value=’’)\nSet the SQLite filename. Input needs to be a string. The method will not\nwork if the Database type is set to PostgreSQL\ntemplate.get_postgre()\nGet the PostgreSQL parameters. This method returns a dictionary with\nfive entries, corresponding to:\nDatabase name:\nHostname:\nPort:\nUsername:\nPassword:\ntemplate.set_postgre(value = {‘database’: ‘’,\n‘hostname’:’localhost’, ‘port’: ‘5432’, ‘username’:’nexus’,\n‘password’:’cei’})\nSet the the PostgreSQL parameters. Input needs to be a dictionary with\nthe keys: ‘database’, ‘hostname’, ‘port’, ‘username’, ‘password’. Note\nthat all keys are strings. See get_postgre() method for the description\nof each element. The method will not work if the Database type is set to\nSQLite\ntemplate.get_query()\nGet theSQL query text: field.\ntemplate.set_query(value=’’)\nSet theSQL query text: field. Input needs to be a string. Note that no\ncheck on the validity of the SQL query itself is performed. It is up to\nthe user to make sure the query is properly formatted.\ntemplate.validate()\nValidate the database. This method should be run after all the\nparameters for the database connection have been set. The method\nreturns:\nBoolean parameter: True is the database can be validated, False\notherwise.\nError message: If the connection is validated, this will be an empty\nstring. Otherwise, and error message with more details about the\nfailure will be returned.\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Tree Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merge_rule()\nGet the row merging rule.\ntemplate.set_merge_rule(value=’all’)\nSet the row merging rule. Legal values: ‘all’, ‘common’, ‘first’\ntemplate.get_match_rule()\nGet the rule for matching rows.\ntemplate.set_match_rule(value=’both’)\nSet the rule for matching rows. Legal values: ‘key’, ‘name’, ‘both’\ntemplate.get_tree_name()\nGet the name that the generated tree will be given.\ntemplate.set_tree_name(value=’treemerge’)\nSet the name that the generated tree will be given. Input needs to be a\nstring.\ntemplate.get_fill_value()\nGet the value to be used to fill unknown cells.\ntemplate.set_fill_value(value=’’)\nSet the value to be used to fill unknown cells. Input needs to be a\nstring.\ntemplate.get_header_tag()\nGet the name of the tag (if any) to be used to generate an output tree\nheader.\ntemplate.set_header_tag(value=’’)\nSet the name of the tag to be used to generate an output tree header.\nInput needs to be a string. An empty string (the default) specifies that\nno tree header be generated.\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Statistical Analysis Generator\ntemplate type. Its specific methods are:\ntemplate.get_analysis_type()\nGet the type of statistical analysis\nTemplate.set_analysis_type(value=””)\nSet the type of statistical analysis.\nOnly “Linear Regression” is supported.\nTemplate.get_table_name()\nGet the name of the output table.\nTemplate.set_table_name(value=””)\nSet the name of the output table. Input must be a string.\nTemplate.get_tree_name()\nGet the name of the output tree with statistical parameters values.\nTemplate.set_tree_name(value=””)\nSet the name of the output tree with statistical parameters values.\nInput must be a string.\nTemplate.set_predictor_variables(value)\nSet the predictor variables. The input needs to be a list,\nwith each element a list of length 3.\nThe elements of the sub-lists must be:\nType. Only “row” is currently supported.\nVariable predictor name.\nOutput row name.\nTemplate.get_predictor_variables()\nGet the list of predictor variables.\nReturns a list where each element is a sub-list of\n3 elements (type, predictor name, output name)\nTemplate.set_response_variables(value=””)\nSet the response variables. Input must be a list of sub-lists,\neach with two elements:\nResponse variable name\nOutput row name\nTemplate.get_response_variables()\nGet the response variable list. Each element is a sub-list\nwith two elements each.\nTemplate.set_analysis_params(value=””)\nSet the parameters for the statistical analysis.\nCurrently not supported.\nTemplate.get_analysis_params()\nGet the parameters for the statistical algorithm.\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Example Template\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_filter(\"A|i_src|cont|build_imagery;A|i_tags|cont|timestep=10;\")\nmy_template.set_property({\"width\": \"50\"})\nserver.put_objects(my_template)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Slider Example\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_column_count(2)\nmy_template.set_column_widths([1.0, 1.0])\n* my_template.set_html(\"<h2>Example Slider Panels</h2>キャンペー\")\nserver.put_objects(my_template)\n[ X, Y, Width, Height, Clip]\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Box reporttest\"][0]\nmy_template = server.create_template(\n    name=\"Box Template\", parent=my_parent, report_type=\"Layout:box\"\n)\n\nfirst_box = [x for x in all_reports if x.name == \"box_images\"][0]\nmy_template.set_child_position(guid=first_box.guid, value=[40, 39, 320, 240])\nfirst_box.parent = my_template.guid\nsecond_box = [x for x in all_reports if x.name == \"box_movies\"][0]\nmy_template.set_child_position(guid=second_box.guid, value=[370, 39, 355, 241])\nmy_template.set_child_clip(guid=second_box.guid, clip=\"scroll\")\nsecond_box.parent = my_template.guid\nthird_box = [x for x in all_reports if x.name == \"box_plot\"][0]\n\nmy_template.set_child_position(guid=third_box.guid, value=[41, 288, 685, 210])\nmy_template.set_child_clip(guid=third_box.guid, clip=\"none\")\nthird_box.parent = my_template.guid\n\nserver.put_objects([first_box, second_box, third_box])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Tabs\"][0]\nmy_template = server.create_template(\n    name=\"Basic Slider\", parent=my_parent, report_type=\"Layout:slider\"\n)\nmy_template.set_filter(\"A|s_app|cont|Imagery Session;\")\nmy_template.set_map_to_slider(\n    [\"timestep|numeric_up\", \"variable|text_up\", \"mode|text_down\"]\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\n<div adr_userdefined_template=\"Hello\">\n<h1>Example</h1>\n</div>\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Columns\"][0]\nmy_template = server.create_template(\n    name=\"Merged Table\", parent=my_parent, report_type=\"Generator:tablemerge\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.set_table_name(\"Simple_test\")\nmy_template.set_sources([\"temperature|rename_nametag\", \"Distance|merge\"])\nmy_template.set_rename_tag(\"\\_index\\_\")\nmy_template.set_use_labels(0)\nmy_template.set_use_ids(\"Distance\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\ntemplate.delete_source(name=[\"temperature\", \"pressure\"])\ntemplate.delete_source(name=[\"temperature\"])\ntemplate.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"output row\",\n    existing=True,\n    select_names=\"\\*\",\n    operation=\"count\",\n)\ntemplate.add_operation(\n    name=[\"temperature\"],\n    unique=True,\n    output_name=\"MinTemp\",\n    existing=False,\n    select_names=\"simulationA\",\n    operation=\"min\",\n)\ntemplate.get_table_transpose()\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Merge reduce example\"][0]\nmy_template = server.create_template(\n    name=\"ASCII reduce\", parent=my_parent, report_type=\"Generator:tablereduce\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.delete_operation(name=[\"\\*\"])\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=True,\n    output_name=\"User\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"Totals\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Filter Generator\"][0]\nmy_template = server.create_template(\n    name=\"Filter\", parent=my_parent, report_type=\"Generator:tablerowcolumnfilter\"\n)\nmy_template.set_filter_rows([\"0\", \"fuselage\", \"\\*wing\\*\"])\nmy_template.set_filter_columns([\"1\", \"Tria3\", \"Tetra\\*\"])\nmy_template.set_table_name(\"RC_Filtered_Table\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Value Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Generator\", parent=my_parent, report_type=\"Generator:tablevaluefilter\"\n)\nmy_template.set_sort_selection(value=\"first\")\nmy_template.set_table_name(\"ValueFilteredTable\")\nmy_template.set_filter_by(value=[\"row\", \"Quad4\"])\nmy_template.set_filter_value(value=[\"range\", \"100\", \"\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Sort Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Sorted\", parent=my_parent, report_type=\"Generator:tablesortfilter\"\n)\nmy_template.set_sort_rows([\"+User\", \"+Version\", \"+Date\"])\nmy_template.set_generated_items(\"replace\")\nmy_template.set_sort_columns([\"+Labels\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#report_objectstemplaterest-object",
        "title": "Template Objects > report_objects.TemplateREST object",
        "section": "report_objects.TemplateREST object",
        "text": "This object is a Python representation of an Ansys\nDynamic Reporting template object. When\nthis object is created, a GUID will automatically be generated for the\nobject and the date is set to the current time/date. The\nreport_objects.TemplateREST class represent features common to all\ntemplate types. Two sub-classes, report_objects.LayoutREST and\nreport_objects.GeneratorREST represent the generic Layout and Generator\ntemplates. From each of these classes, a set of sub-classes representing\nthe specific template types are inherited. For information specific to\neach template type, refer to the subclass tree.\nTemplateREST objects should always be generated using the\nserver object create_template() method.\nThe following attributes are available on a TemplateREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated. You can also access the tabs via the method\nget_tags().\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the template\nreport_type - The type of the report template (e.g. ‘Layout:basic’).\nThe report_type is also set by the sub-class of the object. See\nthis table for the\ncorrespondence between report_type and template sub-class\nitem_filter - The filter string for this report template. You can\nalso access the filter via the method\nget_filter().\nparams - A Python dictionary of the parameters for this specific\nreport_type. You can also access the parameters via the method\nget_params().\nchildren - A list of the child templates of this template\nmaster - True if the parent data member is None\nparent - The parent template (if any) of this template\ntemplate.get_params()\nGet the parameters of the template.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.set_params({‘param1’: 1})\nSet the parameters of the template. This function takes as input a\ndictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.add_params({‘param1’: 1})\nAdd the parameters to the existing template parameters. This function\ntakes as input a dictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.get_property()\nGet the properties of the template as a dictionary. A general\ndescription of what properties are for a template can be found\nhere.\ntemplate.set_property(property={})\nSet the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.add_property(property={})\nAdd the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.get_sort_fields()\nGet the sorting filter of the template.\ntemplate.set_sort_fields([‘+i_date’, ‘-i_name’])\nSet the sorting filter of the template. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported at this link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.add_sort_fields([‘+i_date’, ‘-i_name’])\nAdd elements to the sorting filter of the template. This function takes\na list as input. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.get_sort_selection()\nGet the sort selection parameter.\ntemplate.set_sort_selection(value=”all”)\nSet the sort selection parameter for the template.This function takes a\nstring as input, among the following options:\n‘all’\n‘first’\n‘last’\ntemplate.set_tags(tagstring)\nSet the tags for the template to the passed string. Multiple tags are\nspace-separated.\ntemplate.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ntemplate.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ntemplate.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\ntemplate.get_filter()\nGet the item filter of the template. The item filter is encoded as a\nstring using the format explained link.\ntemplate.set_filter(filter_str=’’)\nSets the item filter of the template. Takes as input a string. The item\nfilter is encoded as a string using the format explained\nlink.\ntemplate.add_filter(filter_str=’’)\nAdd filters to the item filter of the template. Takes as input a string.\nThe item filter is encoded as a string using the format explained\nlink.\ntemplate.get_filter_mode()\nReturns the filter mode of the template. The possible outputs are:\n‘items’: corresponds to Incoming Items\n‘root_replace’: corresponds to Database (replace)\n‘root_append’: corresponds to Database (append)\ntemplate.set_filter_mode(value=’items’)\nSets the filter mode of the template. Takes as input a string. See\nget_filter_mode for the accepted values.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nEach template type is represented by a subclass of the TemplateREST\nclass. There are two main subclasses: LayoutREST for the Layout template\ntypes and GeneratorREST for the Generator template types. Each of these\nsubclasses has its own set of subclasses, to represent each specific\ntemplate type.\nLayouts\nTemplate type\nTemplate API sub-class\nbasic\nColumns\nreport_objects.basicREST()\npanel\nPanel\nreport_objects.panelREST()\nbox\nBoxes\nreport_objects.boxREST()\ntabs\nTabs\nreport_objects.tabsREST()\ncarousel\nCarousel\nreport_objects.carouselREST()\nslider\nSlider\nreport_objects.sliderREST()\nfooter\nPage Footer\nreport_objects.footerREST()\nheader\nPage Header\nreport_objects.headerREST()\niterator\nIterator\nreport_objects.iteratorREST()\ntagprops\nTag to Properties\nreport_objects.tagpropsREST()\ntoc\nTable of Contents\nreport_objects.tocREST()\nreportlink\nLink Report\nreport_objects.reportlinkREST()\nuserdefined\nUserdefined\nreport_objects.userdefinedREST()\nGenerators\nTemplate type\nTemplate API sub-class\ntablemerge\nTable Merge\nreport_objects.tablemergeREST()\ntablereduce\nTable Reduction\nreport_objects.tablereduceREST()\ntablerowcolumnfilter\nTable Row/Column Filter\nreport_objects.tablerowcolumnfilterREST()\ntablevaluefilter\nTable Value Filter\nreport_objects.tablevaluefilterREST()\ntablesortfilter\nTable Row/Column Sort\nreport_objects.tablesortfilterREST()\nsqlqueries\nSQL Query\nreport_objects.sqlqueriesREST()\ntreemerge\nTree Merge\nreport_objects.mergetreeREST()\nstatistical\nStatistical Analysis\nreport_objects.statisticalREST()\nInherits from TemplateREST\nClass that groups all the common attributes among Layout templates\n(for reference, see here). Its specific methods are:\ntemplate.get_column_count()\nGet the number of columns.\ntemplate.set_column_count(value)\nSet the number of columns. Takes as input an integer larger than 0.\ntemplate.get_column_widths()\nGet the list of the widths of the columns.\ntemplate.set_column_widths([1.0, 2.0, 1.0])\nSet the list of the widths of the columns. Takes as input an array where\neach number represent the relative width of that column compared to the\nother columns.\ntemplate.get_transpose()\nReturns the Transpose columns/rows status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_transpose(value=0)\nSets the Transpose columns/rows status of the template. value = 0 for\noff, value = 1 for on. It supports only Layout: template types.\ntemplate.get_skip()\nReturns the Skip if no input items status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_skip(value=0)\nSets the Skip if no input items status of the template. value = 0\n(default) for off, value = 1 for on. It supports only Layout: template\ntypes.\ntemplate.get_html()\nReturns the HTML of the template. It supports only Layout: template\ntypes\ntemplate.set_html(value=None)\nSets the HTML of the template. Takes as input a string. It supports only\nLayout: template types.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Slider Example” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nInherits from TemplateREST\nClass that groups all the common attributes among\nGenerator templates. Its specific methods are:\ntemplate.get_generated_items()\nGet the Generated items flag. Returned values:\n‘replace’: corresponds to Replace\n‘add’: corresponds to Append\ntemplate.set_generated_items(value)\nGet the Generated items flag. Takes as input a string. See\nget_generated_items() for the acceptable strings.\ntemplate.get_append_tags()\nGet the value for Append template tags to new items. Returned values are\nTrue for toggled ON, False for toggled OFF\ntemplate.set_append_tags(value=True)\nGet the value for Append template tags to new items. The input needs to\nbe a boolean: True / False\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Columns Layout template\ntype. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Panel Layout template type.\nIts specific methods are:\ntemplate.get_panel_style()\nGet the style of the Panel. Possible returned values:\n‘panel’: corresponds to Titled Panel\n‘callout-default’: corresponds to Callout\n‘callout-danger’: corresponds to Callout Error\n‘callout-warning’: corresponds to Callout Warning\n‘callout-success’: corresponds to Callout Success\n‘callout-info’: corresponds to Callout Info\ntemplate.set_panel_style(value=’panel’)\nSet the style of the Panel. Takes as input strings. For the acceptable\nvalues, see get_panel_style()\ntemplate.get_items_as_link()\nGet the Show items as link toggle. 0 corresponds to Off, 1 corresponds\nto ON.\ntemplate.set_items_as_link(value=0)\nSet the Show items as link toggle. Takes as input an integer. 0\ncorresponds to Off, 1 corresponds to ON.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Boxes Layout template type.\nIts specific methods are:\ntemplate.get_children_layout()\nGet the children layout. This method returns a dictionary where each\nentry is a different child layout.\nFor each entry, the key corresponds to the guid of the child template.\nThe corresponding value is an array that gives:\nwhere Clip has the following values:\n‘self’: corresponds to Clip: To self\n‘scroll’: corresponds to Clip: Scroll\n‘none’: corresponds to Clip: None\ntemplate.set_child_position(guid=None, value=[0,0,10,10])\nSet the children layout: position and size. The method takes as input\nthe guid of the child template you want to modify, and an array of 4\nintegers that corresponds to [X, Y, Width, Height] that you want to\nset.\nRemember that if you are setting a new child template (not modifying\nan existing one), you will manually need to set that this child\ntemplate has the current box template as the parent template. See the\nexample below for how to do it.\ntemplate.set_child_clip(guid=None, clip=’self’)\nSet the children layout: clip parameter. The method takes as input the\nguid of the child template you want to modify, and the clip type as a\nstring. Only the types enumerated in get_children_layout() are\nacceptable values.\nRemember that if you are setting the clip type for a new child\ntemplate (not modifying an existing one), you will manually need to\nset that this child template has the current box template as the\nparent template. See the example below for how to do it.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Box report test” that already exists in in the database\nrunning locally on port 8000. These would be the lines of code to create\nthe new template:\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Tabs Layout template type. No\nspecific methods for this class.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Carousel Layout template\ntype. Its specific methods are:\ntemplate.get_animated()\nGet the Animated value. If the toggle is OFF (default), the method will\nreturn 0. This means that the Carousel doesn’t automatically change\ndisplayed image, and the user needs to click to see the next item.\nA non-zero integer value means the Carousel will automatically change\ndisplayed image. The value represents how long each image is displayed\nfor in ms.\ntemplate.set_animated(value=0)\nSet the Animated value. For an explanation of what this parameter\nrepresents, see the get_animated() method above.\ntemplate.get_slide_dots()\nGet the Include side dots value. If zero (default), the method returns\n1.  If the number of side dots is larger than the number of items\ndisplayed on the Carousel, a number of dots corresponding to the number\nof items will be displayed. If the number of side dots is smaller than\nthe number of items displayed on the Carousel, it is ignored an no dots\nare displayed.\ntemplate.set_slide_dots(value=20)\nSet the Include side dots value. For an explanation of what this\nparameter represents, see the get_side_dots() method above.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Slider template\ntype. Its specific methods are:\ntemplate.get_map_to_slider()\nGet the Selected tags and sort to map to sliders. This function returns\na list where each element corresponds to one tag and its sorting order.\nThe accepted sorted orders are:\n‘text_up’: corresponds to Text sort up\n‘text_down’: corresponds to Text sort down\n‘numeric_up’: corresponds to Numeric sort up\n‘numeric_down’: corresponds to Numeric sort down\n‘none’: corresponds to No sorting\n‘natural_up’: corresponds to Natural sort up\n‘natural_down’: corresponds to Natural sort down\n‘none’: corresponds to No sorting\nAn example of output of this function is: [‘tag1|text_up’,\n‘tag2|numeric_down’, ‘tag3|none’] where the slider is sorted by “tag1”\nusing the “Text sort up” sorting method, then by “tag2” using the\n“Numeric sort down” method and finally by “tag3” using no sorting\nmethod.\ntemplate.set_map_to_slider(value=[])\nSet the Selected tags and sort to map to sliders. This function takes as\ninput a list where each element corresponds to one tag and its sorting\norder. See function get_map_to_slider() for the accepted sorting order\nvalues. The input for this function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\ntemplate.add_map_to_slider(value=[])\nAdd new tags and sorting methods to the the Selected tags and sort to\nmap to sliders. This function takes as input a list where each element\ncorresponds to one tag and its sorting order. See function\nget_map_to_slider() for the accepted sorting order values. The input for\nthis function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Basic Slider” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Tabs” in the database running locally on port 8000. These would be the\nlines of code to create the new template:\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Footer Layout\ntemplate type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Header Layout\ntemplate type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Iterator template\ntype. Its specific methods are:\ntemplate.get_iteration_tags()\nGet the values for Iteration tag and Secondary sorting tag. The values\nare returned as element 0 and 1 of a list.\ntemplate.set_iteration_tags(value = [‘’, ‘’])\nSet the values for Iteration tag and Secondary sorting tag. The input\nvalues are given as element 0 and 1 of a list, and they need to be\nstrings\ntemplate.get_sort_tag()\nGet the values for Sort items by tag and Reverse the sort as booleans.\nThe values are returned as element 0 and 1 of a list.\ntemplate.set_sort_tag(value=[True, False])\nSet the values for Iteration tag and Secondary sorting tag. The values\nare given as a list of booleans. Note that if you set the first element\nto False, the second will automatically be set to False as well,\nregardless of what the input is.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Tag to Properties\nLayout template type. No specific methods.\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Table of Contents\nLayout template type. Its specific methods are:\ntemplate.get_toc()\nGet the values for Table of Contents, Figure List and Table List. Only\none option can be ON at any given time. The function will return a\nstring that corresponds to the option that is toggled on:\n‘toc’: corresponds to Table of Contents option\n‘figure’: corresponds to the Figure List option\n‘table’: corresponds to the Table List option\nIf none of these option is ON (default when the template is created),\nthen the method will return None.\ntemplate.set_toc(option=’toc’)\nSet the values for Table of Contents, Figure List and Table List. Only\none can be ON at any given time. Only the following values for option\nare accepted:\n‘toc’: toggles on the Table of Contents option\n‘figure’: toggles on the Figure List option\n‘table’: toggles on the Table List option\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Link Report Layout\ntemplate type. Its specific methods are:\ntemplate.get_report_link()\nGet the guid of the linked report. If no linked report, it will return\nNone\ntemplate.set_report_link(link=None)\nSet the guid of the linked report. It takes as input a valid guid. If\nyou want to set to link to no report, set the input to None\nInherits from TemplateREST, LayoutREST\nClass that corresponds to the Userdefined Layout\ntemplate type. This template inserts a named div into the HTML output.\nThis div can be filled with any HTML the user would like.  By default,\nthe HTML content will be filled in with the TemplateREST.set_html()\ncontent (if any).  This content may be placed before or after any\nchild item/layout content.\nSpecific properties include:\ntemplate.interactive_only: int\nIf this property is set to a non-zero value (the default), then the\ndiv will not be included when ADR is outputting PDF, PowerPoint or\nOffline HTML.  If set to zero, it will be included in PDF and Offline\nHTML output.\ntemplate.before_children: int\nIf this property is set to zero (the default), then any child content\nis placed in the report before the div.  If set to a non-zero value, the\nchildren will be placed in the report after the div.\ntemplate.userdef_name: str\nThis property is used to specify the value of the div adr_userdefined_template\nattribute.  The default value is unspecified.\nFor example, if this property is set to \"Hello\" and the HTML is set\nto <h1>Example</h1> the generated div will look like this:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merging_param()\nGet the value of Merging. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_merging_param(value=’row’)\nSet the value of Merging. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_sources()\nGet the values of the Select source rows/columns. The output is a list\nwhere each element is a different source. Each element has the following\nform: ‘row_name|merge_operation’ where merge_operation can have one of\nthe following values:\n‘duplicate’: corresponds to Allow Duplicates\n‘merge’: corresponds to Combine Values\n‘rename_tag’: corresponds to Rename Using Only Tag\n‘rename_nametag’: corresponds to Rename With Name and Tag\ntemplate.set_sources(value=[])\nSet the values of the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.add_sources(value=[])\nAdd some values to the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_use_labels()\nGet the value of the toggle for Use row/column labels as row/column IDs.\nOutput is 0 for toggled OFF, 1 for toggled ON.\ntemplate.set_use_labels(value=1)\nSet the value of the toggle for Use row/column labels as row/column IDs.\nInput should be an integer: 0 for toggled OFF, 1 for toggled ON.\ntemplate.get_use_ids()\nGet the value for the Row/Column to use as column/row IDs field.\ntemplate.set_use_ids(value=’’)\nSet the value for the Row/Column to use as column/row IDs field. Input\nshould be a string. This method will not work if get_use_labels()\nreturns 1.\ntemplate.get_id_selection()\nGet the value for the Row/Column ID selection. The possible outputs are:\n‘all’: corresponds to All IDs\n‘intersect’: corresponds to Only Common IDs\n‘select’: corresponds to Select Specific IDs\ntemplate.set_id_selection(value=’all’)\nSet the value for the Row/Column ID selection. Input should be a string\namong the ones listed in the get_id_selection() method.\ntemplate.get_ids()\nGet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, it will return an empty\nlist. Otherwise, it will return a list where each element is an ID.\ntemplate.set_ids(value=[])\nSet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.add_ids(value=[])\nAdd IDs to the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.get_unknown_value()\nGet the value for Unknown value. It returns a string. Default is ‘nan’.\ntemplate.set_unknown_value(value=’nan’)\nSet the value for the Unknown value. Input needs to be a string.\ntemplate.get_table_transpose()\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Merged Table” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Columns” in the database running locally on port 8000. These would be\nthe lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Reduction\nGenerator template type. Its specific methods\nare:\ntemplate.get_reduce_param()\nGet the value of Reduce. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_reduce_param(value=’row’)\nSet the value of Reduce. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_operations()\nGet the values for the Reduce operations as a list. Each element\ncorresponds to a different operation. Each element is a dictionary,\nwhere the following keys are presented:\n‘source_rows’: corresponds to the name(s) of the rows/columns used in\nthe operation\n‘output_rows’: corresponds to the Output row/column name\n‘output_rows_from_values’: False (OFF) / True (ON) for the Use unique\nvalues from a column/row as column/row names\n‘output_column_select’: corresponds to the “Select columns/rows”\nfield\n‘output_columns’: corresponds to the Column/Row name field\n‘output_columns_from_values’: False (OFF) / True (ON) for the Use\nunique values from a column/row as a new columns/rows toggle\n‘operation’: corresponds to the Operation field. Possible values:\n‘min’: Minimum\n‘max’: Maximum\n‘count’: Count\n‘sum’: Sum\n‘diff’: Difference\n‘mean’: Mean\n‘stdev’: Standard deviation\n‘skew’: Skew\n‘kurtosis’: Kurtosis\ntemplate.delete_operation(name = [])\nMethod to remove an entire Reduce operation. Takes as input a list with\nthe name(s) of the source rows/columns used in the operation. So for\nexample to delete the third Reduce operation from the following panel:\nuse:\nTo delete the first operation, use:\nAdd a new Reduce operation.\n‘name’: corresponds to the name(s) of the rows/columns used in the\noperation. Input needs to be a list of strings\n‘unique’: corresponds to the Use unique values from a column as row\nnames toggle. False is OFF, True is ON\noutput_name: corresponds to the Output row/column name.\nexisting: corresponds to the Use existing columns/rows toggle. False\nif OFF, True is ON.\nselect_names. If existing is set to True, it is used for the Selected\ncolumns/rows field. If existing is set to False, this field is used\nfor the Column/Row name.\noperation: corresponds to the operation field. See get_operation()\nfor the acceptable values.\nFor example to create the operation in the following widget:\nyou would run:\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “ASCII reduce” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Merge reduce example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Filter\nGenerator template type. Its specific\nmethods are:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_rows()\nGet the value of Rows… The values are returned as a list of strings,\nwhere each element corresponds to a row value.\ntemplate.set_filter_rows(value=[’*’])\nSet the value of Rows… The input value needs to be a list of strings,\nwhere each element corresponds to a different row value.\ntemplate.add_filter_rows(value=[’*’])\nAdd new values to the value of Rows… The input value needs to be a\nlist of strings, where each element corresponds to a different row\nvalue.\ntemplate.get_filter_columns()\nGet the value of Columns… The values are returned as a list of\nstrings, where each element corresponds to a column value.\ntemplate.set_filter_columns(value=[’*’])\nSet the value of Columns… The input value needs to be a list of\nstrings, where each element corresponds to a different column value.\ntemplate.add_filter_columns(value=[’*’])\nAdd new values to the value of Columns… The input value needs to be a\nlist of strings, where each element corresponds to a different column\nvalue.\ntemplate.get_invert()\nGet the value of Select the rows/columns to remove. Returns 0 or False\nif it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert(value=False)\nSet the value of Select the rows/columns to remove. Set it to 0 or False\nto toggle OFF, set to 1 or True to toggle ON\ntemplate.get_sort()\nGet the value of Sort rows/columns by selection order. Returns 0 or\nFalse if it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_sort(value=False)\nSet the value of Sort rows/columns by selection order. Set it to 0 or\nFalse to toggle OFF, set to 1 or True to toggle ON. This method works\nonly if the Select the rows/columns to remove is toggled OFF.\ntemplate.get_table_transpose()\nGet the value of Transpose the output table. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_table_transpose(value=False)\nSet the value of Transpose the output table. Set it to 0 or False to\ntoggle OFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Filter” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Filter Generator” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Value Filter\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_by()\nGet the value of Filter by values in as a list. The first element is\n‘column’ (default) or ‘row’. The second element of the list of the\nnumber of row/column set in the following field.\ntemplate.set_filter_by(value = [‘column’, ‘0’])\nSet the value of Filter by values in as a list. The first element needs\nto be ‘column’ or ‘row’. The second element of the list of the number of\nrow/column set in the following field, and needs to be a string.\ntemplate.get_filter_value()\nGet the value of Filter. Each different type of filter will return a\ndifferent type of output:\n‘Range of values’: it returns a list of three elements. The first\nelement is ‘range’. The second and third are strings that represent\nthe min. and max. of the range.\n‘Specific values’: it returns a list of two elements. The first\nelement is “specific”. The second element is a list of strings. Each\nelement in this second list is one entry in the Select specific\nvalues… field\n‘Upper % of values’: it returns a list of two elements. The first\nelement is “top_percent”. The second element is a float that\ncorresponds to the Upper percent of values field.\n‘Upper # of values’: it returns a list of two elements. The first\nelement is “top_count”. The second element is an integer that\ncorresponds to the Upper number of values field.\n‘Lower % of values’: it returns a list of two elements. The first\nelement is “bot_percent”. The second element is a float that\ncorresponds to the Lower percent of values field.\n‘Lower # of values’: it returns a list of two elements. The first\nelement is “bot_count”. The second element is an integer that\ncorresponds to the Lower number of values field.\ntemplate.set_filter_value(value=[‘range’, ‘’, ‘’])\nSet the value of Filter. Each different type needs a different type of\ninput. See the description of get_filter_value() possible outputs to know the\ndetails of the accepted formats.\ntemplate.get_invert_filter()\nGet the value of Invert filter sense. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert_filter(value=False)\nSet the value of Invert filter sense. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\ntemplate.get_values_as_dates()\nGet the value of Treat values as dates. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_values_as_dates(value=False)\nSet the value of Treat values as dates. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Value Filter Example” that already exists in in the database\nrunning locally on port 800. These would be the lines of code to create\nthe new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Sort\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_sort_rows()\nGet the Select columns to sort rows by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the row name to sort by.\ntemplate.set_sort_rows([])\nSet the Select columns to sort rows by. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the row to sort by. Example: setting the sort\nfields to be by increasing row “temperature” and decreasing by row\n“pressure” becomes: [‘+temperature’, ‘-pressure’]\ntemplate.add_sort_rows([])\nAdd the Select columns to sort rows by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.get_sort_columns()\nGet the Select rows to sort columns by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the column name to sort by.\ntemplate.set_sort_columns([])\nSet the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.add_sort_columns([])\nAdd the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Sorted” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Sort Filter Example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the SQL Query Generator\ntemplate type. Its specific methods are:\ntemplate.get_db_type()\nGet the Database type. Possible outputs are: SQLite / PostgreSQL\ntemplate.set_db_type(value=’SQLite’)\nSet the Database type. Input needs to be a string. Only two acceptable\nvalues: ‘SQLite’ or ‘PostgreSQL’\ntemplate.get_sqlite_name()\nGet the SQLite filename.\ntemplate.set_sqlite_name(value=’’)\nSet the SQLite filename. Input needs to be a string. The method will not\nwork if the Database type is set to PostgreSQL\ntemplate.get_postgre()\nGet the PostgreSQL parameters. This method returns a dictionary with\nfive entries, corresponding to:\nDatabase name:\nHostname:\nPort:\nUsername:\nPassword:\ntemplate.set_postgre(value = {‘database’: ‘’,\n‘hostname’:’localhost’, ‘port’: ‘5432’, ‘username’:’nexus’,\n‘password’:’cei’})\nSet the the PostgreSQL parameters. Input needs to be a dictionary with\nthe keys: ‘database’, ‘hostname’, ‘port’, ‘username’, ‘password’. Note\nthat all keys are strings. See get_postgre() method for the description\nof each element. The method will not work if the Database type is set to\nSQLite\ntemplate.get_query()\nGet theSQL query text: field.\ntemplate.set_query(value=’’)\nSet theSQL query text: field. Input needs to be a string. Note that no\ncheck on the validity of the SQL query itself is performed. It is up to\nthe user to make sure the query is properly formatted.\ntemplate.validate()\nValidate the database. This method should be run after all the\nparameters for the database connection have been set. The method\nreturns:\nBoolean parameter: True is the database can be validated, False\notherwise.\nError message: If the connection is validated, this will be an empty\nstring. Otherwise, and error message with more details about the\nfailure will be returned.\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Tree Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merge_rule()\nGet the row merging rule.\ntemplate.set_merge_rule(value=’all’)\nSet the row merging rule. Legal values: ‘all’, ‘common’, ‘first’\ntemplate.get_match_rule()\nGet the rule for matching rows.\ntemplate.set_match_rule(value=’both’)\nSet the rule for matching rows. Legal values: ‘key’, ‘name’, ‘both’\ntemplate.get_tree_name()\nGet the name that the generated tree will be given.\ntemplate.set_tree_name(value=’treemerge’)\nSet the name that the generated tree will be given. Input needs to be a\nstring.\ntemplate.get_fill_value()\nGet the value to be used to fill unknown cells.\ntemplate.set_fill_value(value=’’)\nSet the value to be used to fill unknown cells. Input needs to be a\nstring.\ntemplate.get_header_tag()\nGet the name of the tag (if any) to be used to generate an output tree\nheader.\ntemplate.set_header_tag(value=’’)\nSet the name of the tag to be used to generate an output tree header.\nInput needs to be a string. An empty string (the default) specifies that\nno tree header be generated.\nInherits from TemplateREST, GeneratorREST\nClass that corresponds to the Statistical Analysis Generator\ntemplate type. Its specific methods are:\ntemplate.get_analysis_type()\nGet the type of statistical analysis\nTemplate.set_analysis_type(value=””)\nSet the type of statistical analysis.\nOnly “Linear Regression” is supported.\nTemplate.get_table_name()\nGet the name of the output table.\nTemplate.set_table_name(value=””)\nSet the name of the output table. Input must be a string.\nTemplate.get_tree_name()\nGet the name of the output tree with statistical parameters values.\nTemplate.set_tree_name(value=””)\nSet the name of the output tree with statistical parameters values.\nInput must be a string.\nTemplate.set_predictor_variables(value)\nSet the predictor variables. The input needs to be a list,\nwith each element a list of length 3.\nThe elements of the sub-lists must be:\nType. Only “row” is currently supported.\nVariable predictor name.\nOutput row name.\nTemplate.get_predictor_variables()\nGet the list of predictor variables.\nReturns a list where each element is a sub-list of\n3 elements (type, predictor name, output name)\nTemplate.set_response_variables(value=””)\nSet the response variables. Input must be a list of sub-lists,\neach with two elements:\nResponse variable name\nOutput row name\nTemplate.get_response_variables()\nGet the response variable list. Each element is a sub-list\nwith two elements each.\nTemplate.set_analysis_params(value=””)\nSet the parameters for the statistical analysis.\nCurrently not supported.\nTemplate.get_analysis_params()\nGet the parameters for the statistical algorithm.\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Example Template\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_filter(\"A|i_src|cont|build_imagery;A|i_tags|cont|timestep=10;\")\nmy_template.set_property({\"width\": \"50\"})\nserver.put_objects(my_template)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Slider Example\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_column_count(2)\nmy_template.set_column_widths([1.0, 1.0])\n* my_template.set_html(\"<h2>Example Slider Panels</h2>キャンペー\")\nserver.put_objects(my_template)\n[ X, Y, Width, Height, Clip]\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Box reporttest\"][0]\nmy_template = server.create_template(\n    name=\"Box Template\", parent=my_parent, report_type=\"Layout:box\"\n)\n\nfirst_box = [x for x in all_reports if x.name == \"box_images\"][0]\nmy_template.set_child_position(guid=first_box.guid, value=[40, 39, 320, 240])\nfirst_box.parent = my_template.guid\nsecond_box = [x for x in all_reports if x.name == \"box_movies\"][0]\nmy_template.set_child_position(guid=second_box.guid, value=[370, 39, 355, 241])\nmy_template.set_child_clip(guid=second_box.guid, clip=\"scroll\")\nsecond_box.parent = my_template.guid\nthird_box = [x for x in all_reports if x.name == \"box_plot\"][0]\n\nmy_template.set_child_position(guid=third_box.guid, value=[41, 288, 685, 210])\nmy_template.set_child_clip(guid=third_box.guid, clip=\"none\")\nthird_box.parent = my_template.guid\n\nserver.put_objects([first_box, second_box, third_box])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Tabs\"][0]\nmy_template = server.create_template(\n    name=\"Basic Slider\", parent=my_parent, report_type=\"Layout:slider\"\n)\nmy_template.set_filter(\"A|s_app|cont|Imagery Session;\")\nmy_template.set_map_to_slider(\n    [\"timestep|numeric_up\", \"variable|text_up\", \"mode|text_down\"]\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\n<div adr_userdefined_template=\"Hello\">\n<h1>Example</h1>\n</div>\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Columns\"][0]\nmy_template = server.create_template(\n    name=\"Merged Table\", parent=my_parent, report_type=\"Generator:tablemerge\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.set_table_name(\"Simple_test\")\nmy_template.set_sources([\"temperature|rename_nametag\", \"Distance|merge\"])\nmy_template.set_rename_tag(\"\\_index\\_\")\nmy_template.set_use_labels(0)\nmy_template.set_use_ids(\"Distance\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\ntemplate.delete_source(name=[\"temperature\", \"pressure\"])\ntemplate.delete_source(name=[\"temperature\"])\ntemplate.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"output row\",\n    existing=True,\n    select_names=\"\\*\",\n    operation=\"count\",\n)\ntemplate.add_operation(\n    name=[\"temperature\"],\n    unique=True,\n    output_name=\"MinTemp\",\n    existing=False,\n    select_names=\"simulationA\",\n    operation=\"min\",\n)\ntemplate.get_table_transpose()\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Merge reduce example\"][0]\nmy_template = server.create_template(\n    name=\"ASCII reduce\", parent=my_parent, report_type=\"Generator:tablereduce\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.delete_operation(name=[\"\\*\"])\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=True,\n    output_name=\"User\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"Totals\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Filter Generator\"][0]\nmy_template = server.create_template(\n    name=\"Filter\", parent=my_parent, report_type=\"Generator:tablerowcolumnfilter\"\n)\nmy_template.set_filter_rows([\"0\", \"fuselage\", \"\\*wing\\*\"])\nmy_template.set_filter_columns([\"1\", \"Tria3\", \"Tetra\\*\"])\nmy_template.set_table_name(\"RC_Filtered_Table\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Value Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Generator\", parent=my_parent, report_type=\"Generator:tablevaluefilter\"\n)\nmy_template.set_sort_selection(value=\"first\")\nmy_template.set_table_name(\"ValueFilteredTable\")\nmy_template.set_filter_by(value=[\"row\", \"Quad4\"])\nmy_template.set_filter_value(value=[\"range\", \"100\", \"\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Sort Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Sorted\", parent=my_parent, report_type=\"Generator:tablesortfilter\"\n)\nmy_template.set_sort_rows([\"+User\", \"+Version\", \"+Date\"])\nmy_template.set_generated_items(\"replace\")\nmy_template.set_sort_columns([\"+Labels\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#data-members",
        "title": "Template Objects > Data members",
        "section": "Data members",
        "text": "The following attributes are available on a TemplateREST object:\nguid - string GUID. The default is str(uuid.uuid1())\ntags - The user-defined tags string for this object. Multiple tags\nare space-separated. You can also access the tabs via the method\nget_tags().\ndate - The time & date of the creation of this object. The default\nis: datetime.datetime.now(pytz.utc)\nname - The name of the template\nreport_type - The type of the report template (e.g. ‘Layout:basic’).\nThe report_type is also set by the sub-class of the object. See\nthis table for the\ncorrespondence between report_type and template sub-class\nitem_filter - The filter string for this report template. You can\nalso access the filter via the method\nget_filter().\nparams - A Python dictionary of the parameters for this specific\nreport_type. You can also access the parameters via the method\nget_params().\nchildren - A list of the child templates of this template\nmaster - True if the parent data member is None\nparent - The parent template (if any) of this template"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#methods",
        "title": "Template Objects > Methods",
        "section": "Methods",
        "text": "template.get_params()\nGet the parameters of the template.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.set_params({‘param1’: 1})\nSet the parameters of the template. This function takes as input a\ndictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.add_params({‘param1’: 1})\nAdd the parameters to the existing template parameters. This function\ntakes as input a dictionary.\nThe parameter field contains all the fields that can be set via the GUI,\nincluding filters, list of properties, individual settings for the\nspecific template type. While one can access all the values via this\nmethod, we would suggest using the methods specific to the field you are\ninterested in for each field for sake of clarity and usability.\ntemplate.get_property()\nGet the properties of the template as a dictionary. A general\ndescription of what properties are for a template can be found\nhere.\ntemplate.set_property(property={})\nSet the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.add_property(property={})\nAdd the properties of the template. Input needs to be a dictionary. A\ngeneral description of what properties are for a template can be found\nhere.\ntemplate.get_sort_fields()\nGet the sorting filter of the template.\ntemplate.set_sort_fields([‘+i_date’, ‘-i_name’])\nSet the sorting filter of the template. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported at this link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.add_sort_fields([‘+i_date’, ‘-i_name’])\nAdd elements to the sorting filter of the template. This function takes\na list as input. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the property to sort by, with the same strings\nas reported link. Example: setting the sort\nfields to be by increasing item date and decreasing by item name\nbecomes: [‘+i_date’, ‘-i_name’]\ntemplate.get_sort_selection()\nGet the sort selection parameter.\ntemplate.set_sort_selection(value=”all”)\nSet the sort selection parameter for the template.This function takes a\nstring as input, among the following options:\n‘all’\n‘first’\n‘last’\ntemplate.set_tags(tagstring)\nSet the tags for the template to the passed string. Multiple tags are\nspace-separated.\ntemplate.get_tags()\nReturns the tags string for this object. Multiple tags are\nspace-separated.\ntemplate.add_tag(tag, value=None)\nAdds a tag to the current tag string. If no value is passed, the simple\ntag string is added to the tags string. If a value is specified, a\nstring of the form tag=value will be added to the tag string.\ntemplate.rem_tag(tag)\nRemove the tag (and any potential associated value) from the current tag\nstring.\ntemplate.get_filter()\nGet the item filter of the template. The item filter is encoded as a\nstring using the format explained link.\ntemplate.set_filter(filter_str=’’)\nSets the item filter of the template. Takes as input a string. The item\nfilter is encoded as a string using the format explained\nlink.\ntemplate.add_filter(filter_str=’’)\nAdd filters to the item filter of the template. Takes as input a string.\nThe item filter is encoded as a string using the format explained\nlink.\ntemplate.get_filter_mode()\nReturns the filter mode of the template. The possible outputs are:\n‘items’: corresponds to Incoming Items\n‘root_replace’: corresponds to Database (replace)\n‘root_append’: corresponds to Database (append)\ntemplate.set_filter_mode(value=’items’)\nSets the filter mode of the template. Takes as input a string. See\nget_filter_mode for the accepted values.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Example Template\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_filter(\"A|i_src|cont|build_imagery;A|i_tags|cont|timestep=10;\")\nmy_template.set_property({\"width\": \"50\"})\nserver.put_objects(my_template)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#subclasses",
        "title": "Template Objects > SubClasses",
        "section": "SubClasses",
        "text": "Each template type is represented by a subclass of the TemplateREST\nclass. There are two main subclasses: LayoutREST for the Layout template\ntypes and GeneratorREST for the Generator template types. Each of these\nsubclasses has its own set of subclasses, to represent each specific\ntemplate type.\nLayouts\nTemplate type\nTemplate API sub-class\nbasic\nColumns\nreport_objects.basicREST()\npanel\nPanel\nreport_objects.panelREST()\nbox\nBoxes\nreport_objects.boxREST()\ntabs\nTabs\nreport_objects.tabsREST()\ncarousel\nCarousel\nreport_objects.carouselREST()\nslider\nSlider\nreport_objects.sliderREST()\nfooter\nPage Footer\nreport_objects.footerREST()\nheader\nPage Header\nreport_objects.headerREST()\niterator\nIterator\nreport_objects.iteratorREST()\ntagprops\nTag to Properties\nreport_objects.tagpropsREST()\ntoc\nTable of Contents\nreport_objects.tocREST()\nreportlink\nLink Report\nreport_objects.reportlinkREST()\nuserdefined\nUserdefined\nreport_objects.userdefinedREST()\nGenerators\nTemplate type\nTemplate API sub-class\ntablemerge\nTable Merge\nreport_objects.tablemergeREST()\ntablereduce\nTable Reduction\nreport_objects.tablereduceREST()\ntablerowcolumnfilter\nTable Row/Column Filter\nreport_objects.tablerowcolumnfilterREST()\ntablevaluefilter\nTable Value Filter\nreport_objects.tablevaluefilterREST()\ntablesortfilter\nTable Row/Column Sort\nreport_objects.tablesortfilterREST()\nsqlqueries\nSQL Query\nreport_objects.sqlqueriesREST()\ntreemerge\nTree Merge\nreport_objects.mergetreeREST()\nstatistical\nStatistical Analysis\nreport_objects.statisticalREST()"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#layoutrest-class",
        "title": "Template Objects > LayoutREST class",
        "section": "LayoutREST class",
        "text": "Inherits from TemplateREST\nClass that groups all the common attributes among Layout templates\n(for reference, see here). Its specific methods are:\ntemplate.get_column_count()\nGet the number of columns.\ntemplate.set_column_count(value)\nSet the number of columns. Takes as input an integer larger than 0.\ntemplate.get_column_widths()\nGet the list of the widths of the columns.\ntemplate.set_column_widths([1.0, 2.0, 1.0])\nSet the list of the widths of the columns. Takes as input an array where\neach number represent the relative width of that column compared to the\nother columns.\ntemplate.get_transpose()\nReturns the Transpose columns/rows status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_transpose(value=0)\nSets the Transpose columns/rows status of the template. value = 0 for\noff, value = 1 for on. It supports only Layout: template types.\ntemplate.get_skip()\nReturns the Skip if no input items status of the template. It returns 0\nfor off, 1 for on. It supports only Layout: template types.\ntemplate.set_skip(value=0)\nSets the Skip if no input items status of the template. value = 0\n(default) for off, value = 1 for on. It supports only Layout: template\ntypes.\ntemplate.get_html()\nReturns the HTML of the template. It supports only Layout: template\ntypes\ntemplate.set_html(value=None)\nSets the HTML of the template. Takes as input a string. It supports only\nLayout: template types.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Slider Example” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a root-level template\n(i.e.: that doesn’t have a parent template) in the database running\nlocally on port 8000. These would be the lines of code to create the new\ntemplate:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_template = server.create_template(\n    name=\"Slider Example\", parent=None, report_type=\"Layout:panel\"\n)\nmy_template.set_column_count(2)\nmy_template.set_column_widths([1.0, 1.0])\n* my_template.set_html(\"<h2>Example Slider Panels</h2>キャンペー\")\nserver.put_objects(my_template)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#generatorrest-class",
        "title": "Template Objects > GeneratorREST class",
        "section": "GeneratorREST class",
        "text": "Inherits from TemplateREST\nClass that groups all the common attributes among\nGenerator templates. Its specific methods are:\ntemplate.get_generated_items()\nGet the Generated items flag. Returned values:\n‘replace’: corresponds to Replace\n‘add’: corresponds to Append\ntemplate.set_generated_items(value)\nGet the Generated items flag. Takes as input a string. See\nget_generated_items() for the acceptable strings.\ntemplate.get_append_tags()\nGet the value for Append template tags to new items. Returned values are\nTrue for toggled ON, False for toggled OFF\ntemplate.set_append_tags(value=True)\nGet the value for Append template tags to new items. The input needs to\nbe a boolean: True / False"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#basicrest-object",
        "title": "Template Objects > basicREST object",
        "section": "basicREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Columns Layout template\ntype. No specific methods."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#panelrest-object",
        "title": "Template Objects > panelREST object",
        "section": "panelREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Panel Layout template type.\nIts specific methods are:\ntemplate.get_panel_style()\nGet the style of the Panel. Possible returned values:\n‘panel’: corresponds to Titled Panel\n‘callout-default’: corresponds to Callout\n‘callout-danger’: corresponds to Callout Error\n‘callout-warning’: corresponds to Callout Warning\n‘callout-success’: corresponds to Callout Success\n‘callout-info’: corresponds to Callout Info\ntemplate.set_panel_style(value=’panel’)\nSet the style of the Panel. Takes as input strings. For the acceptable\nvalues, see get_panel_style()\ntemplate.get_items_as_link()\nGet the Show items as link toggle. 0 corresponds to Off, 1 corresponds\nto ON.\ntemplate.set_items_as_link(value=0)\nSet the Show items as link toggle. Takes as input an integer. 0\ncorresponds to Off, 1 corresponds to ON."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#boxrest-object",
        "title": "Template Objects > boxREST object",
        "section": "boxREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Boxes Layout template type.\nIts specific methods are:\ntemplate.get_children_layout()\nGet the children layout. This method returns a dictionary where each\nentry is a different child layout.\nFor each entry, the key corresponds to the guid of the child template.\nThe corresponding value is an array that gives:\nwhere Clip has the following values:\n‘self’: corresponds to Clip: To self\n‘scroll’: corresponds to Clip: Scroll\n‘none’: corresponds to Clip: None\ntemplate.set_child_position(guid=None, value=[0,0,10,10])\nSet the children layout: position and size. The method takes as input\nthe guid of the child template you want to modify, and an array of 4\nintegers that corresponds to [X, Y, Width, Height] that you want to\nset.\nRemember that if you are setting a new child template (not modifying\nan existing one), you will manually need to set that this child\ntemplate has the current box template as the parent template. See the\nexample below for how to do it.\ntemplate.set_child_clip(guid=None, clip=’self’)\nSet the children layout: clip parameter. The method takes as input the\nguid of the child template you want to modify, and the clip type as a\nstring. Only the types enumerated in get_children_layout() are\nacceptable values.\nRemember that if you are setting the clip type for a new child\ntemplate (not modifying an existing one), you will manually need to\nset that this child template has the current box template as the\nparent template. See the example below for how to do it.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Box report test” that already exists in in the database\nrunning locally on port 8000. These would be the lines of code to create\nthe new template:\n[ X, Y, Width, Height, Clip]\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Box reporttest\"][0]\nmy_template = server.create_template(\n    name=\"Box Template\", parent=my_parent, report_type=\"Layout:box\"\n)\n\nfirst_box = [x for x in all_reports if x.name == \"box_images\"][0]\nmy_template.set_child_position(guid=first_box.guid, value=[40, 39, 320, 240])\nfirst_box.parent = my_template.guid\nsecond_box = [x for x in all_reports if x.name == \"box_movies\"][0]\nmy_template.set_child_position(guid=second_box.guid, value=[370, 39, 355, 241])\nmy_template.set_child_clip(guid=second_box.guid, clip=\"scroll\")\nsecond_box.parent = my_template.guid\nthird_box = [x for x in all_reports if x.name == \"box_plot\"][0]\n\nmy_template.set_child_position(guid=third_box.guid, value=[41, 288, 685, 210])\nmy_template.set_child_clip(guid=third_box.guid, clip=\"none\")\nthird_box.parent = my_template.guid\n\nserver.put_objects([first_box, second_box, third_box])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tabsrest-object",
        "title": "Template Objects > tabsREST object",
        "section": "tabsREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Tabs Layout template type. No\nspecific methods for this class."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#carouselrest-object",
        "title": "Template Objects > carouselREST object",
        "section": "carouselREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Carousel Layout template\ntype. Its specific methods are:\ntemplate.get_animated()\nGet the Animated value. If the toggle is OFF (default), the method will\nreturn 0. This means that the Carousel doesn’t automatically change\ndisplayed image, and the user needs to click to see the next item.\nA non-zero integer value means the Carousel will automatically change\ndisplayed image. The value represents how long each image is displayed\nfor in ms.\ntemplate.set_animated(value=0)\nSet the Animated value. For an explanation of what this parameter\nrepresents, see the get_animated() method above.\ntemplate.get_slide_dots()\nGet the Include side dots value. If zero (default), the method returns\n1.  If the number of side dots is larger than the number of items\ndisplayed on the Carousel, a number of dots corresponding to the number\nof items will be displayed. If the number of side dots is smaller than\nthe number of items displayed on the Carousel, it is ignored an no dots\nare displayed.\ntemplate.set_slide_dots(value=20)\nSet the Include side dots value. For an explanation of what this\nparameter represents, see the get_side_dots() method above."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#sliderrest-object",
        "title": "Template Objects > sliderREST object",
        "section": "sliderREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Slider template\ntype. Its specific methods are:\ntemplate.get_map_to_slider()\nGet the Selected tags and sort to map to sliders. This function returns\na list where each element corresponds to one tag and its sorting order.\nThe accepted sorted orders are:\n‘text_up’: corresponds to Text sort up\n‘text_down’: corresponds to Text sort down\n‘numeric_up’: corresponds to Numeric sort up\n‘numeric_down’: corresponds to Numeric sort down\n‘none’: corresponds to No sorting\n‘natural_up’: corresponds to Natural sort up\n‘natural_down’: corresponds to Natural sort down\n‘none’: corresponds to No sorting\nAn example of output of this function is: [‘tag1|text_up’,\n‘tag2|numeric_down’, ‘tag3|none’] where the slider is sorted by “tag1”\nusing the “Text sort up” sorting method, then by “tag2” using the\n“Numeric sort down” method and finally by “tag3” using no sorting\nmethod.\ntemplate.set_map_to_slider(value=[])\nSet the Selected tags and sort to map to sliders. This function takes as\ninput a list where each element corresponds to one tag and its sorting\norder. See function get_map_to_slider() for the accepted sorting order\nvalues. The input for this function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\ntemplate.add_map_to_slider(value=[])\nAdd new tags and sorting methods to the the Selected tags and sort to\nmap to sliders. This function takes as input a list where each element\ncorresponds to one tag and its sorting order. See function\nget_map_to_slider() for the accepted sorting order values. The input for\nthis function will have form:\n[‘tag1|text_up’, ‘tag2|numeric_down’, ‘tag3|none’]\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Basic Slider” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Tabs” in the database running locally on port 8000. These would be the\nlines of code to create the new template:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Tabs\"][0]\nmy_template = server.create_template(\n    name=\"Basic Slider\", parent=my_parent, report_type=\"Layout:slider\"\n)\nmy_template.set_filter(\"A|s_app|cont|Imagery Session;\")\nmy_template.set_map_to_slider(\n    [\"timestep|numeric_up\", \"variable|text_up\", \"mode|text_down\"]\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#footerrest-object",
        "title": "Template Objects > footerREST object",
        "section": "footerREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Footer Layout\ntemplate type. No specific methods."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#headerrest-object",
        "title": "Template Objects > headerREST object",
        "section": "headerREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Page Header Layout\ntemplate type. No specific methods."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#iteratorrest-object",
        "title": "Template Objects > iteratorREST object",
        "section": "iteratorREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Iterator template\ntype. Its specific methods are:\ntemplate.get_iteration_tags()\nGet the values for Iteration tag and Secondary sorting tag. The values\nare returned as element 0 and 1 of a list.\ntemplate.set_iteration_tags(value = [‘’, ‘’])\nSet the values for Iteration tag and Secondary sorting tag. The input\nvalues are given as element 0 and 1 of a list, and they need to be\nstrings\ntemplate.get_sort_tag()\nGet the values for Sort items by tag and Reverse the sort as booleans.\nThe values are returned as element 0 and 1 of a list.\ntemplate.set_sort_tag(value=[True, False])\nSet the values for Iteration tag and Secondary sorting tag. The values\nare given as a list of booleans. Note that if you set the first element\nto False, the second will automatically be set to False as well,\nregardless of what the input is."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tagpropsrest-object",
        "title": "Template Objects > tagpropsREST object",
        "section": "tagpropsREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Tag to Properties\nLayout template type. No specific methods."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tocrest-object",
        "title": "Template Objects > tocREST object",
        "section": "tocREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Table of Contents\nLayout template type. Its specific methods are:\ntemplate.get_toc()\nGet the values for Table of Contents, Figure List and Table List. Only\none option can be ON at any given time. The function will return a\nstring that corresponds to the option that is toggled on:\n‘toc’: corresponds to Table of Contents option\n‘figure’: corresponds to the Figure List option\n‘table’: corresponds to the Table List option\nIf none of these option is ON (default when the template is created),\nthen the method will return None.\ntemplate.set_toc(option=’toc’)\nSet the values for Table of Contents, Figure List and Table List. Only\none can be ON at any given time. Only the following values for option\nare accepted:\n‘toc’: toggles on the Table of Contents option\n‘figure’: toggles on the Figure List option\n‘table’: toggles on the Table List option"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#reportlinkrest-object",
        "title": "Template Objects > reportlinkREST object",
        "section": "reportlinkREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Link Report Layout\ntemplate type. Its specific methods are:\ntemplate.get_report_link()\nGet the guid of the linked report. If no linked report, it will return\nNone\ntemplate.set_report_link(link=None)\nSet the guid of the linked report. It takes as input a valid guid. If\nyou want to set to link to no report, set the input to None"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#userdefinedrest-object",
        "title": "Template Objects > userdefinedREST object",
        "section": "userdefinedREST object",
        "text": "Inherits from TemplateREST, LayoutREST\nClass that corresponds to the Userdefined Layout\ntemplate type. This template inserts a named div into the HTML output.\nThis div can be filled with any HTML the user would like.  By default,\nthe HTML content will be filled in with the TemplateREST.set_html()\ncontent (if any).  This content may be placed before or after any\nchild item/layout content.\nSpecific properties include:\ntemplate.interactive_only: int\nIf this property is set to a non-zero value (the default), then the\ndiv will not be included when ADR is outputting PDF, PowerPoint or\nOffline HTML.  If set to zero, it will be included in PDF and Offline\nHTML output.\ntemplate.before_children: int\nIf this property is set to zero (the default), then any child content\nis placed in the report before the div.  If set to a non-zero value, the\nchildren will be placed in the report after the div.\ntemplate.userdef_name: str\nThis property is used to specify the value of the div adr_userdefined_template\nattribute.  The default value is unspecified.\nFor example, if this property is set to \"Hello\" and the HTML is set\nto <h1>Example</h1> the generated div will look like this:\n<div adr_userdefined_template=\"Hello\">\n<h1>Example</h1>\n</div>"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tablemergerest-object",
        "title": "Template Objects > tablemergeREST object",
        "section": "tablemergeREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merging_param()\nGet the value of Merging. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_merging_param(value=’row’)\nSet the value of Merging. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_sources()\nGet the values of the Select source rows/columns. The output is a list\nwhere each element is a different source. Each element has the following\nform: ‘row_name|merge_operation’ where merge_operation can have one of\nthe following values:\n‘duplicate’: corresponds to Allow Duplicates\n‘merge’: corresponds to Combine Values\n‘rename_tag’: corresponds to Rename Using Only Tag\n‘rename_nametag’: corresponds to Rename With Name and Tag\ntemplate.set_sources(value=[])\nSet the values of the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.add_sources(value=[])\nAdd some values to the Select source. The input needs to be a list where\neach element is a different source, with the form explained in the\nget_sources() method section.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_rename_tag()\nGet the value of the Tag to use when renaming field. Output will be a\nstring.\ntemplate.set_rename_tag(value=’’)\nSet the value of the Tag to use when renaming field. Input should be a\nstring.\ntemplate.get_use_labels()\nGet the value of the toggle for Use row/column labels as row/column IDs.\nOutput is 0 for toggled OFF, 1 for toggled ON.\ntemplate.set_use_labels(value=1)\nSet the value of the toggle for Use row/column labels as row/column IDs.\nInput should be an integer: 0 for toggled OFF, 1 for toggled ON.\ntemplate.get_use_ids()\nGet the value for the Row/Column to use as column/row IDs field.\ntemplate.set_use_ids(value=’’)\nSet the value for the Row/Column to use as column/row IDs field. Input\nshould be a string. This method will not work if get_use_labels()\nreturns 1.\ntemplate.get_id_selection()\nGet the value for the Row/Column ID selection. The possible outputs are:\n‘all’: corresponds to All IDs\n‘intersect’: corresponds to Only Common IDs\n‘select’: corresponds to Select Specific IDs\ntemplate.set_id_selection(value=’all’)\nSet the value for the Row/Column ID selection. Input should be a string\namong the ones listed in the get_id_selection() method.\ntemplate.get_ids()\nGet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, it will return an empty\nlist. Otherwise, it will return a list where each element is an ID.\ntemplate.set_ids(value=[])\nSet the value for the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.add_ids(value=[])\nAdd IDs to the Select column/row IDs values. If the Column/Row ID\nselection is not set to Select Specific IDs, the method will bail out.\nThe input is a list, where each element is an ID as an integer.\ntemplate.get_unknown_value()\nGet the value for Unknown value. It returns a string. Default is ‘nan’.\ntemplate.set_unknown_value(value=’nan’)\nSet the value for the Unknown value. Input needs to be a string.\ntemplate.get_table_transpose()\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Merged Table” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Columns” in the database running locally on port 8000. These would be\nthe lines of code to create the new template:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Columns\"][0]\nmy_template = server.create_template(\n    name=\"Merged Table\", parent=my_parent, report_type=\"Generator:tablemerge\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.set_table_name(\"Simple_test\")\nmy_template.set_sources([\"temperature|rename_nametag\", \"Distance|merge\"])\nmy_template.set_rename_tag(\"\\_index\\_\")\nmy_template.set_use_labels(0)\nmy_template.set_use_ids(\"Distance\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tablereducerest-object",
        "title": "Template Objects > tablereduceREST object",
        "section": "tablereduceREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Reduction\nGenerator template type. Its specific methods\nare:\ntemplate.get_reduce_param()\nGet the value of Reduce. Possible outputs are:\n‘row’: corresponds to Rows\n‘column’: corresponds to Columns\ntemplate.set_reduce_param(value=’row’)\nSet the value of Reduce. Input needs to be a string: either “row” or\n“column”.\ntemplate.get_table_name()\nGet the value of Resulting table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of Resulting table name. Input should be a string.\ntemplate.get_operations()\nGet the values for the Reduce operations as a list. Each element\ncorresponds to a different operation. Each element is a dictionary,\nwhere the following keys are presented:\n‘source_rows’: corresponds to the name(s) of the rows/columns used in\nthe operation\n‘output_rows’: corresponds to the Output row/column name\n‘output_rows_from_values’: False (OFF) / True (ON) for the Use unique\nvalues from a column/row as column/row names\n‘output_column_select’: corresponds to the “Select columns/rows”\nfield\n‘output_columns’: corresponds to the Column/Row name field\n‘output_columns_from_values’: False (OFF) / True (ON) for the Use\nunique values from a column/row as a new columns/rows toggle\n‘operation’: corresponds to the Operation field. Possible values:\n‘min’: Minimum\n‘max’: Maximum\n‘count’: Count\n‘sum’: Sum\n‘diff’: Difference\n‘mean’: Mean\n‘stdev’: Standard deviation\n‘skew’: Skew\n‘kurtosis’: Kurtosis\ntemplate.delete_operation(name = [])\nMethod to remove an entire Reduce operation. Takes as input a list with\nthe name(s) of the source rows/columns used in the operation. So for\nexample to delete the third Reduce operation from the following panel:\nuse:\nTo delete the first operation, use:\nAdd a new Reduce operation.\n‘name’: corresponds to the name(s) of the rows/columns used in the\noperation. Input needs to be a list of strings\n‘unique’: corresponds to the Use unique values from a column as row\nnames toggle. False is OFF, True is ON\noutput_name: corresponds to the Output row/column name.\nexisting: corresponds to the Use existing columns/rows toggle. False\nif OFF, True is ON.\nselect_names. If existing is set to True, it is used for the Selected\ncolumns/rows field. If existing is set to False, this field is used\nfor the Column/Row name.\noperation: corresponds to the operation field. See get_operation()\nfor the acceptable values.\nFor example to create the operation in the following widget:\nyou would run:\nGet the value for Transpose results. Output is an integer: 0 for OFF, 1\nfor ON.\ntemplate.set_table_transpose(value=0)\nSet the value for Transpose results. Input must be an integer: 0 for\nOFF, 1 for ON.\ntemplate.get_numeric_output()\nGet the value for Force numeric table output. Output is an integer: 0\nfor OFF, 1 for ON.\ntemplate.set_numeric_output(value=0)\nSet the value for Force numeric table output. Input must be an integer:\n0 for OFF, 1 for ON.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “ASCII reduce” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“Merge reduce example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\ntemplate.delete_source(name=[\"temperature\", \"pressure\"])\ntemplate.delete_source(name=[\"temperature\"])\ntemplate.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"output row\",\n    existing=True,\n    select_names=\"\\*\",\n    operation=\"count\",\n)\ntemplate.add_operation(\n    name=[\"temperature\"],\n    unique=True,\n    output_name=\"MinTemp\",\n    existing=False,\n    select_names=\"simulationA\",\n    operation=\"min\",\n)\ntemplate.get_table_transpose()\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Merge reduce example\"][0]\nmy_template = server.create_template(\n    name=\"ASCII reduce\", parent=my_parent, report_type=\"Generator:tablereduce\"\n)\nmy_template.set_generated_items(\"replace\")\nmy_template.delete_operation(name=[\"\\*\"])\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=True,\n    output_name=\"User\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nmy_template.add_operation(\n    name=[\"\\*\"],\n    unique=False,\n    output_name=\"Totals\",\n    existing=False,\n    select_names=\"Version\",\n    operation=\"count\",\n)\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tablerowcolumnfilterrest-object",
        "title": "Template Objects > tablerowcolumnfilterREST object",
        "section": "tablerowcolumnfilterREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Filter\nGenerator template type. Its specific\nmethods are:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘output_table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_rows()\nGet the value of Rows… The values are returned as a list of strings,\nwhere each element corresponds to a row value.\ntemplate.set_filter_rows(value=[’*’])\nSet the value of Rows… The input value needs to be a list of strings,\nwhere each element corresponds to a different row value.\ntemplate.add_filter_rows(value=[’*’])\nAdd new values to the value of Rows… The input value needs to be a\nlist of strings, where each element corresponds to a different row\nvalue.\ntemplate.get_filter_columns()\nGet the value of Columns… The values are returned as a list of\nstrings, where each element corresponds to a column value.\ntemplate.set_filter_columns(value=[’*’])\nSet the value of Columns… The input value needs to be a list of\nstrings, where each element corresponds to a different column value.\ntemplate.add_filter_columns(value=[’*’])\nAdd new values to the value of Columns… The input value needs to be a\nlist of strings, where each element corresponds to a different column\nvalue.\ntemplate.get_invert()\nGet the value of Select the rows/columns to remove. Returns 0 or False\nif it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert(value=False)\nSet the value of Select the rows/columns to remove. Set it to 0 or False\nto toggle OFF, set to 1 or True to toggle ON\ntemplate.get_sort()\nGet the value of Sort rows/columns by selection order. Returns 0 or\nFalse if it is toggled OFF, 1 or True if it is toggled ON\ntemplate.set_sort(value=False)\nSet the value of Sort rows/columns by selection order. Set it to 0 or\nFalse to toggle OFF, set to 1 or True to toggle ON. This method works\nonly if the Select the rows/columns to remove is toggled OFF.\ntemplate.get_table_transpose()\nGet the value of Transpose the output table. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_table_transpose(value=False)\nSet the value of Transpose the output table. Set it to 0 or False to\ntoggle OFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Filter” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Filter Generator” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Filter Generator\"][0]\nmy_template = server.create_template(\n    name=\"Filter\", parent=my_parent, report_type=\"Generator:tablerowcolumnfilter\"\n)\nmy_template.set_filter_rows([\"0\", \"fuselage\", \"\\*wing\\*\"])\nmy_template.set_filter_columns([\"1\", \"Tria3\", \"Tetra\\*\"])\nmy_template.set_table_name(\"RC_Filtered_Table\")\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tablevaluefilterrest-object",
        "title": "Template Objects > tablevaluefilterREST object",
        "section": "tablevaluefilterREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Value Filter\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_filter_by()\nGet the value of Filter by values in as a list. The first element is\n‘column’ (default) or ‘row’. The second element of the list of the\nnumber of row/column set in the following field.\ntemplate.set_filter_by(value = [‘column’, ‘0’])\nSet the value of Filter by values in as a list. The first element needs\nto be ‘column’ or ‘row’. The second element of the list of the number of\nrow/column set in the following field, and needs to be a string.\ntemplate.get_filter_value()\nGet the value of Filter. Each different type of filter will return a\ndifferent type of output:\n‘Range of values’: it returns a list of three elements. The first\nelement is ‘range’. The second and third are strings that represent\nthe min. and max. of the range.\n‘Specific values’: it returns a list of two elements. The first\nelement is “specific”. The second element is a list of strings. Each\nelement in this second list is one entry in the Select specific\nvalues… field\n‘Upper % of values’: it returns a list of two elements. The first\nelement is “top_percent”. The second element is a float that\ncorresponds to the Upper percent of values field.\n‘Upper # of values’: it returns a list of two elements. The first\nelement is “top_count”. The second element is an integer that\ncorresponds to the Upper number of values field.\n‘Lower % of values’: it returns a list of two elements. The first\nelement is “bot_percent”. The second element is a float that\ncorresponds to the Lower percent of values field.\n‘Lower # of values’: it returns a list of two elements. The first\nelement is “bot_count”. The second element is an integer that\ncorresponds to the Lower number of values field.\ntemplate.set_filter_value(value=[‘range’, ‘’, ‘’])\nSet the value of Filter. Each different type needs a different type of\ninput. See the description of get_filter_value() possible outputs to know the\ndetails of the accepted formats.\ntemplate.get_invert_filter()\nGet the value of Invert filter sense. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_invert_filter(value=False)\nSet the value of Invert filter sense. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\ntemplate.get_values_as_dates()\nGet the value of Treat values as dates. Returns 0 or False if it is\ntoggled OFF, 1 or True if it is toggled ON\ntemplate.set_values_as_dates(value=False)\nSet the value of Treat values as dates. Set it to 0 or False to toggle\nOFF, set to 1 or True to toggle ON\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the documentation example in the\nAnsys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child template of the\ntemplate “Value Filter Example” that already exists in in the database\nrunning locally on port 800. These would be the lines of code to create\nthe new template:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"Value Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Generator\", parent=my_parent, report_type=\"Generator:tablevaluefilter\"\n)\nmy_template.set_sort_selection(value=\"first\")\nmy_template.set_table_name(\"ValueFilteredTable\")\nmy_template.set_filter_by(value=[\"row\", \"Quad4\"])\nmy_template.set_filter_value(value=[\"range\", \"100\", \"\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#tablesortfilterrest-object",
        "title": "Template Objects > tablesortfilterREST object",
        "section": "tablesortfilterREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Table Row/Column Sort\nGenerator template type. Its specific methods\nare:\ntemplate.get_table_name()\nGet the value of New table name.\ntemplate.set_table_name(value = ‘value filtered table’)\nSet the value of New table name. Input should be a string.\ntemplate.get_sort_rows()\nGet the Select columns to sort rows by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the row name to sort by.\ntemplate.set_sort_rows([])\nSet the Select columns to sort rows by. This function takes a list as\ninput. The list is generated with ‘+’ for increasing, ‘-’ for\ndecreasing, followed by the row to sort by. Example: setting the sort\nfields to be by increasing row “temperature” and decreasing by row\n“pressure” becomes: [‘+temperature’, ‘-pressure’]\ntemplate.add_sort_rows([])\nAdd the Select columns to sort rows by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.get_sort_columns()\nGet the Select rows to sort columns by. This returns a list where each\nelement is a filter. Each elements start with ‘+’ or ‘-’ to indicate the\ndirection of the sort, and the string of the column name to sort by.\ntemplate.set_sort_columns([])\nSet the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\ntemplate.add_sort_columns([])\nAdd the Select rows to sort columns by. This function takes a list as\ninput. See set_sort_rows() for the description on how the list has to be\nformatted.\nExample of usage. Let’s assume you want to create a template like the\none shown in the picture (from the “Sorted” template in the\ndocumentation example in the Ansys Dynamic Reporting installer):\nLet’s also assume you want this template to be a child of the template\n“RC Sort Filter Example” in the database running locally on port 8000.\nThese would be the lines of code to create the new template:\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserver = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nall_reports = server.get_objects(objtype=report_objects.TemplateREST)\nmy_parent = [x for x in all_reports if x.name == \"RC Sort Filter Example\"][0]\nmy_template = server.create_template(\n    name=\"Sorted\", parent=my_parent, report_type=\"Generator:tablesortfilter\"\n)\nmy_template.set_sort_rows([\"+User\", \"+Version\", \"+Date\"])\nmy_template.set_generated_items(\"replace\")\nmy_template.set_sort_columns([\"+Labels\"])\nserver.put_objects(my_template)\nserver.put_objects(my_parent)"
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#sqlqueriesrest-object",
        "title": "Template Objects > sqlqueriesREST object",
        "section": "sqlqueriesREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the SQL Query Generator\ntemplate type. Its specific methods are:\ntemplate.get_db_type()\nGet the Database type. Possible outputs are: SQLite / PostgreSQL\ntemplate.set_db_type(value=’SQLite’)\nSet the Database type. Input needs to be a string. Only two acceptable\nvalues: ‘SQLite’ or ‘PostgreSQL’\ntemplate.get_sqlite_name()\nGet the SQLite filename.\ntemplate.set_sqlite_name(value=’’)\nSet the SQLite filename. Input needs to be a string. The method will not\nwork if the Database type is set to PostgreSQL\ntemplate.get_postgre()\nGet the PostgreSQL parameters. This method returns a dictionary with\nfive entries, corresponding to:\nDatabase name:\nHostname:\nPort:\nUsername:\nPassword:\ntemplate.set_postgre(value = {‘database’: ‘’,\n‘hostname’:’localhost’, ‘port’: ‘5432’, ‘username’:’nexus’,\n‘password’:’cei’})\nSet the the PostgreSQL parameters. Input needs to be a dictionary with\nthe keys: ‘database’, ‘hostname’, ‘port’, ‘username’, ‘password’. Note\nthat all keys are strings. See get_postgre() method for the description\nof each element. The method will not work if the Database type is set to\nSQLite\ntemplate.get_query()\nGet theSQL query text: field.\ntemplate.set_query(value=’’)\nSet theSQL query text: field. Input needs to be a string. Note that no\ncheck on the validity of the SQL query itself is performed. It is up to\nthe user to make sure the query is properly formatted.\ntemplate.validate()\nValidate the database. This method should be run after all the\nparameters for the database connection have been set. The method\nreturns:\nBoolean parameter: True is the database can be validated, False\notherwise.\nError message: If the connection is validated, this will be an empty\nstring. Otherwise, and error message with more details about the\nfailure will be returned."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#mergetreerest-object",
        "title": "Template Objects > mergetreeREST object",
        "section": "mergetreeREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Tree Merge Generator\ntemplate type. Its specific methods are:\ntemplate.get_merge_rule()\nGet the row merging rule.\ntemplate.set_merge_rule(value=’all’)\nSet the row merging rule. Legal values: ‘all’, ‘common’, ‘first’\ntemplate.get_match_rule()\nGet the rule for matching rows.\ntemplate.set_match_rule(value=’both’)\nSet the rule for matching rows. Legal values: ‘key’, ‘name’, ‘both’\ntemplate.get_tree_name()\nGet the name that the generated tree will be given.\ntemplate.set_tree_name(value=’treemerge’)\nSet the name that the generated tree will be given. Input needs to be a\nstring.\ntemplate.get_fill_value()\nGet the value to be used to fill unknown cells.\ntemplate.set_fill_value(value=’’)\nSet the value to be used to fill unknown cells. Input needs to be a\nstring.\ntemplate.get_header_tag()\nGet the name of the tag (if any) to be used to generate an output tree\nheader.\ntemplate.set_header_tag(value=’’)\nSet the name of the tag to be used to generate an output tree header.\nInput needs to be a string. An empty string (the default) specifies that\nno tree header be generated."
    },
    {
        "objectID": "lowlevelapi/TemplateObjects",
        "href": "lowlevelapi/TemplateObjects.html#statisticalrest-object",
        "title": "Template Objects > statisticalREST object",
        "section": "statisticalREST object",
        "text": "Inherits from TemplateREST, GeneratorREST\nClass that corresponds to the Statistical Analysis Generator\ntemplate type. Its specific methods are:\ntemplate.get_analysis_type()\nGet the type of statistical analysis\nTemplate.set_analysis_type(value=””)\nSet the type of statistical analysis.\nOnly “Linear Regression” is supported.\nTemplate.get_table_name()\nGet the name of the output table.\nTemplate.set_table_name(value=””)\nSet the name of the output table. Input must be a string.\nTemplate.get_tree_name()\nGet the name of the output tree with statistical parameters values.\nTemplate.set_tree_name(value=””)\nSet the name of the output tree with statistical parameters values.\nInput must be a string.\nTemplate.set_predictor_variables(value)\nSet the predictor variables. The input needs to be a list,\nwith each element a list of length 3.\nThe elements of the sub-lists must be:\nType. Only “row” is currently supported.\nVariable predictor name.\nOutput row name.\nTemplate.get_predictor_variables()\nGet the list of predictor variables.\nReturns a list where each element is a sub-list of\n3 elements (type, predictor name, output name)\nTemplate.set_response_variables(value=””)\nSet the response variables. Input must be a list of sub-lists,\neach with two elements:\nResponse variable name\nOutput row name\nTemplate.get_response_variables()\nGet the response variable list. Each element is a sub-list\nwith two elements each.\nTemplate.set_analysis_params(value=””)\nSet the parameters for the statistical analysis.\nCurrently not supported.\nTemplate.get_analysis_params()\nGet the parameters for the statistical algorithm."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux1",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_aux1.html#line_marker_aux1",
        "title": "line_marker_aux1",
        "section": "line_marker_aux1",
        "text": "Auxiliary data 1\nScalar value or name of a row accessible to line_marker_text as vaux1. May be a list."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.zaxis",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.zaxis.html#zaxis",
        "title": "zaxis",
        "section": "zaxis",
        "text": "Z axis rows\nThe row numbersnames to use as the Z axis values. Example: 3 Pressure"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_default_col_labels",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_default_col_labels.html#table_default_col_labels",
        "title": "table_default_col_labels",
        "section": "table_default_col_labels",
        "text": "Default column labels\nEnabledisable default column labels.  Default: 1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Report.export_html",
        "href": "_autosummary/ansys.dynamicreporting.core.Report.export_html.html#export_html",
        "title": "export_html",
        "section": "export_html",
        "text": "Export report as static HTML.\nDictionary for query parameters to apply to report template before export. Default: None\nFilename for the exported static HTML file. Default: index.html\nIf True, the information is exported as stand alone files instead of in line content\nin the static HTML. Default: False\nSuccess status of the HTML export: True if it worked, False otherwise\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect()\nmy_report = adr_service.get_report(report_name = \"My Top Report\")\nsucc = my_report.export_html(directory_name = r'D:\\tmp')"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.histogram_normalized",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.histogram_normalized.html#histogram_normalized",
        "title": "histogram_normalized",
        "section": "histogram_normalized",
        "text": "Normalize histogram\nSet to 1 to normalize the histograms. Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_size",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_size.html#line_marker_size",
        "title": "line_marker_size",
        "section": "line_marker_size",
        "text": "Marker size\nThe marker size in points"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.show_legend",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.show_legend.html#show_legend",
        "title": "show_legend",
        "section": "show_legend",
        "text": "Show legend\nSet to 0 to hide the legend. Default: 1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.palette_range",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.palette_range.html#palette_range",
        "title": "palette_range",
        "section": "palette_range",
        "text": "Range of the colorbar\nMinimum and maximum line_color values  mapped to palette extremes. Example: 0 100"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_justification",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_justification.html#item_justification",
        "title": "item_justification",
        "section": "item_justification",
        "text": "Table item justification\nleft  center or right. By default  there will be no justification."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_scrolly",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_scrolly.html#table_scrolly",
        "title": "table_scrolly",
        "section": "table_scrolly",
        "text": "Vertical scrolling\nControl visibility and height of vertical scrollbar.  Height in points  Default: 0"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_page",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_page.html#table_page",
        "title": "table_page",
        "section": "table_page",
        "text": "Table paging\nNumber of rows visible per page.  Default: 0 all"
    },
    {
        "objectID": "examples/25-intermediate/index",
        "href": "examples/25-intermediate/index.html#intermediate-examples",
        "title": "Intermediate examples",
        "section": "Intermediate examples",
        "text": "Intermediate examples show how to use PyDynamicReporting\nto query an Ansys Dynamic Reporting database, modify its items,\nand get their corresponding web components.\nsphx_glr_examples_25-intermediate_00-tagging.py\nsphx_glr_examples_25-intermediate_01-queries.py"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.url",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.url.html#url",
        "title": "url",
        "section": "url",
        "text": "URL for the service."
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_wrap_content",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_wrap_content.html#table_wrap_content",
        "title": "table_wrap_content",
        "section": "table_wrap_content",
        "text": "Table content wrapping\nControl wrapping of content to the next line inside a table cell.  Default: 0"
    },
    {
        "objectID": "examples/50-advanced/index",
        "href": "examples/50-advanced/index.html#advanced-examples",
        "title": "Advanced examples",
        "section": "Advanced examples",
        "text": "Advanced examples show how to use the low-level API in Ansys\nDynamic Reporting to create, query, visualize, and embed reports based on\ncustomers case studies.\nsphx_glr_examples_50-advanced_00-complete_report.py\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py\nsphx_glr_examples_50-advanced_02-customized_report_embed.py"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.labels_column",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.labels_column.html#labels_column",
        "title": "labels_column",
        "section": "labels_column",
        "text": "Column labels\ncolumn A column B"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.row_tags",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.row_tags.html#row_tags",
        "title": "row_tags",
        "section": "row_tags",
        "text": "List of tags for each table row"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#startup",
        "title": "Startup",
        "section": "Startup",
        "text": "The following code snippet illustrates how to import the necessary API\nmodules (technically, import requests is not necessary, but some of\nthe API calls are simpler with that module available):\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\nimport requests"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#simple-example",
        "title": "Startup > Simple Example",
        "section": "Simple Example",
        "text": "This snippet creates a new database, starts an ADR Nexus server, verifies the\nserver and shuts it down. It uses the port=None option to allow the\nsystem to find and use a non-conflicting port to run the server on. If\nneeded, the port is returned as part of the URL returned by:\nserverobj.get_URL().\ndb_dir = \"D:/data/example_database\"\nreport_remote_server.create_new_local_database(None, directory=db_dir)\nserverobj = report_remote_server.Server()\nreport_remote_server.launch_local_database_server(\n    None, port=None, directory=db_dir, connect=serverobj\n)\nversion_number = serverobj.validate()\nserverobj.stop_local_server()"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#corereport_remote_server-module",
        "title": "Startup > core.report_remote_server module",
        "section": "core.report_remote_server module",
        "text": "This module includes the interfaces needed to manage ADR Nexus servers.\nMany of these functions support Qt integration. The parent option\nspecifies the Qt widget that should be the parent if they are to display\nany GUI elements. If parent is specified as None, no GUI elements will\nbe presented to the user and the operation will just return an error\nstatus.\nThis function will try to launch a local ADR Nexus server using the database\nfound in the specified directory on the specified port. If parent is not\nset None, the function will interact with the user via Qt modal dialogs\n(parent will be the parent of the dialogs) to select database directory,\nports, username and password. One can bypass the prompt to select the\nserver directory using the no_directory_prompt keyword argument.\nBy default, a launched server will continue to run after the current\nPython session stops. There is a server method stop_local_server() that\ncan be used to stop the launched server. Otherwise, the\nterminate_on_python_exit keyword can be set to True to cause the server\nto be automatically shut down if the current Python interpreter instance\nexits cleanly.\nIf the delete_db_on_python_exit argument is also set to True, then once\nthe server is automatically shut down the database directory it was\nconnected to will be deleted.\nIf the Qt parent is not set to None and the server has not been set to\nterminate on exit, then the use_system_tray option can be used to cause\nthe server to place a menu in the system tray. This menu will allow for\nthe server to be stopped, the logs to be reviewed and other options.\nWhen launching a server, this function will try to connect to the\nlaunched server for some time before assuming the launch has failed. The\nlength of this timeout is specified by the server_timeout keyword.\nBy default, the function will return True on success or False on\nfailure. If raise_exception is True, the function will raise an\nexception instead of returning False.\nThe username and password for the database should be specified using\nthose keywords.\nIf the connect keyword is specified, it should be an instance of the\nreport_remote_server.Server class. This object will be populated with\nthe launched server details when the function returns. It is a handy way\nto capture a dynamically selected port.\nThe port keyword can be set to the specific port number the ADR Nexus server\nshould use. The port keyword may also be set to None, in which case the\nsystem will search for an open port on which to start the ADR Nexus server,\nstarting at 8000. If this option is selected, it is critical that the\n‘connect’ keyword be set, otherwise there will be no mechanism for one\nto know the actual port that was used.\nThe verbose keyword controls the level of log output generated by the\nADR Nexus server and determines if the user is allowed to modify any\ndynamically selected port number.\nIn addition to the above mentioned arguments, this method supports all\nof the options available to the Ansys Dynamic Reporting Launcher CLI (through **kwargs).\nThis function will create a new, empty database with the default\nusername and password in the directory specified by the directory\nkeyword. If parent is None, this function will try to create the\ndatabase and return True on success without presenting any GUI elements.\nIt is very important to set the directory keyword if passing None as the\nparent. Otherwise, parent should be a Qt widget object that will serve\nas the parent of modal dialog used to select the directory to contain\nthe new database. The target directory should be empty as this method\nwill insert a media directory, a db.sqlite3 file and a manage.py file.\nThe return_info argument is optional. If a dictionary is passed,\ninformation about the created database will be stored in it.\nIf raise_exception is True, method will throw an error instead of\nreturning the error flag.\nThis method presents a dialog to the user with a window title specified\nby the title keyword that allows the user to enter all of the\ninformation needed to connect to an ADR Nexus server. It then attempts to\nconnect to the server and returns True if the connection succeeded. The\nserver argument should be an instance of the report_remote_server.Server\nclass which will be initialized with the entered values. This method can\nonly be called from a PyQt application. You can specify None for the\nparent, but it will have the same effect as displaying a modal dialog\nwith no parent specified. Do not use this method if your application\nshould not display any GUI.\nThis class provides an interface to the ADR Nexus server. Most of the core\nAPI can be accessed via an instance of this class. The Server object has\nmethods for creating instances of data item and template objects.\nbError = launch_local_database_server(\n    parent,\n    directory=\"\",\n    no_directory_prompt=False,\n    port=8000,\n    connect=None,\n    terminate_on_python_exit=False,\n    delete_db_on_python_exit=False,\n    username=\"nexus\",\n    password=\"cei\",\n    verbose=True,\n    return_info=None,\n    raise_exception=False,\n    use_system_tray=None,\n    server_timeout=180.0,\n    **kwargs\n)\nbError = create_new_local_database(\n    parent, directory=\"\", return_info={}, raise_exception=False\n)\nbError = connect_to_server_dialog(parent, server, title=None)"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#module-functions",
        "title": "Startup > Module functions",
        "section": "Module functions",
        "text": "Many of these functions support Qt integration. The parent option\nspecifies the Qt widget that should be the parent if they are to display\nany GUI elements. If parent is specified as None, no GUI elements will\nbe presented to the user and the operation will just return an error\nstatus."
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#report_remote_serverlaunch_local_database_server",
        "title": "Startup > report_remote_server.launch_local_database_server",
        "section": "report_remote_server.launch_local_database_server",
        "text": "This function will try to launch a local ADR Nexus server using the database\nfound in the specified directory on the specified port. If parent is not\nset None, the function will interact with the user via Qt modal dialogs\n(parent will be the parent of the dialogs) to select database directory,\nports, username and password. One can bypass the prompt to select the\nserver directory using the no_directory_prompt keyword argument.\nBy default, a launched server will continue to run after the current\nPython session stops. There is a server method stop_local_server() that\ncan be used to stop the launched server. Otherwise, the\nterminate_on_python_exit keyword can be set to True to cause the server\nto be automatically shut down if the current Python interpreter instance\nexits cleanly.\nIf the delete_db_on_python_exit argument is also set to True, then once\nthe server is automatically shut down the database directory it was\nconnected to will be deleted.\nIf the Qt parent is not set to None and the server has not been set to\nterminate on exit, then the use_system_tray option can be used to cause\nthe server to place a menu in the system tray. This menu will allow for\nthe server to be stopped, the logs to be reviewed and other options.\nWhen launching a server, this function will try to connect to the\nlaunched server for some time before assuming the launch has failed. The\nlength of this timeout is specified by the server_timeout keyword.\nBy default, the function will return True on success or False on\nfailure. If raise_exception is True, the function will raise an\nexception instead of returning False.\nThe username and password for the database should be specified using\nthose keywords.\nIf the connect keyword is specified, it should be an instance of the\nreport_remote_server.Server class. This object will be populated with\nthe launched server details when the function returns. It is a handy way\nto capture a dynamically selected port.\nThe port keyword can be set to the specific port number the ADR Nexus server\nshould use. The port keyword may also be set to None, in which case the\nsystem will search for an open port on which to start the ADR Nexus server,\nstarting at 8000. If this option is selected, it is critical that the\n‘connect’ keyword be set, otherwise there will be no mechanism for one\nto know the actual port that was used.\nThe verbose keyword controls the level of log output generated by the\nADR Nexus server and determines if the user is allowed to modify any\ndynamically selected port number.\nIn addition to the above mentioned arguments, this method supports all\nof the options available to the Ansys Dynamic Reporting Launcher CLI (through **kwargs).\nbError = launch_local_database_server(\n    parent,\n    directory=\"\",\n    no_directory_prompt=False,\n    port=8000,\n    connect=None,\n    terminate_on_python_exit=False,\n    delete_db_on_python_exit=False,\n    username=\"nexus\",\n    password=\"cei\",\n    verbose=True,\n    return_info=None,\n    raise_exception=False,\n    use_system_tray=None,\n    server_timeout=180.0,\n    **kwargs\n)"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#report_remote_servercreate_new_local_database",
        "title": "Startup > report_remote_server.create_new_local_database",
        "section": "report_remote_server.create_new_local_database",
        "text": "This function will create a new, empty database with the default\nusername and password in the directory specified by the directory\nkeyword. If parent is None, this function will try to create the\ndatabase and return True on success without presenting any GUI elements.\nIt is very important to set the directory keyword if passing None as the\nparent. Otherwise, parent should be a Qt widget object that will serve\nas the parent of modal dialog used to select the directory to contain\nthe new database. The target directory should be empty as this method\nwill insert a media directory, a db.sqlite3 file and a manage.py file.\nThe return_info argument is optional. If a dictionary is passed,\ninformation about the created database will be stored in it.\nIf raise_exception is True, method will throw an error instead of\nreturning the error flag.\nbError = create_new_local_database(\n    parent, directory=\"\", return_info={}, raise_exception=False\n)"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#report_remote_serverconnect_to_server_dialog",
        "title": "Startup > report_remote_server.connect_to_server_dialog",
        "section": "report_remote_server.connect_to_server_dialog",
        "text": "This method presents a dialog to the user with a window title specified\nby the title keyword that allows the user to enter all of the\ninformation needed to connect to an ADR Nexus server. It then attempts to\nconnect to the server and returns True if the connection succeeded. The\nserver argument should be an instance of the report_remote_server.Server\nclass which will be initialized with the entered values. This method can\nonly be called from a PyQt application. You can specify None for the\nparent, but it will have the same effect as displaying a modal dialog\nwith no parent specified. Do not use this method if your application\nshould not display any GUI.\nbError = connect_to_server_dialog(parent, server, title=None)"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#report_remote_serverserver",
        "title": "Startup > report_remote_server.Server",
        "section": "report_remote_server.Server",
        "text": "This class provides an interface to the ADR Nexus server. Most of the core\nAPI can be accessed via an instance of this class. The Server object has\nmethods for creating instances of data item and template objects."
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#corereport_objects-module",
        "title": "Startup > core.report_objects module",
        "section": "core.report_objects module",
        "text": "This module provides the core data items that can be pushed into\nan Ansys Dynamic Reporting\ndatabase. This includes the session, dataset and item objects.\nGenerally, these classes should be created using the Server object\nmethods create_item, create_layout, default_dataset and default_session\nor via one of the Server query methods.\nBaseRESTObject - Abstract Ansys Dynamic Reporting REST object interface base class\nDatasetREST - Dataset\ninformation\nSessionREST - Session\ninformation\nItemREST - Core data items\nTemplateREST - Abstract base class\nfor all template (layout and generator) classes\nLayoutREST - Abstract base class for\nall layout classes\nbasicREST - Basic column layout class\npanelREST - Column layout class with\nsupport for pullouts and headers\nboxREST - Explicit child layout class\ntabsREST - Layout that organizes\nlayout children into tabs\ncarouselREST - Layout that\norganizes children into a ‘carousel’ presentation\nsliderREST - Specialized image\nlayout for interactive image review/comparison\nfooterREST - Page footer layout\nheaderREST - Page header layout\niteratorREST - Tag-based layout\nreplicator\ntagpropsREST - Map item/layout\ntags into properties\ntocREST - Table of contents/figure list\nlayout\nreportlinkREST - Cross layout\nlinking\nGeneratorREST - Abstract base\nclass for all generator classes\ntablemergeREST - Table merge\ngenerator for merging multiple tables into a single table\ntablereduceREST - Table\nreduction generator that may collapse rows/columns into aggregated\nvalues\ntablerowcolumnfilterREST -\nTable row/column filter generator for removing/organizing table rows\nand columns\ntablevaluefilterREST - Table\nvalue filter generator for processing table values\ntablesortfilterREST - Table\nsort/filter generator for re-organizing tables\nsqlqueriesREST - SQL query\ngenerator for pulling data into the report from external SQL databases\ntreemergeREST - tree merge\ngenerator for merging multiple trees into a single tree"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#class-hierarchy",
        "title": "Startup > Class hierarchy",
        "section": "Class hierarchy",
        "text": "BaseRESTObject - Abstract Ansys Dynamic Reporting REST object interface base class\nDatasetREST - Dataset\ninformation\nSessionREST - Session\ninformation\nItemREST - Core data items\nTemplateREST - Abstract base class\nfor all template (layout and generator) classes\nLayoutREST - Abstract base class for\nall layout classes\nbasicREST - Basic column layout class\npanelREST - Column layout class with\nsupport for pullouts and headers\nboxREST - Explicit child layout class\ntabsREST - Layout that organizes\nlayout children into tabs\ncarouselREST - Layout that\norganizes children into a ‘carousel’ presentation\nsliderREST - Specialized image\nlayout for interactive image review/comparison\nfooterREST - Page footer layout\nheaderREST - Page header layout\niteratorREST - Tag-based layout\nreplicator\ntagpropsREST - Map item/layout\ntags into properties\ntocREST - Table of contents/figure list\nlayout\nreportlinkREST - Cross layout\nlinking\nGeneratorREST - Abstract base\nclass for all generator classes\ntablemergeREST - Table merge\ngenerator for merging multiple tables into a single table\ntablereduceREST - Table\nreduction generator that may collapse rows/columns into aggregated\nvalues\ntablerowcolumnfilterREST -\nTable row/column filter generator for removing/organizing table rows\nand columns\ntablevaluefilterREST - Table\nvalue filter generator for processing table values\ntablesortfilterREST - Table\nsort/filter generator for re-organizing tables\nsqlqueriesREST - SQL query\ngenerator for pulling data into the report from external SQL databases\ntreemergeREST - tree merge\ngenerator for merging multiple trees into a single tree"
    },
    {
        "objectID": "lowlevelapi/GettingStarted",
        "href": "lowlevelapi/GettingStarted.html#examples",
        "title": "Startup > Examples",
        "section": "Examples",
        "text": "A simple example of how this API might be used:\nThis would start a new session that connects to an ADR Nexus server already\nrunning on port 8000 of the local system. The server has a default\ndataset and a default session object. We change the name and version of\nthe session application before creating a new data item. The data item\nis populated with some HTML source and then pushed to the server. The\nput_objects() call will push the item, the session and the dataset\nobjects all to the ADR Nexus server.\nA more complex example that generates an ASCII table of three columns\nrepresenting a username, a version number and a date (as a floating\npoint value):\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\nserverobj = report_remote_server.Server(\n    url=\"http://localhost:8000\", username=\"nexus\", password=\"cei\"\n)\nsession = serverobj.get_default_session()\nsession.application = \"My Application\"\nsession.version = \"10.2\"\nitem = serverobj.create_item(name=\"Simple header\", source=\"My Python script\")\nitem.set_payload_html(\"<h1>An Example Header</h1>\")\nerror = serverobj.put_objects([item])\n# core Python modules\nfrom dateutil import parser\nimport datetime\nimport random\nimport requests\nimport numpy\n\n# Ansys Dynamic Reporting modules\nfrom ansys.dynamicreporting.core.utils import report_remote_server, report_objects\n\n# time values can be represented as double precision counts of seconds from a standard time_base\ntime_base = datetime.datetime(1970, 1, 1)\n\n\ndef make_time(s):\n    dt = parser.parse(s)\n    return (dt - time_base).total_seconds()\n\n\n# generate a row of random values\ndef row_gen(start, end):\n    users = [\"bob\", \"fred\", \"mary\", \"jill\"]\n    versions = [\"1.1\", \"2.0\", \"1.3\", \"1.0\"]\n    t0 = make_time(start)\n    t1 = make_time(end)\n    return [\n        users[random.randint(0, 3)],\n        versions[random.randint(0, 3)],\n        t0 + (t1 - t0) * random.random(),\n    ]\n\n\n# connect to the default ADR Nexus server (this assumes the server had been started previously\n\ns = report_remote_server.Server(\"http://localhost:8000\", \"nexus\", \"cei\")\nnrows = 40\nncols = 3\nitem = s.create_item(name=\"Text List Example\", source=\"externalAPI\", sequence=0)\narray = numpy.zeros((nrows, ncols), dtype=\"\\|S20\")\nfor i in range(nrows):\n    array[i] = row_gen(\"1/1/2017\", \"2/1/2017\")\n\nitem.set_payload_table_values(\n    array, rowlbls=None, collbls=[\"User\", \"Version\", \"Date\"], title=\"January\"\n)\nitem.add_tag(\"month\", \"Jan\")\nitem.add_tag(\"user_version_example\")\nif s.put_objects(item) == requests.codes.ok:\n    print(\"Success\")"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker.html#line_marker",
        "title": "line_marker",
        "section": "line_marker",
        "text": "Markers\ncircle square cross x triangle star diamond hash plus times open dot"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#create-a-database",
        "title": "Create a database",
        "section": "Create a database",
        "text": "This example shows how to use PyDynamicReporting to create an Ansys\nDynamic Reporting service, create a database for this service, and\ncreate items in this database.\nThis example assumes that you have a local Ansys installation.\nStart an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nNow that an Ansys Dynamic Reporting service is running on top of the new\ndatabase, create some items of different types (text, image, and 3D scene)\nin the database. The payload for these items comes from files on disk.\nVisualize all items  currently in the database by invoking the\ndefault report, which is simply the list of items, one after the other.\nIf you are running inside a Python interpreter such as Jupyter Notebook, the\nvisualization is embedded in the web page. If not, a browser opens an\nHTML page that displays the default report.\nTable and plot items can be generated by passing a numpy array. Trees\nare represented via Python dictionaries. All the different options for tables\nand trees can be set here.\nYou can visualize single items as web components, similarly to how you\nvisualized the default report. Simply calling the\nvisualize method\non each of the single items.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-create_db.ipynb\nDownload Python source code: 00-create_db.py\nDownload zipped: 00-create_db.zip\nGallery generated by Sphinx-Gallery\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)\nmy_text = adr_service.create_item()\nmy_text.item_text = \"<h1>Analysis Title</h1>This is the first of many items\"\nmy_image = adr_service.create_item()\nmy_image.item_image = r\"\"\"D:\\tmp\\tmp_img.png\"\"\"\nmy_scene = adr_service.create_item()\nmy_scene.item_scene = r\"\"\"D:\\tmp\\tmp_scene.avz\"\"\"\nadr_service.visualize_report()\nmy_plot = adr_service.create_item()\n\nmy_plot.item_table = np.array([[1, 2, 3, 4, 5, 6], [1, 4, 9, 16, 25, 36]], dtype=\"|S20\")\nmy_plot.labels_row = [\"First Row\", \"My Second Row\"]\n\nleaves = []\nfor i in range(5):\n    leaves.append({\"key\": \"leaves\", \"name\": f\"Leaf {i}\", \"value\": i})\nchildren = []\nchildren.append({\"key\": \"child\", \"name\": \"Boolean example\", \"value\": True})\nchildren.append({\"key\": \"child\", \"name\": \"Integer example\", \"value\": 10})\nchildren.append(\n    {\n        \"key\": \"child_parent\",\n        \"name\": \"A child parent\",\n        \"value\": \"Parents can have values\",\n        \"children\": leaves,\n        \"state\": \"collapsed\",\n    }\n)\nchildren.append({\"key\": \"child\", \"name\": \"Float example\", \"value\": 99.99})\ntree = []\ntree.append(\n    {\"key\": \"root\", \"name\": \"Top Level\", \"value\": None, \"children\": children, \"state\": \"expanded\"}\n)\nmy_tree = adr_service.create_item(obj_name=\"My Tree object\")\nmy_tree.item_tree = tree\nmy_plot.visualize()\nmy_tree.visualize()\n# sphinx_gallery_thumbnail_path = '_static/00_create_db_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#start-an-ansys-dynamic-reporting-service",
        "title": "Create a database > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service with a new database. The path for the\ndatabase directory must be to an empty directory.\nimport numpy as np\n\nimport ansys.dynamicreporting.core as adr\n\nansys_loc = r\"C:\\Program Files\\ANSYS Inc\\v232\"\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=ansys_loc, db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#create-items",
        "title": "Create a database > Create items",
        "section": "Create items",
        "text": "Now that an Ansys Dynamic Reporting service is running on top of the new\ndatabase, create some items of different types (text, image, and 3D scene)\nin the database. The payload for these items comes from files on disk.\nmy_text = adr_service.create_item()\nmy_text.item_text = \"<h1>Analysis Title</h1>This is the first of many items\"\nmy_image = adr_service.create_item()\nmy_image.item_image = r\"\"\"D:\\tmp\\tmp_img.png\"\"\"\nmy_scene = adr_service.create_item()\nmy_scene.item_scene = r\"\"\"D:\\tmp\\tmp_scene.avz\"\"\""
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#visualize-all-items",
        "title": "Create a database > Visualize all items",
        "section": "Visualize all items",
        "text": "Visualize all items  currently in the database by invoking the\ndefault report, which is simply the list of items, one after the other.\nIf you are running inside a Python interpreter such as Jupyter Notebook, the\nvisualization is embedded in the web page. If not, a browser opens an\nHTML page that displays the default report.\nadr_service.visualize_report()"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#create-tables-and-trees",
        "title": "Create a database > Create tables and trees",
        "section": "Create tables and trees",
        "text": "Table and plot items can be generated by passing a numpy array. Trees\nare represented via Python dictionaries. All the different options for tables\nand trees can be set here.\nmy_plot = adr_service.create_item()\n\nmy_plot.item_table = np.array([[1, 2, 3, 4, 5, 6], [1, 4, 9, 16, 25, 36]], dtype=\"|S20\")\nmy_plot.labels_row = [\"First Row\", \"My Second Row\"]\n\nleaves = []\nfor i in range(5):\n    leaves.append({\"key\": \"leaves\", \"name\": f\"Leaf {i}\", \"value\": i})\nchildren = []\nchildren.append({\"key\": \"child\", \"name\": \"Boolean example\", \"value\": True})\nchildren.append({\"key\": \"child\", \"name\": \"Integer example\", \"value\": 10})\nchildren.append(\n    {\n        \"key\": \"child_parent\",\n        \"name\": \"A child parent\",\n        \"value\": \"Parents can have values\",\n        \"children\": leaves,\n        \"state\": \"collapsed\",\n    }\n)\nchildren.append({\"key\": \"child\", \"name\": \"Float example\", \"value\": 99.99})\ntree = []\ntree.append(\n    {\"key\": \"root\", \"name\": \"Top Level\", \"value\": None, \"children\": children, \"state\": \"expanded\"}\n)\nmy_tree = adr_service.create_item(obj_name=\"My Tree object\")\nmy_tree.item_tree = tree"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#visualize-tables-and-trees",
        "title": "Create a database > Visualize tables and trees",
        "section": "Visualize tables and trees",
        "text": "You can visualize single items as web components, similarly to how you\nvisualized the default report. Simply calling the\nvisualize method\non each of the single items.\nmy_plot.visualize()\nmy_tree.visualize()"
    },
    {
        "objectID": "examples/00-basic/00-create_db",
        "href": "examples/00-basic/00-create_db.html#close-the-service",
        "title": "Create a database > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 00-create_db.ipynb\nDownload Python source code: 00-create_db.py\nDownload zipped: 00-create_db.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/00_create_db_0.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Service.start",
        "href": "_autosummary/ansys.dynamicreporting.core.Service.start.html#start",
        "title": "start",
        "section": "start",
        "text": "Start a new service.\nUsername for the service. The default is \"nexus\".\nPassword for the service. The default is \"cei\".\nWhether to create a new database before starting the service on top\nof it. The default is False. If True, this method creates a\ndatabase in the directory specified by the db_directory\nparameter and starts the service on top of it. An error is raised\nif the directory specified by the db_directory parameter\nalready exists and is not empty.\nWhether to raise an error if the create_db parameter is set to\nTrue and the database already exists. The default is False,\nin which case the start() method uses the database found instead\nof creating one.\nWhether to automatically shut down the service when exiting the script.\nThe default is False, in which case the service continues to run.\nWhether to automatically delete the database when exiting the script. The\ndefault is False. This parameter is valid only if this parameter and\nthe exit_on_close parameter are set to True.\nID of the connected session.\nThere is no database directory associated with the Service.\nError when creating the database.\nObject is already connected to a running ADR service.\nCan not start the ADR service.\nCan not validate the current ADR service.\nimport ansys.dynamicreporting.core as adr\ninstallation_dir = r'C:\\Program Files\\ANSYS Inc\\v232'\nadr_service = adr.Service(ansys_installation = installation_dir,\ndb_directory = r'D:\\tmp\\new_db', port = 8020)\nsession_guid = adr_service.start()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.bar_mode",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.bar_mode.html#bar_mode",
        "title": "bar_mode",
        "section": "bar_mode",
        "text": "Bar chart  Histogram config mode\ngroup=separate the barsbins  stack=stack the barsbins  overlay=overlay the barbins"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#connect-services",
        "title": "Connect services",
        "section": "Connect services",
        "text": "This example shows how to start an Ansys Dynamic Reporting\nservice via a Docker image, create a second instance of the Service\nclass, and connect it to the already running service. It then shows\nhow to create and modify items in the original database with this\nnew instance.\nThis example assumes that you do not have a local Ansys installation but\nare starting an Ansys Dynamic Reporting Service via a Docker image on\na new database.\nStart an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory.\nGiven that the Ansys Dynamic Reporting service is running on top\nof an empty database, create a few items in the database and then visualize\nthe default report that shows all these items, one after the other. Note that\nthis code assumes that you have files on disk for the payload of the items.\nNow that you have a running Ansys Dynamic Reporting service, create a\nsecond instance of the Reporting class and use it to\nconnect to the database. Visualize the default report.\nUse the new object for the connected service to create an Image item.\nVisualize the default report again to verify that this item has been\nadded to the database.\nAssume that you want to visualize only the items that were\ncreated from the connected Ansys Dynamic Reporting session and not the\noriginal instance. To achieve this, you add a filter to the default\nreport visualization. Note that running this method on either of the\nAnsys Dynamic Reporting instances produces the same result.\nClose the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-connect.ipynb\nDownload Python source code: 01-connect.py\nDownload zipped: 01-connect.zip\nGallery generated by Sphinx-Gallery\nimport ansys.dynamicreporting.core as adr\n\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=\"docker\", db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)\nmy_text = adr_service.create_item(obj_name=\"Text\", source=\"Documentation\")\nmy_text.item_text = \"This is a simple string with no HTML formatting.\"\nmy_animation = adr_service.create_item(obj_name=\"Animation File\", source=\"Documentation\")\nmy_animation.item_animation = r\"D:\\tmp\\myanim.mp4\"\nmy_file = adr_service.create_item(obj_name=\"General File\", source=\"Documentation\")\nmy_file.item_file = r\"D:\\tmp\\anytfile.txt\"\nadr_service.visualize_report()\nconnected_s = adr.Service()\nconnected_s.connect(url=adr_service.url)\nconnected_s.visualize_report()\nmy_image = connected_s.create_item(obj_name=\"Image\", source=\"Documentation\")\nmy_image.item_image = r\"D:\\tmp\\local_img.png\"\nconnected_s.visualize_report()\nadr_service.visualize_report(filter=f\"A|s_guid|cont|{connected_s.session_guid}\")\n# sphinx_gallery_thumbnail_path = '_static/01_connect_3.png'\nadr_service.stop()"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#start-an-ansys-dynamic-reporting-service",
        "title": "Connect services > Start an Ansys Dynamic Reporting service",
        "section": "Start an Ansys Dynamic Reporting service",
        "text": "Start an Ansys Dynamic Reporting service via a Docker image on a new\ndatabase. The path for the database directory must be to an empty directory.\nimport ansys.dynamicreporting.core as adr\n\ndb_dir = r\"C:\\tmp\\new_database\"\nadr_service = adr.Service(ansys_installation=\"docker\", db_directory=db_dir)\nsession_guid = adr_service.start(create_db=True)"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#create-items",
        "title": "Connect services > Create items",
        "section": "Create items",
        "text": "Given that the Ansys Dynamic Reporting service is running on top\nof an empty database, create a few items in the database and then visualize\nthe default report that shows all these items, one after the other. Note that\nthis code assumes that you have files on disk for the payload of the items.\nmy_text = adr_service.create_item(obj_name=\"Text\", source=\"Documentation\")\nmy_text.item_text = \"This is a simple string with no HTML formatting.\"\nmy_animation = adr_service.create_item(obj_name=\"Animation File\", source=\"Documentation\")\nmy_animation.item_animation = r\"D:\\tmp\\myanim.mp4\"\nmy_file = adr_service.create_item(obj_name=\"General File\", source=\"Documentation\")\nmy_file.item_file = r\"D:\\tmp\\anytfile.txt\"\nadr_service.visualize_report()"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#create-another-connected-instance",
        "title": "Connect services > Create another connected instance",
        "section": "Create another connected instance",
        "text": "Now that you have a running Ansys Dynamic Reporting service, create a\nsecond instance of the Reporting class and use it to\nconnect to the database. Visualize the default report.\nconnected_s = adr.Service()\nconnected_s.connect(url=adr_service.url)\nconnected_s.visualize_report()"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#create-an-item-via-the-connected-object",
        "title": "Connect services > Create an item via the connected object",
        "section": "Create an item via the connected object",
        "text": "Use the new object for the connected service to create an Image item.\nVisualize the default report again to verify that this item has been\nadded to the database.\nmy_image = connected_s.create_item(obj_name=\"Image\", source=\"Documentation\")\nmy_image.item_image = r\"D:\\tmp\\local_img.png\"\nconnected_s.visualize_report()"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#visualize-only-items-from-a-session",
        "title": "Connect services > Visualize only items from a session",
        "section": "Visualize only items from a session",
        "text": "Assume that you want to visualize only the items that were\ncreated from the connected Ansys Dynamic Reporting session and not the\noriginal instance. To achieve this, you add a filter to the default\nreport visualization. Note that running this method on either of the\nAnsys Dynamic Reporting instances produces the same result.\nadr_service.visualize_report(filter=f\"A|s_guid|cont|{connected_s.session_guid}\")"
    },
    {
        "objectID": "examples/00-basic/01-connect",
        "href": "examples/00-basic/01-connect.html#close-the-service",
        "title": "Connect services > Close the service",
        "section": "Close the service",
        "text": "Close the Ansys Dynamic Reporting service. The database with the items that\nwere created remains on disk.\nDownload Jupyter notebook: 01-connect.ipynb\nDownload Python source code: 01-connect.py\nDownload zipped: 01-connect.zip\nGallery generated by Sphinx-Gallery\n# sphinx_gallery_thumbnail_path = '_static/01_connect_3.png'\nadr_service.stop()"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.item_scene",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.item_scene.html#item_scene",
        "title": "item_scene",
        "section": "item_scene",
        "text": "3D scene (AVZ, PLY, SCDOC, SCDOCX, GLB, and STL files)"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.xaxis",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.xaxis.html#xaxis",
        "title": "xaxis",
        "section": "xaxis",
        "text": "X axis rows\nThe row numbersnames to use as the X axis values. Example: 2 Distance"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.ztitle",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.ztitle.html#ztitle",
        "title": "ztitle",
        "section": "ztitle",
        "text": "Z axis title\nA title for the z axis"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.palette_title",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.palette_title.html#palette_title",
        "title": "palette_title",
        "section": "palette_title",
        "text": "Colorbar title string\nString draw to the right of the colorbar as a title. Default: none"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_opacity",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.line_marker_opacity.html#line_marker_opacity",
        "title": "line_marker_opacity",
        "section": "line_marker_opacity",
        "text": "Marker opacity\nThe opacity of the line marker. Default: 1.0"
    },
    {
        "objectID": "gettingstarted/index",
        "href": "gettingstarted/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PyDynamicReporting supports Ansys Dynamic Reporting 2023 R2 and later. To run\nPyDynamicReporting, you must have either a local copy of an Ansys installation\nwith a product that uses Ansys Dynamic Reporting or use a Docker image.\nTo get a copy of Ansys, visit the Ansys website.\nUp to the Ansys 2023 R2 release, Ansys Dynamic Reporting is installed as\npart of the Ansys EnSight package, under the Fluids section of the\ninstaller. Starting from the Ansys 2024 R1 release, Ansys Dynamic Reporting\nis installed separately, and can be found in the Fluids section of the\nAnsys installer. Please also note that in all versions, Ansys Dynamic Reporting\nis automatically installed if one of the following Ansys products is\ninstalled: EnSight, Forte, Fluent, Polyflow, or Icepack.\nThe ansys-dynamicreporting-core package currently supports Python 3.9\nthrough Python 3.12 on Windows and Linux.\nTo install the latest package from GitHub, run this command:\nIf you plan on doing local development of PyDynamicReporting, install the\nlatest pydynamicreporting package with this code:\nNow you can start developing the pydynamicreporting package.\nOnce PyDynamicReporting is installed, your first step is to create an Ansys\nDynamic Reporting object. There are two ways to do this, based on whether\nor not there is a local Ansys installation.\nIf there is a local installation, simply point to the version\ndirectory inside the Ansys installation:\nIf there is no local installation, you must direct PyDynamicReporting to\ndownload (if not already available) and run a Docker image:\nThe data_directory parameter must pass a temporary directory that has to exist and be\nempty. This directory stores temporary information from the Docker image.\nOnce an Ansys Dynamic Reporting instance is created, you can start\nan Ansys Dynamic Reporting service or connect to a running\none.\nTo connect to a running service, run this code:\nThe preceding code assumes that there is a running Ansys Dynamic Reporting\nservice on your machine on port 8000 with the default username and password.\nIf the Ansys Dynamic Reporting service does not use the default values for\nthe URL, port, and login credentials, you must provide the appropriate values\nin the connect method:\nWhen you are connecting to a running Ansys Dynamic Reporting service, the\nweb components that you obtain from PyDynamicReporting might or might not\nbe embedded. This is controlled by how the Ansys Dynamic Reporting service\nwas started. To ensure that web components can be embedded, you must\nstart the Ansys Dynamic Reporting service with iframes enabled via this flag:\nIf you are using PyDnamicReporting to start the Ansys Dynamic Reporting\nservice, you do not need to take any action because iframes are enabled\nby default. For more information on the launcher in Ansys Dynamic Reporting,\nsee the Ansys Dynamic Reporting documentation.\nNow, assume that you do not have a running Ansys Dynamic Reporting service\naccessible to you and that you must start one. You can use this simple\nstart method:\nThe adr_service object is now connected to a newly started Ansys Dynamic\nReporting service on a new database. Once again, you can control the parameters\nof the Ansys Dynamic Reporting service (port number, username, and\npassword) by passing them as arguments:\npip install ansys-dynamicreporting-core\ngit clone https://github.com/ansys/pydynamicreporting.git\ncd pydynamicreporting\npip install virtualenv\nvirtualenv venv  # create virtual environment. If on Windows, use virtualenv.exe venv\nsource venv/bin/activate # If on Windows, use  .\\venv\\Scripts\\activate\npip install .[dev]  # install dependencies\nmake install-dev  # install pydynamicreporting in editable mode\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=\"docker\", data_directory=r\"C:\\tmp\\docker\")\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect()\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\n--allow_iframe_embedding\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\db_directory\",\n)\nsession_guid = adr_service.start(create_db=True)\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\db_directory\",\n    port=8010,\n)\nsession_guid = adr_service.start(create_db=True, username=\"MyUser\", password=\"abcd\")"
    },
    {
        "objectID": "gettingstarted/index",
        "href": "gettingstarted/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "The ansys-dynamicreporting-core package currently supports Python 3.9\nthrough Python 3.12 on Windows and Linux.\nTo install the latest package from GitHub, run this command:\nIf you plan on doing local development of PyDynamicReporting, install the\nlatest pydynamicreporting package with this code:\nNow you can start developing the pydynamicreporting package.\npip install ansys-dynamicreporting-core\ngit clone https://github.com/ansys/pydynamicreporting.git\ncd pydynamicreporting\npip install virtualenv\nvirtualenv venv  # create virtual environment. If on Windows, use virtualenv.exe venv\nsource venv/bin/activate # If on Windows, use  .\\venv\\Scripts\\activate\npip install .[dev]  # install dependencies\nmake install-dev  # install pydynamicreporting in editable mode"
    },
    {
        "objectID": "gettingstarted/index",
        "href": "gettingstarted/index.html#create-an-ansys-dynamic-reporting-instance",
        "title": "Getting started > Create an Ansys Dynamic Reporting instance",
        "section": "Create an Ansys Dynamic Reporting instance",
        "text": "Once PyDynamicReporting is installed, your first step is to create an Ansys\nDynamic Reporting object. There are two ways to do this, based on whether\nor not there is a local Ansys installation.\nIf there is a local installation, simply point to the version\ndirectory inside the Ansys installation:\nIf there is no local installation, you must direct PyDynamicReporting to\ndownload (if not already available) and run a Docker image:\nThe data_directory parameter must pass a temporary directory that has to exist and be\nempty. This directory stores temporary information from the Docker image.\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=\"docker\", data_directory=r\"C:\\tmp\\docker\")"
    },
    {
        "objectID": "gettingstarted/index",
        "href": "gettingstarted/index.html#start-and-connect-to-an-ansys-dynamic-reporting-service",
        "title": "Getting started > Start and connect to an Ansys Dynamic Reporting service",
        "section": "Start and connect to an Ansys Dynamic Reporting service",
        "text": "Once an Ansys Dynamic Reporting instance is created, you can start\nan Ansys Dynamic Reporting service or connect to a running\none.\nTo connect to a running service, run this code:\nThe preceding code assumes that there is a running Ansys Dynamic Reporting\nservice on your machine on port 8000 with the default username and password.\nIf the Ansys Dynamic Reporting service does not use the default values for\nthe URL, port, and login credentials, you must provide the appropriate values\nin the connect method:\nWhen you are connecting to a running Ansys Dynamic Reporting service, the\nweb components that you obtain from PyDynamicReporting might or might not\nbe embedded. This is controlled by how the Ansys Dynamic Reporting service\nwas started. To ensure that web components can be embedded, you must\nstart the Ansys Dynamic Reporting service with iframes enabled via this flag:\nIf you are using PyDnamicReporting to start the Ansys Dynamic Reporting\nservice, you do not need to take any action because iframes are enabled\nby default. For more information on the launcher in Ansys Dynamic Reporting,\nsee the Ansys Dynamic Reporting documentation.\nNow, assume that you do not have a running Ansys Dynamic Reporting service\naccessible to you and that you must start one. You can use this simple\nstart method:\nThe adr_service object is now connected to a newly started Ansys Dynamic\nReporting service on a new database. Once again, you can control the parameters\nof the Ansys Dynamic Reporting service (port number, username, and\npassword) by passing them as arguments:\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect()\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\")\nret = adr_service.connect(\n    url=\"my_machine:8010\", username=\"MyUsername\", password=\"MyPassword\"\n)\n--allow_iframe_embedding\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\db_directory\",\n)\nsession_guid = adr_service.start(create_db=True)\nimport ansys.dynamicreporting.core as adr\n\nadr_service = adr.Service(\n    ansys_installation=r\"C:\\Program Files\\ANSYS Inc\\v232\",\n    db_directory=r\"D:\\tmp\\db_directory\",\n    port=8010,\n)\nsession_guid = adr_service.start(create_db=True, username=\"MyUser\", password=\"abcd\")"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.get_iframe",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.get_iframe.html#get_iframe",
        "title": "get_iframe",
        "section": "get_iframe",
        "text": "Get the iframe object corresponding to the item.\nWidth of the iframe object. The default is min(Item width * 1,1, 1000).\nFor example, if the item width is 0, the default is 1000.\nHeight of the iframe object. The default is min(Item height, fixed height),\nwhere the fixed height is 800 for an item scene and 400 otherwise.\niframe object corresponding to the item. If no iframe can be generated,\nNone is returned.\nimport ansys.dynamicreporting.core as adr\nadr_service = adr.Service(ansys_installation = r'C:\\Program Files\\ANSYS Inc\\v232')\nret = adr_service.connect(url='http://localhost:8010')\nmy_txt = adr_service.create_item()\nmy_txt.item_text = '<h1>The test</h1>This is a text item'\nitem_iframe = my_txt.get_iframe()"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Introductory examples show how to use PyDynamicReporting to create or connect to\nan Ansys Dynamic Reporting service, create a database for a new service, and\ncreate and visualize items in a database.\nsphx_glr_examples_00-basic_00-create_db.py\nsphx_glr_examples_00-basic_01-connect.py\nsphx_glr_examples_00-basic_02-plottype.py\nIntermediate examples show how to use PyDynamicReporting\nto query an Ansys Dynamic Reporting database, modify its items,\nand get their corresponding web components.\nsphx_glr_examples_25-intermediate_00-tagging.py\nsphx_glr_examples_25-intermediate_01-queries.py\nAdvanced examples show how to use the low-level API in Ansys\nDynamic Reporting to create, query, visualize, and embed reports based on\ncustomers case studies.\nsphx_glr_examples_50-advanced_00-complete_report.py\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py\nsphx_glr_examples_50-advanced_02-customized_report_embed.py\nGallery generated by Sphinx-Gallery"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#intermediate-examples",
        "title": "Examples > Intermediate examples",
        "section": "Intermediate examples",
        "text": "Intermediate examples show how to use PyDynamicReporting\nto query an Ansys Dynamic Reporting database, modify its items,\nand get their corresponding web components.\nsphx_glr_examples_25-intermediate_00-tagging.py\nsphx_glr_examples_25-intermediate_01-queries.py"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#advanced-examples",
        "title": "Examples > Advanced examples",
        "section": "Advanced examples",
        "text": "Advanced examples show how to use the low-level API in Ansys\nDynamic Reporting to create, query, visualize, and embed reports based on\ncustomers case studies.\nsphx_glr_examples_50-advanced_00-complete_report.py\nsphx_glr_examples_50-advanced_01-two_simulation_same_db.py\nsphx_glr_examples_50-advanced_02-customized_report_embed.py\nGallery generated by Sphinx-Gallery"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot_zaxis_type",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot_zaxis_type.html#plot_zaxis_type",
        "title": "plot_zaxis_type",
        "section": "plot_zaxis_type",
        "text": "Z axis style\nlinear log"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.palette_show",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.palette_show.html#palette_show",
        "title": "palette_show",
        "section": "palette_show",
        "text": "Colorbar display\nShowhide the colorbar with the values 10. Example: 1"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.plot_xaxis_type",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.plot_xaxis_type.html#plot_xaxis_type",
        "title": "plot_xaxis_type",
        "section": "plot_xaxis_type",
        "text": "X axis style\nlinear log"
    },
    {
        "objectID": "_autosummary/ansys.dynamicreporting.core.Item.table_scrollx",
        "href": "_autosummary/ansys.dynamicreporting.core.Item.table_scrollx.html#table_scrollx",
        "title": "table_scrollx",
        "section": "table_scrollx",
        "text": "Horizontal scrolling\nControl visibility of horizontal scrollbar.  Default: 1"
    }
]