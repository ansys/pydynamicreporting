name: CI-CD

# run only on main branch.  This avoids duplicated actions on PRs
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - release/*
  push:
    tags:
      - "v*"
    branches:
      - main
      - release/*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCUMENTATION_CNAME: 'dynamicreporting.docs.pyansys.com'
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-dynamicreporting-core'
  PACKAGE_NAMESPACE: 'ansys.dynamicreporting.core'

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation style check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  test:
    name: Testing
    needs: [smoke-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker container
        run: make pull-docker

      - name: Run pytest
        uses: ansys/actions/tests-pytest@v4
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER )}}
        with:
          checkout: false
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          pytest-extra-args: -rvx --setup-show --cov=ansys.dynamicreporting --cov-report html:coverage-html --cov-report term --cov-report xml:coverage.xml

      - name: Upload coverage report
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        uses: actions/upload-artifact@v3
        with:
          name: coverage.xml
          path: coverage.xml
          retention-days: 60
          if-no-files-found: error

      - name: Upload coverage to Codecov
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        uses: codecov/codecov-action@v3

  docs:
    name: Build docs
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - name: Run Ansys documentation building action
        uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false

  package:
    name: Package library
    needs: [test, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the public PyPI repository
        uses: ansys/actions/release-pypi-public@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: Release to GitHub
        uses: ansys/actions/release-github@v4
        if: ${{ !env.ACT }}
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v4
        if: ${{ !env.ACT }}
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v4
        if: ${{ !env.ACT }}
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  build-failure:
    name: Teams notify on failure
    if: failure() && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref_type == 'tag')
    needs: [ style, test, docs-style ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Microsoft Teams Notification
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: GitHub CI failure - ${{ github.event.pull_request.title }}
          notification-color: dc3545
          timezone: America/New_York
