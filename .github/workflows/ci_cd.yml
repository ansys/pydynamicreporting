name: CI-CD

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "v*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCUMENTATION_CNAME: 'dynamicreporting.docs.pyansys.com'
  MAIN_PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'ansys-dynamicreporting-core'
  PACKAGE_NAMESPACE: 'ansys.dynamicreporting.core'
  ANSYS_VERSION: '252'
  DPF_STANDALONE_SUFFIX: ''

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          show-diff-on-failure: false

  #  docs-style:
  #    name: Documentation style check
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: PyAnsys documentation style checks
  #        uses: ansys/actions/doc-style@v4
  #        with:
  #          token: ${{ secrets.GITHUB_TOKEN }}

  smoketest:
    name: Smoke test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheelhouse
        uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

      - name: Install from wheelhouse
        run: python -m pip install --no-index --find-links=wheelhouse ${{ env.PACKAGE_NAME }}

      - name: Run smoketest
        run: make smoketest

  test:
    name: Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker container
        run: make pull-docker

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Set licensing if necessary"
        if: ${{ env.ANSYS_VERSION > '231' }}
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Install DPF"
        id: set-server-path
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          standalone_suffix: ${{ env.DPF_STANDALONE_SUFFIX }}
          ANSYS_VERSION : ${{ env.ANSYS_VERSION }}

      - name: "Debug Operator"
        shell: bash
        run: |
            ls -al dpf-standalone/v252
            ldd dpf-standalone/v252/ansys/dpf/server_2025_2_pre0/dpf/bin/linx64/libmapdlOperatorsCore.so
            echo "!!!!!!!!!!!!!!!!!"
            ldd dpf-standalone/v252/ansys/dpf/server_2025_2_pre0/aisol/dll/linx64/libDataProcessingCore.so

      - name: "Update packages"
        shell: bash
        run: |
            sudo apt update && sudo apt install -y libgl1-mesa-dev

      - name: "Install python dependencies"
        run: pip install -e .[test]

      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from ansys.dpf import core as dpf
            try:
              dpf.load_library("mapdlOperatorsCore", "mapdl")
            except Exception as e:
              print(f"!!!!!!!!!!!!!!!!!Error occurred while loading library: {e}")
        name: "Run DPF python script"

      - name: Run pytest
        run: |
          echo $ANSYS_ROOT_FOLDER
          echo "====================="
          pip freeze
          echo "====================="
          ldd dpf-standalone/v252/ansys/dpf/server_2025_2_pre0/dpf/bin/linx64/libmapdlOperatorsCore.so
          echo "====================="
          pytest tests/test_enhanced_images.py
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          ANSYS_ROOT_FOLDER: ${{ github.workspace }}/dpf-standalone/v252/ansys/dpf/server_2025_2_pre0

    #   - name: Run pytest
    #     run: make test
    #     env:
    #       ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

      - name: Upload coverage report
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage-html
          retention-days: 60
          if-no-files-found: error

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        uses: codecov/codecov-action@v5

  docs:
    name: Build docs
    runs-on: ubuntu-latest
    #    needs: [docs-style]
    steps:
      - name: Run Ansys documentation building action
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false
          sphinxopts: '-j auto'

  package:
    name: Package library
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [ package ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:

      - name: Download all artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: ${{ env.PACKAGE_NAME }}-artifacts

      - name: "Upload artifacts to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.PACKAGE_NAME }}-artifacts
          skip-existing: false

      - name: Release to GitHub
        uses: ansys/actions/release-github@54d45960ae9d009b2a3f26dfa687f611a85c6da3 # v10.0.11
        if: ${{ !env.ACT }}
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ docs, package ]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v10
        if: ${{ !env.ACT }}
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [ docs, release ]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v10
        if: ${{ !env.ACT }}
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  ci-failure:
    name: Teams notify on failure
    if: failure() && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref_type == 'tag')
    needs: [ package ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Microsoft Teams Notification
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI_CI }}
          notification-summary: CI build failure
          notification-color: dc3545
          timezone: America/New_York
