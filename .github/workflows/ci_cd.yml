name: CI-CD

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "v*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: ./.github/actions/setup-python-env

      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          show-diff-on-failure: false

  smoketest:
    name: Smoke test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: ./.github/actions/setup-python-env

      - name: Build wheelhouse
        uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          use-uv: true

      - name: Install from wheelhouse
        run: uv run python -m pip install --no-index --find-links=wheelhouse ${{ env.PACKAGE_NAME }}

      - name: Run smoketest
        run: make smoketest

  test:
    name: Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: ./.github/actions/setup-python-env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker container
        run: make pull-docker

      - name: Set licensing if necessary
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: Update packages
        shell: bash
        run: |
            sudo apt update && sudo apt install -y \
            libx11-dev \
            libgl1-mesa-dev \
            libxrender1

      - name: Install DPF
        id: set-server-path
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          standalone_suffix: ${{ env.DPF_STANDALONE_SUFFIX }}
          ANSYS_VERSION : ${{ env.ANSYS_VERSION }}

      - name: Run pytest
        run: make test
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

      - name: Upload coverage report
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage-html
          retention-days: 60
          if-no-files-found: error

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        uses: codecov/codecov-action@v5

  docs:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Env
        uses: ./.github/actions/setup-env

      - name: Run Ansys documentation building action
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false
          sphinxopts: '-j auto'

  package:
    name: Package library
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Env
        uses: ./.github/actions/setup-env

      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-uv: true

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ docs, package ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Env
        uses: ./.github/actions/setup-env

      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v10
        if: ${{ !env.ACT }}
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  ci-failure:
    name: Teams notify on failure
    if: failure()
    needs: [ package ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Microsoft Teams Notification
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI_CI }}
          notification-summary: CI build failure
          notification-color: dc3545
          timezone: America/New_York
