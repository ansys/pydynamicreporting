[project]
name = "ansys-dynamicreporting-core"
dynamic = ["version"]
requires-python = ">=3.10, <3.13"
dependencies = [
    "docker>=7.1.0",
    "pypng>=0.20220715.0",
    "requests>=2.32",
    "urllib3<3.0.0",
    "Pillow>=9.3.0",
    "python-dateutil>=2.8.0",
    "pytz>=2021.3",
    "psutil>=6.0.0",
    # core ADR dependencies - necessary for serverless ADR imports from the installation
    "django>=4.2.19,<5.0",
    "django-guardian>=2.4.0,<3.0.0",
    "djangorestframework>=3.15.2,<3.16.0",
    "tzlocal>=5.3.1,<6.0",
    "numpy>=1.26.4,<2.0.0",
    "python-pptx>=1.0.2,<2.0.0",
    "pandas>=2.2.2,<3.0.0",
    "statsmodels>=0.14.2,<0.15.0",
    "psycopg[binary]>=3.2.6,<3.3.0",
    "qtpy>=2.4.3,<2.5.0",
    "lark>=1.2.2,<1.3.0",
    "docutils>=0.21",
]
description = "Python interface to Ansys Dynamic Reporting"
readme = "README.rst"
keywords = ["dynamicreporting", "pydynamicreporting", "pyansys", "ansys"]
license = { text = "MIT" }
authors = [
    { name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" },
    { name = "Ansys ADR Team", email = "adrteam@ansys.com" },
]
maintainers = [
    { name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" },
    { name = "Ansys ADR Team", email = "adrteam@ansys.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
homepage = "https://github.com/ansys/pydynamicreporting"
documentation = "https://dynamicreporting.docs.pyansys.com/"
changelog = "https://github.com/ansys/pydynamicreporting/blob/main/CHANGELOG.md"
repository = "https://github.com/ansys/pydynamicreporting"
bug_tracker = "https://github.com/ansys/pydynamicreporting/issues"
ci = "https://github.com/ansys/pydynamicreporting/actions"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pyvista",
    "vtk",
    "ansys-dpf-core"
]
doc = [
    "ansys-sphinx-theme",
    "numpydoc",
    "Sphinx",
    "sphinx-copybutton",
    "sphinx-gallery",
]
dev = [
    "pip",
    "twine",
    "hatch",
    "ipdb",
    "uv",
    "pre-commit",
    "black",
    "isort",
    #    "ruff",
    #    "pip-audit",
    #    "bandit[toml]",
    "codespell",
    #    "mypy",
    #    "vulture",
    #    "deptry",
]

[build-system]
requires = ["hatchling", "hatch-timestamp-version"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/ansys/dynamicreporting/core/_version.py"
source = "vcs-dev-timestamp"
validate-bump = true

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"
timestamp_format = "long"

[tool.hatch.build.hooks.custom]
path = "codegen/build_hook.py"

[tool.hatch.build.targets.wheel]
ignore-vcs = true
packages = ["src/ansys"]

[tool.hatch.build.targets.sdist]
ignore-vcs = true
include = [
    "src/**",
    "codegen/**",
    "AUTHORS",
    "CHANGELOG.md",
    "CONTRIBUTING.rst",
    "CONTRIBUTORS.md",
    "LICENSE",
    "README.rst",
]

[tool.hatch.envs.default]
path = ".venv"
env-vars = { PYTHONPATH = "." }

[tool.uv]
default-groups = "all"

[tool.pytest.ini_options]
tmp_path_retention_policy = "failed"
testpaths = ["tests"]
addopts = "--capture=tee-sys --tb=native -p no:warnings -vv"
markers = [
    "integration:Run integration tests",
    "smoke:Run the smoke tests",
    "unit:Run the unit tests",
    "ado_test: subset of tests to be run in the ADO pipeline for ADR",
]
norecursedirs = [
    ".git",
    ".idea",
]
filterwarnings = [
    "ignore:.+:DeprecationWarning"
]

[tool.coverage.run]
branch = true
source = [
    "ansys.dynamicreporting.core",
]
omit = [
    "*/ansys/dynamicreporting/core/adr_utils.py",
    "*/ansys/dynamicreporting/core/build_info.py",
    "*/ansys/dynamicreporting/core/_version.py",
]

[tool.coverage.report]
show_missing = true
ignore_errors = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
show_contexts = true

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
skip_gitignore = true
force_sort_within_sections = true
line_length = 100
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.codespell]
ignore-words = "doc/styles/Vocab/ANSYS/accept.txt"
skip = '*.pyc,*.xml,*.gif,*.png,*.jpg,*.js,*.html,doc/source/examples/**/*.ipynb,*.json,*.gz'
quiet-level = 3

[tool.bandit]
targets = ["src"]
recursive = true
number = 3
severity_level = "high"
require_serial = true
exclude_dirs = ["venv/*", "scripts/*", "tests/*", "doc/*"]

[tool.pre-commit.default_language_versions]
python = "3.12"
