[project]
name = "ansys-dynamicreporting-core"
description = "Python interface to Ansys Dynamic Reporting"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["dynamicreporting", "pydynamicreporting", "pyansys", "ansys"]
dynamic = ["version"]
authors = [
    { name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" },
]
maintainers = [
    { name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" },
    { name = "Ansys ADR Team", email = "adrteam@ansys.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "docker>=7.1.0",
    "pypng>=0.20220715.0",
    "requests>=2.32",
    "urllib3<3.0.0",
    "Pillow>=9.3.0",
    "python-dateutil>=2.8.0",
    "pytz>=2021.3",
    "psutil>=6.0.0",
    # core ADR dependencies
    "django~=4.2",
    "djangorestframework~=3.15",
    "django-guardian~=2.4",
    "tzlocal~=5.0",
    "numpy>=1.23.5,<3",
    "python-pptx==0.6.19",
    "pandas>=2.0",
    "statsmodels>=0.14",
    "docutils>=0.21",
    "psycopg[binary]>=3.2.3",
]

[project.urls]
homepage = "https://github.com/ansys/pydynamicreporting"
documentation = "https://dynamicreporting.docs.pyansys.com/"
changelog = "https://github.com/ansys/pydynamicreporting/blob/main/CHANGELOG.md"
repository = "https://github.com/ansys/pydynamicreporting"
bug_tracker = "https://github.com/ansys/pydynamicreporting/issues"
ci = "https://github.com/ansys/pydynamicreporting/actions"

[project.optional-dependencies]
test = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
]
test-extra = [
    "pyvista==0.44.1",
    "vtk==9.4.0",
    "ansys-dpf-core==0.13.0",
]
doc = [
    "ansys-sphinx-theme>=1.1.1",
    "numpydoc>=1.8.0",
    "Sphinx>=8.0.2",
    "sphinx-copybutton>=0.5.2",
    "sphinx-gallery>=0.18.0",
]
dev = [
    "ipdb",
    "uv",
    "tox",
    "tox-uv",
    "tox-gh-actions",
    "pytest",
    "pytest-cov",
    "pre-commit",
    "black",
    "ruff",
    "pip-audit",
    "bandit[toml]",
    "codespell",
    "mypy",
    "vulture",
    "deptry",
    "twine",
    "hatch",
]

[build-system]
requires = ["hatchling", "hatch-timestamp-version"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/ansys/dynamicreporting/core/_version.py"
source = "vcs-dev-timestamp"
validate-bump = true

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"
timestamp_format = "long"

[tool.hatch.build]
include = [
  "src/**",
  "README.md",
  "LICENSE",
  "CHANGELOG.md"
]

[tool.hatch.build.targets.wheel]
# Include everything under src/ansys/ to support multi-package namespace
packages = ["ansys"]

[tool.hatch.build.targets.editable]
packages = ["ansys"]

[tool.hatch.envs.default]
path = ".venv"

[tool.uv]
default-groups = "all"

[tool.mypy]
files = [
    "hatch_timestamp_version"
]
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true
follow_imports = "silent"
disable_error_code = ["import-untyped"]

[tool.pytest.ini_options]
tmp_path_retention_policy = "failed"
testpaths = ["tests"]
addopts = "--capture=tee-sys --tb=native -p no:warnings -vv"
markers = [
    "integration:Run integration tests",
    "smoke:Run the smoke tests",
    "unit:Run the unit tests",
    "ado_test: subset of tests to be run in the ADO pipeline for ADR",
]
norecursedirs =[
  ".git",
  ".idea",
]
filterwarnings = [
    "ignore:.+:DeprecationWarning"
]

[tool.coverage.run]
branch = true
source = [
    "ansys.dynamicreporting.core",
]
omit = [
    "*/ansys/dynamicreporting/core/adr_utils.py",
    "*/ansys/dynamicreporting/core/build_info.py",
    "*/ansys/dynamicreporting/core/_version.py",
]

# Configuration for coverage.py
[tool.coverage.report]
show_missing = true
skip_covered = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
show_contexts = true

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.isort]
profile = "black"
skip_gitignore = true
force_sort_within_sections = true
line_length = 100
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.ruff]
target-version = "py310"
line-length = 100
fix = true
exclude = [".venv", "__init__.py"]

[tool.ruff.lint]
fixable = ["ALL"]
select = [
    "YTT",   # flake8-2020
    "S",     # flake8-bandit
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "SIM",   # flake8-simplify
    "I",     # isort
    "C90",   # mccabe
    "E", "W",# pycodestyle
    "N",     # pep8-naming
    "F",     # pyflakes
    "PGH",   # pygrep-hooks
    "UP",    # pyupgrade
    "RUF",   # ruff native rules
    "TRY",   # try/except linting
    "T201"   # print statement disallow
]
ignore = [
    "C901",    # Function is too complex
    "PGH003"   # blanket-type-ignore
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["ansys", "tests"]
force-sort-within-sections = true

[tool.codespell]
ignore-words = "doc/styles/Vocab/ANSYS/accept.txt"
skip = '*.pyc,*.xml,*.gif,*.png,*.jpg,*.js,*.html,doc/source/examples/**/*.ipynb,*.json,*.gz'
quiet-level = 3

[tool.bandit]
targets = ["src"]
recursive = true
number = 3
severity_level = "high"
require_serial = true
exclude_dirs = [
    "venv/*",
    "setup.py",
    "test_cleanup.py",
    "tests/*",
    "doc/*"
]

[tool.vulture]
paths = ["src", "tests"]
min_confidence = 80
sort_by_size = true
exclude = ["venv/", ".venv/"]

[tool.deptry]
exclude = ["venv/.*", ".venv/.*", "tests/.*"]
